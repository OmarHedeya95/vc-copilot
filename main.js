/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) =>
  function __require() {
    return (
      mod ||
        (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod),
      mod.exports
    );
  };
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, "default", { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../../../../../../../node_modules/binary-search/index.js
var require_binary_search = __commonJS({
  "../../../../../../../../node_modules/binary-search/index.js"(
    exports,
    module2
  ) {
    module2.exports = function (haystack, needle, comparator, low, high) {
      var mid, cmp;
      if (low === void 0) low = 0;
      else {
        low = low | 0;
        if (low < 0 || low >= haystack.length)
          throw new RangeError("invalid lower bound");
      }
      if (high === void 0) high = haystack.length - 1;
      else {
        high = high | 0;
        if (high < low || high >= haystack.length)
          throw new RangeError("invalid upper bound");
      }
      while (low <= high) {
        mid = low + ((high - low) >>> 1);
        cmp = +comparator(haystack[mid], needle, mid, haystack);
        if (cmp < 0) low = mid + 1;
        else if (cmp > 0) high = mid - 1;
        else return mid;
      }
      return ~low;
    };
  },
});

// ../../../../../../../../node_modules/num-sort/index.js
var require_num_sort = __commonJS({
  "../../../../../../../../node_modules/num-sort/index.js"(exports) {
    "use strict";
    function assertNumber(number) {
      if (typeof number !== "number") {
        throw new TypeError("Expected a number");
      }
    }
    exports.ascending = (left, right) => {
      assertNumber(left);
      assertNumber(right);
      if (Number.isNaN(left)) {
        return -1;
      }
      if (Number.isNaN(right)) {
        return 1;
      }
      return left - right;
    };
    exports.descending = (left, right) => {
      assertNumber(left);
      assertNumber(right);
      if (Number.isNaN(left)) {
        return 1;
      }
      if (Number.isNaN(right)) {
        return -1;
      }
      return right - left;
    };
  },
});

// ../../../../../../../../node_modules/decamelize/index.js
var require_decamelize = __commonJS({
  "../../../../../../../../node_modules/decamelize/index.js"(exports, module2) {
    "use strict";
    module2.exports = function (str3, sep) {
      if (typeof str3 !== "string") {
        throw new TypeError("Expected a string");
      }
      sep = typeof sep === "undefined" ? "_" : sep;
      return str3
        .replace(/([a-z\d])([A-Z])/g, "$1" + sep + "$2")
        .replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1" + sep + "$2")
        .toLowerCase();
    };
  },
});

// ../../../../../../../../node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "../../../../../../../../node_modules/camelcase/index.js"(exports, module2) {
    "use strict";
    var UPPERCASE = /[\p{Lu}]/u;
    var LOWERCASE = /[\p{Ll}]/u;
    var LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
    var IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
    var SEPARATORS = /[_.\- ]+/;
    var LEADING_SEPARATORS = new RegExp("^" + SEPARATORS.source);
    var SEPARATORS_AND_IDENTIFIER = new RegExp(
      SEPARATORS.source + IDENTIFIER.source,
      "gu"
    );
    var NUMBERS_AND_IDENTIFIER = new RegExp("\\d+" + IDENTIFIER.source, "gu");
    var preserveCamelCase = (string, toLowerCase, toUpperCase) => {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < string.length; i++) {
        const character = string[i];
        if (isLastCharLower && UPPERCASE.test(character)) {
          string = string.slice(0, i) + "-" + string.slice(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (
          isLastCharUpper &&
          isLastLastCharUpper &&
          LOWERCASE.test(character)
        ) {
          string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower =
            toLowerCase(character) === character &&
            toUpperCase(character) !== character;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper =
            toUpperCase(character) === character &&
            toLowerCase(character) !== character;
        }
      }
      return string;
    };
    var preserveConsecutiveUppercase = (input, toLowerCase) => {
      LEADING_CAPITAL.lastIndex = 0;
      return input.replace(LEADING_CAPITAL, (m1) => toLowerCase(m1));
    };
    var postProcess = (input, toUpperCase) => {
      SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
      NUMBERS_AND_IDENTIFIER.lastIndex = 0;
      return input
        .replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) =>
          toUpperCase(identifier)
        )
        .replace(NUMBERS_AND_IDENTIFIER, (m) => toUpperCase(m));
    };
    var camelCase2 = (input, options) => {
      if (!(typeof input === "string" || Array.isArray(input))) {
        throw new TypeError("Expected the input to be `string | string[]`");
      }
      options = {
        pascalCase: false,
        preserveConsecutiveUppercase: false,
        ...options,
      };
      if (Array.isArray(input)) {
        input = input
          .map((x) => x.trim())
          .filter((x) => x.length)
          .join("-");
      } else {
        input = input.trim();
      }
      if (input.length === 0) {
        return "";
      }
      const toLowerCase =
        options.locale === false
          ? (string) => string.toLowerCase()
          : (string) => string.toLocaleLowerCase(options.locale);
      const toUpperCase =
        options.locale === false
          ? (string) => string.toUpperCase()
          : (string) => string.toLocaleUpperCase(options.locale);
      if (input.length === 1) {
        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
      }
      const hasUpperCase = input !== toLowerCase(input);
      if (hasUpperCase) {
        input = preserveCamelCase(input, toLowerCase, toUpperCase);
      }
      input = input.replace(LEADING_SEPARATORS, "");
      if (options.preserveConsecutiveUppercase) {
        input = preserveConsecutiveUppercase(input, toLowerCase);
      } else {
        input = toLowerCase(input);
      }
      if (options.pascalCase) {
        input = toUpperCase(input.charAt(0)) + input.slice(1);
      }
      return postProcess(input, toUpperCase);
    };
    module2.exports = camelCase2;
    module2.exports.default = camelCase2;
  },
});

// ../../../../../../../../node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "../../../../../../../../node_modules/ansi-styles/index.js"(
    exports,
    module2
  ) {
    "use strict";
    var ANSI_BACKGROUND_OFFSET = 10;
    var wrapAnsi256 =
      (offset = 0) =>
      (code) =>
        `\x1B[${38 + offset};5;${code}m`;
    var wrapAnsi16m =
      (offset = 0) =>
      (red, green, blue) =>
        `\x1B[${38 + offset};2;${red};${green};${blue}m`;
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles2 = {
        modifier: {
          reset: [0, 0],
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          overline: [53, 55],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29],
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39],
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49],
        },
      };
      styles2.color.gray = styles2.color.blackBright;
      styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright;
      styles2.color.grey = styles2.color.blackBright;
      styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles2)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles2[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`,
          };
          group[styleName] = styles2[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles2, groupName, {
          value: group,
          enumerable: false,
        });
      }
      Object.defineProperty(styles2, "codes", {
        value: codes,
        enumerable: false,
      });
      styles2.color.close = "\x1B[39m";
      styles2.bgColor.close = "\x1B[49m";
      styles2.color.ansi256 = wrapAnsi256();
      styles2.color.ansi16m = wrapAnsi16m();
      styles2.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
      styles2.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
      Object.defineProperties(styles2, {
        rgbToAnsi256: {
          value: (red, green, blue) => {
            if (red === green && green === blue) {
              if (red < 8) {
                return 16;
              }
              if (red > 248) {
                return 231;
              }
              return Math.round(((red - 8) / 247) * 24) + 232;
            }
            return (
              16 +
              36 * Math.round((red / 255) * 5) +
              6 * Math.round((green / 255) * 5) +
              Math.round((blue / 255) * 5)
            );
          },
          enumerable: false,
        },
        hexToRgb: {
          value: (hex) => {
            const matches = /(?<colorString>[a-f\d]{6}|[a-f\d]{3})/i.exec(
              hex.toString(16)
            );
            if (!matches) {
              return [0, 0, 0];
            }
            let { colorString } = matches.groups;
            if (colorString.length === 3) {
              colorString = colorString
                .split("")
                .map((character) => character + character)
                .join("");
            }
            const integer = Number.parseInt(colorString, 16);
            return [(integer >> 16) & 255, (integer >> 8) & 255, integer & 255];
          },
          enumerable: false,
        },
        hexToAnsi256: {
          value: (hex) => styles2.rgbToAnsi256(...styles2.hexToRgb(hex)),
          enumerable: false,
        },
      });
      return styles2;
    }
    Object.defineProperty(module2, "exports", {
      enumerable: true,
      get: assembleStyles,
    });
  },
});

// ../../../../../../../../node_modules/retry/lib/retry_operation.js
var require_retry_operation = __commonJS({
  "../../../../../../../../node_modules/retry/lib/retry_operation.js"(
    exports,
    module2
  ) {
    function RetryOperation(timeouts, options) {
      if (typeof options === "boolean") {
        options = { forever: options };
      }
      this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
      this._timeouts = timeouts;
      this._options = options || {};
      this._maxRetryTime = (options && options.maxRetryTime) || Infinity;
      this._fn = null;
      this._errors = [];
      this._attempts = 1;
      this._operationTimeout = null;
      this._operationTimeoutCb = null;
      this._timeout = null;
      this._operationStart = null;
      this._timer = null;
      if (this._options.forever) {
        this._cachedTimeouts = this._timeouts.slice(0);
      }
    }
    module2.exports = RetryOperation;
    RetryOperation.prototype.reset = function () {
      this._attempts = 1;
      this._timeouts = this._originalTimeouts.slice(0);
    };
    RetryOperation.prototype.stop = function () {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }
      if (this._timer) {
        clearTimeout(this._timer);
      }
      this._timeouts = [];
      this._cachedTimeouts = null;
    };
    RetryOperation.prototype.retry = function (err) {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }
      if (!err) {
        return false;
      }
      var currentTime = new Date().getTime();
      if (err && currentTime - this._operationStart >= this._maxRetryTime) {
        this._errors.push(err);
        this._errors.unshift(new Error("RetryOperation timeout occurred"));
        return false;
      }
      this._errors.push(err);
      var timeout = this._timeouts.shift();
      if (timeout === void 0) {
        if (this._cachedTimeouts) {
          this._errors.splice(0, this._errors.length - 1);
          timeout = this._cachedTimeouts.slice(-1);
        } else {
          return false;
        }
      }
      var self = this;
      this._timer = setTimeout(function () {
        self._attempts++;
        if (self._operationTimeoutCb) {
          self._timeout = setTimeout(function () {
            self._operationTimeoutCb(self._attempts);
          }, self._operationTimeout);
          if (self._options.unref) {
            self._timeout.unref();
          }
        }
        self._fn(self._attempts);
      }, timeout);
      if (this._options.unref) {
        this._timer.unref();
      }
      return true;
    };
    RetryOperation.prototype.attempt = function (fn, timeoutOps) {
      this._fn = fn;
      if (timeoutOps) {
        if (timeoutOps.timeout) {
          this._operationTimeout = timeoutOps.timeout;
        }
        if (timeoutOps.cb) {
          this._operationTimeoutCb = timeoutOps.cb;
        }
      }
      var self = this;
      if (this._operationTimeoutCb) {
        this._timeout = setTimeout(function () {
          self._operationTimeoutCb();
        }, self._operationTimeout);
      }
      this._operationStart = new Date().getTime();
      this._fn(this._attempts);
    };
    RetryOperation.prototype.try = function (fn) {
      console.log("Using RetryOperation.try() is deprecated");
      this.attempt(fn);
    };
    RetryOperation.prototype.start = function (fn) {
      console.log("Using RetryOperation.start() is deprecated");
      this.attempt(fn);
    };
    RetryOperation.prototype.start = RetryOperation.prototype.try;
    RetryOperation.prototype.errors = function () {
      return this._errors;
    };
    RetryOperation.prototype.attempts = function () {
      return this._attempts;
    };
    RetryOperation.prototype.mainError = function () {
      if (this._errors.length === 0) {
        return null;
      }
      var counts = {};
      var mainError = null;
      var mainErrorCount = 0;
      for (var i = 0; i < this._errors.length; i++) {
        var error = this._errors[i];
        var message = error.message;
        var count = (counts[message] || 0) + 1;
        counts[message] = count;
        if (count >= mainErrorCount) {
          mainError = error;
          mainErrorCount = count;
        }
      }
      return mainError;
    };
  },
});

// ../../../../../../../../node_modules/retry/lib/retry.js
var require_retry = __commonJS({
  "../../../../../../../../node_modules/retry/lib/retry.js"(exports) {
    var RetryOperation = require_retry_operation();
    exports.operation = function (options) {
      var timeouts = exports.timeouts(options);
      return new RetryOperation(timeouts, {
        forever: options && (options.forever || options.retries === Infinity),
        unref: options && options.unref,
        maxRetryTime: options && options.maxRetryTime,
      });
    };
    exports.timeouts = function (options) {
      if (options instanceof Array) {
        return [].concat(options);
      }
      var opts = {
        retries: 10,
        factor: 2,
        minTimeout: 1 * 1e3,
        maxTimeout: Infinity,
        randomize: false,
      };
      for (var key in options) {
        opts[key] = options[key];
      }
      if (opts.minTimeout > opts.maxTimeout) {
        throw new Error("minTimeout is greater than maxTimeout");
      }
      var timeouts = [];
      for (var i = 0; i < opts.retries; i++) {
        timeouts.push(this.createTimeout(i, opts));
      }
      if (options && options.forever && !timeouts.length) {
        timeouts.push(this.createTimeout(i, opts));
      }
      timeouts.sort(function (a, b) {
        return a - b;
      });
      return timeouts;
    };
    exports.createTimeout = function (attempt, opts) {
      var random = opts.randomize ? Math.random() + 1 : 1;
      var timeout = Math.round(
        random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt)
      );
      timeout = Math.min(timeout, opts.maxTimeout);
      return timeout;
    };
    exports.wrap = function (obj, options, methods) {
      if (options instanceof Array) {
        methods = options;
        options = null;
      }
      if (!methods) {
        methods = [];
        for (var key in obj) {
          if (typeof obj[key] === "function") {
            methods.push(key);
          }
        }
      }
      for (var i = 0; i < methods.length; i++) {
        var method = methods[i];
        var original = obj[method];
        obj[method] = function retryWrapper(original2) {
          var op = exports.operation(options);
          var args = Array.prototype.slice.call(arguments, 1);
          var callback = args.pop();
          args.push(function (err) {
            if (op.retry(err)) {
              return;
            }
            if (err) {
              arguments[0] = op.mainError();
            }
            callback.apply(this, arguments);
          });
          op.attempt(function () {
            original2.apply(obj, args);
          });
        }.bind(obj, original);
        obj[method].options = options;
      }
    };
  },
});

// ../../../../../../../../node_modules/retry/index.js
var require_retry2 = __commonJS({
  "../../../../../../../../node_modules/retry/index.js"(exports, module2) {
    module2.exports = require_retry();
  },
});

// ../../../../../../../../node_modules/p-retry/index.js
var require_p_retry = __commonJS({
  "../../../../../../../../node_modules/p-retry/index.js"(exports, module2) {
    "use strict";
    var retry = require_retry2();
    var networkErrorMsgs = [
      "Failed to fetch",
      "NetworkError when attempting to fetch resource.",
      "The Internet connection appears to be offline.",
      "Network request failed",
    ];
    var AbortError = class extends Error {
      constructor(message) {
        super();
        if (message instanceof Error) {
          this.originalError = message;
          ({ message } = message);
        } else {
          this.originalError = new Error(message);
          this.originalError.stack = this.stack;
        }
        this.name = "AbortError";
        this.message = message;
      }
    };
    var decorateErrorWithCounts = (error, attemptNumber, options) => {
      const retriesLeft = options.retries - (attemptNumber - 1);
      error.attemptNumber = attemptNumber;
      error.retriesLeft = retriesLeft;
      return error;
    };
    var isNetworkError = (errorMessage) =>
      networkErrorMsgs.includes(errorMessage);
    var pRetry4 = (input, options) =>
      new Promise((resolve, reject) => {
        options = {
          onFailedAttempt: () => {},
          retries: 10,
          ...options,
        };
        const operation = retry.operation(options);
        operation.attempt(async (attemptNumber) => {
          try {
            resolve(await input(attemptNumber));
          } catch (error) {
            if (!(error instanceof Error)) {
              reject(
                new TypeError(
                  `Non-error was thrown: "${error}". You should only throw errors.`
                )
              );
              return;
            }
            if (error instanceof AbortError) {
              operation.stop();
              reject(error.originalError);
            } else if (
              error instanceof TypeError &&
              !isNetworkError(error.message)
            ) {
              operation.stop();
              reject(error);
            } else {
              decorateErrorWithCounts(error, attemptNumber, options);
              try {
                await options.onFailedAttempt(error);
              } catch (error2) {
                reject(error2);
                return;
              }
              if (!operation.retry(error)) {
                reject(operation.mainError());
              }
            }
          }
        });
      });
    module2.exports = pRetry4;
    module2.exports.default = pRetry4;
    module2.exports.AbortError = AbortError;
  },
});

// ../../../../../../../../node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "../../../../../../../../node_modules/eventemitter3/index.js"(
    exports,
    module2
  ) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {}
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__) prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        (emitter._events[evt] = listener), emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [],
        events,
        name;
      if (this._eventsCount === 0) return names;
      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return (
              listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true
            );
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length,
          j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter.prototype.removeListener = function removeListener(
      event,
      fn,
      context,
      once
    ) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (
          var i = 0, events = [], length = listeners.length;
          i < length;
          i++
        ) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(
      event
    ) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix;
    EventEmitter.EventEmitter = EventEmitter;
    if (typeof module2 !== "undefined") {
      module2.exports = EventEmitter;
    }
  },
});

// ../../../../../../../../node_modules/p-finally/index.js
var require_p_finally = __commonJS({
  "../../../../../../../../node_modules/p-finally/index.js"(exports, module2) {
    "use strict";
    module2.exports = (promise, onFinally) => {
      onFinally = onFinally || (() => {});
      return promise.then(
        (val) =>
          new Promise((resolve) => {
            resolve(onFinally());
          }).then(() => val),
        (err) =>
          new Promise((resolve) => {
            resolve(onFinally());
          }).then(() => {
            throw err;
          })
      );
    };
  },
});

// ../../../../../../../../node_modules/p-timeout/index.js
var require_p_timeout = __commonJS({
  "../../../../../../../../node_modules/p-timeout/index.js"(exports, module2) {
    "use strict";
    var pFinally = require_p_finally();
    var TimeoutError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "TimeoutError";
      }
    };
    var pTimeout = (promise, milliseconds, fallback) =>
      new Promise((resolve, reject) => {
        if (typeof milliseconds !== "number" || milliseconds < 0) {
          throw new TypeError(
            "Expected `milliseconds` to be a positive number"
          );
        }
        if (milliseconds === Infinity) {
          resolve(promise);
          return;
        }
        const timer = setTimeout(() => {
          if (typeof fallback === "function") {
            try {
              resolve(fallback());
            } catch (error) {
              reject(error);
            }
            return;
          }
          const message =
            typeof fallback === "string"
              ? fallback
              : `Promise timed out after ${milliseconds} milliseconds`;
          const timeoutError =
            fallback instanceof Error ? fallback : new TimeoutError(message);
          if (typeof promise.cancel === "function") {
            promise.cancel();
          }
          reject(timeoutError);
        }, milliseconds);
        pFinally(promise.then(resolve, reject), () => {
          clearTimeout(timer);
        });
      });
    module2.exports = pTimeout;
    module2.exports.default = pTimeout;
    module2.exports.TimeoutError = TimeoutError;
  },
});

// ../../../../../../../../node_modules/p-queue/dist/lower-bound.js
var require_lower_bound = __commonJS({
  "../../../../../../../../node_modules/p-queue/dist/lower-bound.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function lowerBound(array, value, comparator) {
      let first = 0;
      let count = array.length;
      while (count > 0) {
        const step = (count / 2) | 0;
        let it = first + step;
        if (comparator(array[it], value) <= 0) {
          first = ++it;
          count -= step + 1;
        } else {
          count = step;
        }
      }
      return first;
    }
    exports.default = lowerBound;
  },
});

// ../../../../../../../../node_modules/p-queue/dist/priority-queue.js
var require_priority_queue = __commonJS({
  "../../../../../../../../node_modules/p-queue/dist/priority-queue.js"(
    exports
  ) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var lower_bound_1 = require_lower_bound();
    var PriorityQueue = class {
      constructor() {
        this._queue = [];
      }
      enqueue(run, options) {
        options = Object.assign({ priority: 0 }, options);
        const element = {
          priority: options.priority,
          run,
        };
        if (
          this.size &&
          this._queue[this.size - 1].priority >= options.priority
        ) {
          this._queue.push(element);
          return;
        }
        const index = lower_bound_1.default(
          this._queue,
          element,
          (a, b) => b.priority - a.priority
        );
        this._queue.splice(index, 0, element);
      }
      dequeue() {
        const item = this._queue.shift();
        return item === null || item === void 0 ? void 0 : item.run;
      }
      filter(options) {
        return this._queue
          .filter((element) => element.priority === options.priority)
          .map((element) => element.run);
      }
      get size() {
        return this._queue.length;
      }
    };
    exports.default = PriorityQueue;
  },
});

// ../../../../../../../../node_modules/p-queue/dist/index.js
var require_dist = __commonJS({
  "../../../../../../../../node_modules/p-queue/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EventEmitter = require_eventemitter3();
    var p_timeout_1 = require_p_timeout();
    var priority_queue_1 = require_priority_queue();
    var empty = () => {};
    var timeoutError = new p_timeout_1.TimeoutError();
    var PQueue = class extends EventEmitter {
      constructor(options) {
        var _a4, _b, _c, _d;
        super();
        this._intervalCount = 0;
        this._intervalEnd = 0;
        this._pendingCount = 0;
        this._resolveEmpty = empty;
        this._resolveIdle = empty;
        options = Object.assign(
          {
            carryoverConcurrencyCount: false,
            intervalCap: Infinity,
            interval: 0,
            concurrency: Infinity,
            autoStart: true,
            queueClass: priority_queue_1.default,
          },
          options
        );
        if (
          !(typeof options.intervalCap === "number" && options.intervalCap >= 1)
        ) {
          throw new TypeError(
            `Expected \`intervalCap\` to be a number from 1 and up, got \`${
              (_b =
                (_a4 = options.intervalCap) === null || _a4 === void 0
                  ? void 0
                  : _a4.toString()) !== null && _b !== void 0
                ? _b
                : ""
            }\` (${typeof options.intervalCap})`
          );
        }
        if (
          options.interval === void 0 ||
          !(Number.isFinite(options.interval) && options.interval >= 0)
        ) {
          throw new TypeError(
            `Expected \`interval\` to be a finite number >= 0, got \`${
              (_d =
                (_c = options.interval) === null || _c === void 0
                  ? void 0
                  : _c.toString()) !== null && _d !== void 0
                ? _d
                : ""
            }\` (${typeof options.interval})`
          );
        }
        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
        this._isIntervalIgnored =
          options.intervalCap === Infinity || options.interval === 0;
        this._intervalCap = options.intervalCap;
        this._interval = options.interval;
        this._queue = new options.queueClass();
        this._queueClass = options.queueClass;
        this.concurrency = options.concurrency;
        this._timeout = options.timeout;
        this._throwOnTimeout = options.throwOnTimeout === true;
        this._isPaused = options.autoStart === false;
      }
      get _doesIntervalAllowAnother() {
        return (
          this._isIntervalIgnored || this._intervalCount < this._intervalCap
        );
      }
      get _doesConcurrentAllowAnother() {
        return this._pendingCount < this._concurrency;
      }
      _next() {
        this._pendingCount--;
        this._tryToStartAnother();
        this.emit("next");
      }
      _resolvePromises() {
        this._resolveEmpty();
        this._resolveEmpty = empty;
        if (this._pendingCount === 0) {
          this._resolveIdle();
          this._resolveIdle = empty;
          this.emit("idle");
        }
      }
      _onResumeInterval() {
        this._onInterval();
        this._initializeIntervalIfNeeded();
        this._timeoutId = void 0;
      }
      _isIntervalPaused() {
        const now = Date.now();
        if (this._intervalId === void 0) {
          const delay = this._intervalEnd - now;
          if (delay < 0) {
            this._intervalCount = this._carryoverConcurrencyCount
              ? this._pendingCount
              : 0;
          } else {
            if (this._timeoutId === void 0) {
              this._timeoutId = setTimeout(() => {
                this._onResumeInterval();
              }, delay);
            }
            return true;
          }
        }
        return false;
      }
      _tryToStartAnother() {
        if (this._queue.size === 0) {
          if (this._intervalId) {
            clearInterval(this._intervalId);
          }
          this._intervalId = void 0;
          this._resolvePromises();
          return false;
        }
        if (!this._isPaused) {
          const canInitializeInterval = !this._isIntervalPaused();
          if (
            this._doesIntervalAllowAnother &&
            this._doesConcurrentAllowAnother
          ) {
            const job = this._queue.dequeue();
            if (!job) {
              return false;
            }
            this.emit("active");
            job();
            if (canInitializeInterval) {
              this._initializeIntervalIfNeeded();
            }
            return true;
          }
        }
        return false;
      }
      _initializeIntervalIfNeeded() {
        if (this._isIntervalIgnored || this._intervalId !== void 0) {
          return;
        }
        this._intervalId = setInterval(() => {
          this._onInterval();
        }, this._interval);
        this._intervalEnd = Date.now() + this._interval;
      }
      _onInterval() {
        if (
          this._intervalCount === 0 &&
          this._pendingCount === 0 &&
          this._intervalId
        ) {
          clearInterval(this._intervalId);
          this._intervalId = void 0;
        }
        this._intervalCount = this._carryoverConcurrencyCount
          ? this._pendingCount
          : 0;
        this._processQueue();
      }
      _processQueue() {
        while (this._tryToStartAnother()) {}
      }
      get concurrency() {
        return this._concurrency;
      }
      set concurrency(newConcurrency) {
        if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
          throw new TypeError(
            `Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`
          );
        }
        this._concurrency = newConcurrency;
        this._processQueue();
      }
      async add(fn, options = {}) {
        return new Promise((resolve, reject) => {
          const run = async () => {
            this._pendingCount++;
            this._intervalCount++;
            try {
              const operation =
                this._timeout === void 0 && options.timeout === void 0
                  ? fn()
                  : p_timeout_1.default(
                      Promise.resolve(fn()),
                      options.timeout === void 0
                        ? this._timeout
                        : options.timeout,
                      () => {
                        if (
                          options.throwOnTimeout === void 0
                            ? this._throwOnTimeout
                            : options.throwOnTimeout
                        ) {
                          reject(timeoutError);
                        }
                        return void 0;
                      }
                    );
              resolve(await operation);
            } catch (error) {
              reject(error);
            }
            this._next();
          };
          this._queue.enqueue(run, options);
          this._tryToStartAnother();
          this.emit("add");
        });
      }
      async addAll(functions, options) {
        return Promise.all(
          functions.map(async (function_) => this.add(function_, options))
        );
      }
      start() {
        if (!this._isPaused) {
          return this;
        }
        this._isPaused = false;
        this._processQueue();
        return this;
      }
      pause() {
        this._isPaused = true;
      }
      clear() {
        this._queue = new this._queueClass();
      }
      async onEmpty() {
        if (this._queue.size === 0) {
          return;
        }
        return new Promise((resolve) => {
          const existingResolve = this._resolveEmpty;
          this._resolveEmpty = () => {
            existingResolve();
            resolve();
          };
        });
      }
      async onIdle() {
        if (this._pendingCount === 0 && this._queue.size === 0) {
          return;
        }
        return new Promise((resolve) => {
          const existingResolve = this._resolveIdle;
          this._resolveIdle = () => {
            existingResolve();
            resolve();
          };
        });
      }
      get size() {
        return this._queue.size;
      }
      sizeBy(options) {
        return this._queue.filter(options).length;
      }
      get pending() {
        return this._pendingCount;
      }
      get isPaused() {
        return this._isPaused;
      }
      get timeout() {
        return this._timeout;
      }
      set timeout(milliseconds) {
        this._timeout = milliseconds;
      }
    };
    exports.default = PQueue;
  },
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VCCopilotPlugin,
  gpt_3_latest: () => gpt_3_latest,
  gpt_4_latest: () => gpt_4_latest2,
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/czekanowski.js
function czekanowskiSimilarity(a, b) {
  let up = 0;
  let down = 0;
  for (let i = 0; i < a.length; i++) {
    up += Math.min(a[i], b[i]);
    down += a[i] + b[i];
  }
  return (2 * up) / down;
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/distances/dice.js
function dice(a, b) {
  let a2 = 0;
  let b2 = 0;
  let prod2 = 0;
  for (let i = 0; i < a.length; i++) {
    a2 += a[i] * a[i];
    b2 += b[i] * b[i];
    prod2 += (a[i] - b[i]) * (a[i] - b[i]);
  }
  return prod2 / (a2 + b2);
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/distances/intersection.js
function intersection(a, b) {
  let ans = 0;
  for (let i = 0; i < a.length; i++) {
    ans += Math.min(a[i], b[i]);
  }
  return 1 - ans;
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/kumarHassebrook.js
function kumarHassebrook(a, b) {
  let p = 0;
  let p2 = 0;
  let q2 = 0;
  for (let i = 0; i < a.length; i++) {
    p += a[i] * b[i];
    p2 += a[i] * a[i];
    q2 += b[i] * b[i];
  }
  return p / (p2 + q2 - p);
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/distances/kulczynski.js
function kulczynski(a, b) {
  let up = 0;
  let down = 0;
  for (let i = 0; i < a.length; i++) {
    up += Math.abs(a[i] - b[i]);
    down += Math.min(a[i], b[i]);
  }
  return up / down;
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/distances/motyka.js
function motyka(a, b) {
  let up = 0;
  let down = 0;
  for (let i = 0; i < a.length; i++) {
    up += Math.min(a[i], b[i]);
    down += a[i] + b[i];
  }
  return 1 - up / down;
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/distances/squaredChord.js
function squaredChord(a, b) {
  let ans = 0;
  for (let i = 0; i < a.length; i++) {
    ans += (Math.sqrt(a[i]) - Math.sqrt(b[i])) ** 2;
  }
  return ans;
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/tanimoto.js
function tanimoto(a, b, bitvector) {
  if (bitvector) {
    let inter = 0;
    let union = 0;
    for (let j = 0; j < a.length; j++) {
      inter += a[j] && b[j];
      union += a[j] || b[j];
    }
    if (union === 0) {
      return 1;
    }
    return inter / union;
  } else {
    let p = 0;
    let q = 0;
    let m = 0;
    for (let i = 0; i < a.length; i++) {
      p += a[i];
      q += b[i];
      m += Math.min(a[i], b[i]);
    }
    return 1 - (p + q - 2 * m) / (p + q - m);
  }
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities.js
var similarities_exports = {};
__export(similarities_exports, {
  cosine: () => cosine,
  czekanowski: () => czekanowskiSimilarity,
  dice: () => dice2,
  intersection: () => intersection2,
  kulczynski: () => kulczynski2,
  kumarHassebrook: () => kumarHassebrook,
  motyka: () => motyka2,
  pearson: () => pearson2,
  squaredChord: () => squaredChord2,
  tanimoto: () => tanimoto,
  tree: () => src_exports,
});

// ../../../../../../../../node_modules/ml-tree-similarity/src/index.js
var src_exports = {};
__export(src_exports, {
  createTree: () => createTree,
  getFunction: () => getFunction,
  treeSimilarity: () => treeSimilarity,
});

// ../../../../../../../../node_modules/ml-tree-similarity/src/createTree.js
var import_binary_search = __toESM(require_binary_search());
var import_num_sort = __toESM(require_num_sort());
function createTree(spectrum, options = {}) {
  var X = spectrum[0];
  const {
    minWindow = 0.16,
    threshold = 0.01,
    from = X[0],
    to = X[X.length - 1],
  } = options;
  return mainCreateTree(
    spectrum[0],
    spectrum[1],
    from,
    to,
    minWindow,
    threshold
  );
}
function mainCreateTree(X, Y, from, to, minWindow, threshold) {
  if (to - from < minWindow) {
    return null;
  }
  var start = (0, import_binary_search.default)(
    X,
    from,
    import_num_sort.ascending
  );
  if (start < 0) {
    start = ~start;
  }
  var sum2 = 0;
  var center = 0;
  for (var i = start; i < X.length; i++) {
    if (X[i] >= to) {
      break;
    }
    sum2 += Y[i];
    center += X[i] * Y[i];
  }
  if (sum2 < threshold) {
    return null;
  }
  center /= sum2;
  if (center - from < 1e-6 || to - center < 1e-6) {
    return null;
  }
  if (center - from < minWindow / 4) {
    return mainCreateTree(X, Y, center, to, minWindow, threshold);
  } else {
    if (to - center < minWindow / 4) {
      return mainCreateTree(X, Y, from, center, minWindow, threshold);
    } else {
      return new Tree(
        sum2,
        center,
        mainCreateTree(X, Y, from, center, minWindow, threshold),
        mainCreateTree(X, Y, center, to, minWindow, threshold)
      );
    }
  }
}
var Tree = class {
  constructor(sum2, center, left, right) {
    this.sum = sum2;
    this.center = center;
    this.left = left;
    this.right = right;
  }
};

// ../../../../../../../../node_modules/ml-tree-similarity/src/getSimilarity.js
function getSimilarity(a, b, options = {}) {
  const { alpha = 0.1, beta = 0.33, gamma = 1e-3 } = options;
  if (a === null || b === null) {
    return 0;
  }
  if (Array.isArray(a)) {
    a = createTree(a);
  }
  if (Array.isArray(b)) {
    b = createTree(b);
  }
  var C =
    (alpha * Math.min(a.sum, b.sum)) / Math.max(a.sum, b.sum) +
    (1 - alpha) * Math.exp(-gamma * Math.abs(a.center - b.center));
  return (
    beta * C +
    ((1 - beta) *
      (getSimilarity(a.left, b.left, options) +
        getSimilarity(a.right, b.right, options))) /
      2
  );
}

// ../../../../../../../../node_modules/ml-tree-similarity/src/index.js
function treeSimilarity(A, B, options = {}) {
  return getSimilarity(A, B, options);
}
function getFunction(options = {}) {
  return (A, B) => getSimilarity(A, B, options);
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/cosine.js
function cosine(a, b) {
  let p = 0;
  let p2 = 0;
  let q2 = 0;
  for (let i = 0; i < a.length; i++) {
    p += a[i] * b[i];
    p2 += a[i] * a[i];
    q2 += b[i] * b[i];
  }
  return p / (Math.sqrt(p2) * Math.sqrt(q2));
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/dice.js
function dice2(a, b) {
  return 1 - dice(a, b);
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/intersection.js
function intersection2(a, b) {
  return 1 - intersection(a, b);
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/kulczynski.js
function kulczynski2(a, b) {
  return 1 / kulczynski(a, b);
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/motyka.js
function motyka2(a, b) {
  return 1 - motyka(a, b);
}

// ../../../../../../../../node_modules/is-any-array/lib-esm/index.js
var toString = Object.prototype.toString;
function isAnyArray(value) {
  const tag = toString.call(value);
  return tag.endsWith("Array]") && !tag.includes("Big");
}

// ../../../../../../../../node_modules/ml-array-sum/lib-es6/index.js
function sum(input) {
  if (!isAnyArray(input)) {
    throw new TypeError("input must be an array");
  }
  if (input.length === 0) {
    throw new TypeError("input must not be empty");
  }
  var sumValue = 0;
  for (var i = 0; i < input.length; i++) {
    sumValue += input[i];
  }
  return sumValue;
}

// ../../../../../../../../node_modules/ml-array-mean/lib-es6/index.js
function mean(input) {
  return sum(input) / input.length;
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/pearson.js
function pearson2(a, b) {
  let avgA = mean(a);
  let avgB = mean(b);
  let newA = new Array(a.length);
  let newB = new Array(b.length);
  for (let i = 0; i < newA.length; i++) {
    newA[i] = a[i] - avgA;
    newB[i] = b[i] - avgB;
  }
  return cosine(newA, newB);
}

// ../../../../../../../../node_modules/ml-distance/lib-esm/similarities/squaredChord.js
function squaredChord2(a, b) {
  return 1 - squaredChord(a, b);
}

// ../../../../../../../../node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues =
      typeof crypto !== "undefined" &&
      crypto.getRandomValues &&
      crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error(
        "crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported"
      );
    }
  }
  return getRandomValues(rnds8);
}

// ../../../../../../../../node_modules/uuid/dist/esm-browser/regex.js
var regex_default =
  /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// ../../../../../../../../node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// ../../../../../../../../node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (
    byteToHex[arr[offset + 0]] +
    byteToHex[arr[offset + 1]] +
    byteToHex[arr[offset + 2]] +
    byteToHex[arr[offset + 3]] +
    "-" +
    byteToHex[arr[offset + 4]] +
    byteToHex[arr[offset + 5]] +
    "-" +
    byteToHex[arr[offset + 6]] +
    byteToHex[arr[offset + 7]] +
    "-" +
    byteToHex[arr[offset + 8]] +
    byteToHex[arr[offset + 9]] +
    "-" +
    byteToHex[arr[offset + 10]] +
    byteToHex[arr[offset + 11]] +
    byteToHex[arr[offset + 12]] +
    byteToHex[arr[offset + 13]] +
    byteToHex[arr[offset + 14]] +
    byteToHex[arr[offset + 15]]
  );
}

// ../../../../../../../../node_modules/uuid/dist/esm-browser/native.js
var randomUUID =
  typeof crypto !== "undefined" &&
  crypto.randomUUID &&
  crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID,
};

// ../../../../../../../../node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = (rnds[6] & 15) | 64;
  rnds[8] = (rnds[8] & 63) | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// ../../../../../../../../node_modules/langchain/dist/load/map_keys.js
var import_decamelize = __toESM(require_decamelize(), 1);
var import_camelcase = __toESM(require_camelcase(), 1);
function keyToJson(key, map) {
  return (
    (map == null ? void 0 : map[key]) || (0, import_decamelize.default)(key)
  );
}
function mapKeys(fields, mapper, map) {
  const mapped = {};
  for (const key in fields) {
    if (Object.hasOwn(fields, key)) {
      mapped[mapper(key, map)] = fields[key];
    }
  }
  return mapped;
}

// ../../../../../../../../node_modules/langchain/dist/load/serializable.js
function shallowCopy(obj) {
  return Array.isArray(obj) ? [...obj] : { ...obj };
}
function replaceSecrets(root, secretsMap) {
  const result = shallowCopy(root);
  for (const [path, secretId] of Object.entries(secretsMap)) {
    const [last, ...partsReverse] = path.split(".").reverse();
    let current = result;
    for (const part of partsReverse.reverse()) {
      if (current[part] === void 0) {
        break;
      }
      current[part] = shallowCopy(current[part]);
      current = current[part];
    }
    if (current[last] !== void 0) {
      current[last] = {
        lc: 1,
        type: "secret",
        id: [secretId],
      };
    }
  }
  return result;
}
function get_lc_unique_name(serializableClass) {
  const parentClass = Object.getPrototypeOf(serializableClass);
  const lcNameIsSubclassed =
    typeof serializableClass.lc_name === "function" &&
    (typeof parentClass.lc_name !== "function" ||
      serializableClass.lc_name() !== parentClass.lc_name());
  if (lcNameIsSubclassed) {
    return serializableClass.lc_name();
  } else {
    return serializableClass.name;
  }
}
var Serializable = class {
  static lc_name() {
    return this.name;
  }
  get lc_id() {
    return [...this.lc_namespace, get_lc_unique_name(this.constructor)];
  }
  get lc_secrets() {
    return void 0;
  }
  get lc_attributes() {
    return void 0;
  }
  get lc_aliases() {
    return void 0;
  }
  constructor(kwargs, ..._args) {
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false,
    });
    Object.defineProperty(this, "lc_kwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.lc_kwargs = kwargs || {};
  }
  toJSON() {
    if (!this.lc_serializable) {
      return this.toJSONNotImplemented();
    }
    if (
      this.lc_kwargs instanceof Serializable ||
      typeof this.lc_kwargs !== "object" ||
      Array.isArray(this.lc_kwargs)
    ) {
      return this.toJSONNotImplemented();
    }
    const aliases = {};
    const secrets = {};
    const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key) => {
      acc[key] = key in this ? this[key] : this.lc_kwargs[key];
      return acc;
    }, {});
    for (
      let current = Object.getPrototypeOf(this);
      current;
      current = Object.getPrototypeOf(current)
    ) {
      Object.assign(aliases, Reflect.get(current, "lc_aliases", this));
      Object.assign(secrets, Reflect.get(current, "lc_secrets", this));
      Object.assign(kwargs, Reflect.get(current, "lc_attributes", this));
    }
    Object.keys(secrets).forEach((keyPath) => {
      let read = this;
      let write = kwargs;
      const [last, ...partsReverse] = keyPath.split(".").reverse();
      for (const key of partsReverse.reverse()) {
        if (!(key in read) || read[key] === void 0) return;
        if (!(key in write) || write[key] === void 0) {
          if (typeof read[key] === "object" && read[key] != null) {
            write[key] = {};
          } else if (Array.isArray(read[key])) {
            write[key] = [];
          }
        }
        read = read[key];
        write = write[key];
      }
      if (last in read && read[last] !== void 0) {
        write[last] = write[last] || read[last];
      }
    });
    return {
      lc: 1,
      type: "constructor",
      id: this.lc_id,
      kwargs: mapKeys(
        Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs,
        keyToJson,
        aliases
      ),
    };
  }
  toJSONNotImplemented() {
    return {
      lc: 1,
      type: "not_implemented",
      id: this.lc_id,
    };
  }
};

// ../../../../../../../../node_modules/langchain/dist/callbacks/base.js
var BaseCallbackHandlerMethodsClass = class {};
var BaseCallbackHandler = class extends BaseCallbackHandlerMethodsClass {
  get lc_namespace() {
    return ["langchain", "callbacks", this.name];
  }
  get lc_secrets() {
    return void 0;
  }
  get lc_attributes() {
    return void 0;
  }
  get lc_aliases() {
    return void 0;
  }
  static lc_name() {
    return this.name;
  }
  get lc_id() {
    return [...this.lc_namespace, get_lc_unique_name(this.constructor)];
  }
  constructor(input) {
    var _a4, _b, _c, _d, _e;
    super();
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false,
    });
    Object.defineProperty(this, "lc_kwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "ignoreLLM", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false,
    });
    Object.defineProperty(this, "ignoreChain", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false,
    });
    Object.defineProperty(this, "ignoreAgent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false,
    });
    Object.defineProperty(this, "ignoreRetriever", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false,
    });
    Object.defineProperty(this, "awaitHandlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value:
        typeof process !== "undefined"
          ? ((_a4 = process.env) == null
              ? void 0
              : _a4.LANGCHAIN_CALLBACKS_BACKGROUND) !== "true"
          : true,
    });
    this.lc_kwargs = input || {};
    if (input) {
      this.ignoreLLM = (_b = input.ignoreLLM) != null ? _b : this.ignoreLLM;
      this.ignoreChain =
        (_c = input.ignoreChain) != null ? _c : this.ignoreChain;
      this.ignoreAgent =
        (_d = input.ignoreAgent) != null ? _d : this.ignoreAgent;
      this.ignoreRetriever =
        (_e = input.ignoreRetriever) != null ? _e : this.ignoreRetriever;
    }
  }
  copy() {
    return new this.constructor(this);
  }
  toJSON() {
    return Serializable.prototype.toJSON.call(this);
  }
  toJSONNotImplemented() {
    return Serializable.prototype.toJSONNotImplemented.call(this);
  }
  static fromMethods(methods) {
    class Handler extends BaseCallbackHandler {
      constructor() {
        super();
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: v4_default(),
        });
        Object.assign(this, methods);
      }
    }
    return new Handler();
  }
};

// ../../../../../../../../node_modules/langchain/dist/callbacks/handlers/console.js
var import_ansi_styles = __toESM(require_ansi_styles(), 1);

// ../../../../../../../../node_modules/langchain/dist/callbacks/handlers/tracer.js
function _coerceToDict(value, defaultKey) {
  return value && !Array.isArray(value) && typeof value === "object"
    ? value
    : { [defaultKey]: value };
}
var BaseTracer = class extends BaseCallbackHandler {
  constructor(_fields) {
    super(...arguments);
    Object.defineProperty(this, "runMap", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /* @__PURE__ */ new Map(),
    });
  }
  copy() {
    return this;
  }
  _addChildRun(parentRun, childRun) {
    parentRun.child_runs.push(childRun);
  }
  async _startTrace(run) {
    var _a4;
    if (run.parent_run_id !== void 0) {
      const parentRun = this.runMap.get(run.parent_run_id);
      if (parentRun) {
        this._addChildRun(parentRun, run);
        parentRun.child_execution_order = Math.max(
          parentRun.child_execution_order,
          run.child_execution_order
        );
      }
    }
    this.runMap.set(run.id, run);
    await ((_a4 = this.onRunCreate) == null ? void 0 : _a4.call(this, run));
  }
  async _endTrace(run) {
    var _a4;
    const parentRun =
      run.parent_run_id !== void 0 && this.runMap.get(run.parent_run_id);
    if (parentRun) {
      parentRun.child_execution_order = Math.max(
        parentRun.child_execution_order,
        run.child_execution_order
      );
    } else {
      await this.persistRun(run);
    }
    this.runMap.delete(run.id);
    await ((_a4 = this.onRunUpdate) == null ? void 0 : _a4.call(this, run));
  }
  _getExecutionOrder(parentRunId) {
    const parentRun = parentRunId !== void 0 && this.runMap.get(parentRunId);
    if (!parentRun) {
      return 1;
    }
    return parentRun.child_execution_order + 1;
  }
  async handleLLMStart(
    llm,
    prompts,
    runId,
    parentRunId,
    extraParams,
    tags,
    metadata,
    name
  ) {
    var _a4;
    const execution_order = this._getExecutionOrder(parentRunId);
    const start_time = Date.now();
    const finalExtraParams = metadata
      ? { ...extraParams, metadata }
      : extraParams;
    const run = {
      id: runId,
      name: name != null ? name : llm.id[llm.id.length - 1],
      parent_run_id: parentRunId,
      start_time,
      serialized: llm,
      events: [
        {
          name: "start",
          time: new Date(start_time).toISOString(),
        },
      ],
      inputs: { prompts },
      execution_order,
      child_runs: [],
      child_execution_order: execution_order,
      run_type: "llm",
      extra: finalExtraParams != null ? finalExtraParams : {},
      tags: tags || [],
    };
    await this._startTrace(run);
    await ((_a4 = this.onLLMStart) == null ? void 0 : _a4.call(this, run));
    return run;
  }
  async handleChatModelStart(
    llm,
    messages,
    runId,
    parentRunId,
    extraParams,
    tags,
    metadata,
    name
  ) {
    var _a4;
    const execution_order = this._getExecutionOrder(parentRunId);
    const start_time = Date.now();
    const finalExtraParams = metadata
      ? { ...extraParams, metadata }
      : extraParams;
    const run = {
      id: runId,
      name: name != null ? name : llm.id[llm.id.length - 1],
      parent_run_id: parentRunId,
      start_time,
      serialized: llm,
      events: [
        {
          name: "start",
          time: new Date(start_time).toISOString(),
        },
      ],
      inputs: { messages },
      execution_order,
      child_runs: [],
      child_execution_order: execution_order,
      run_type: "llm",
      extra: finalExtraParams != null ? finalExtraParams : {},
      tags: tags || [],
    };
    await this._startTrace(run);
    await ((_a4 = this.onLLMStart) == null ? void 0 : _a4.call(this, run));
    return run;
  }
  async handleLLMEnd(output, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "llm") {
      throw new Error("No LLM run to end.");
    }
    run.end_time = Date.now();
    run.outputs = output;
    run.events.push({
      name: "end",
      time: new Date(run.end_time).toISOString(),
    });
    await ((_a4 = this.onLLMEnd) == null ? void 0 : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleLLMError(error, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "llm") {
      throw new Error("No LLM run to end.");
    }
    run.end_time = Date.now();
    run.error = error.message;
    run.events.push({
      name: "error",
      time: new Date(run.end_time).toISOString(),
    });
    await ((_a4 = this.onLLMError) == null ? void 0 : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleChainStart(
    chain,
    inputs,
    runId,
    parentRunId,
    tags,
    metadata,
    runType,
    name
  ) {
    var _a4;
    const execution_order = this._getExecutionOrder(parentRunId);
    const start_time = Date.now();
    const run = {
      id: runId,
      name: name != null ? name : chain.id[chain.id.length - 1],
      parent_run_id: parentRunId,
      start_time,
      serialized: chain,
      events: [
        {
          name: "start",
          time: new Date(start_time).toISOString(),
        },
      ],
      inputs,
      execution_order,
      child_execution_order: execution_order,
      run_type: runType != null ? runType : "chain",
      child_runs: [],
      extra: metadata ? { metadata } : {},
      tags: tags || [],
    };
    await this._startTrace(run);
    await ((_a4 = this.onChainStart) == null ? void 0 : _a4.call(this, run));
    return run;
  }
  async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run) {
      throw new Error("No chain run to end.");
    }
    run.end_time = Date.now();
    run.outputs = _coerceToDict(outputs, "output");
    run.events.push({
      name: "end",
      time: new Date(run.end_time).toISOString(),
    });
    if ((kwargs == null ? void 0 : kwargs.inputs) !== void 0) {
      run.inputs = _coerceToDict(kwargs.inputs, "input");
    }
    await ((_a4 = this.onChainEnd) == null ? void 0 : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleChainError(error, runId, _parentRunId, _tags, kwargs) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run) {
      throw new Error("No chain run to end.");
    }
    run.end_time = Date.now();
    run.error = error.message;
    run.events.push({
      name: "error",
      time: new Date(run.end_time).toISOString(),
    });
    if ((kwargs == null ? void 0 : kwargs.inputs) !== void 0) {
      run.inputs = _coerceToDict(kwargs.inputs, "input");
    }
    await ((_a4 = this.onChainError) == null ? void 0 : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {
    var _a4;
    const execution_order = this._getExecutionOrder(parentRunId);
    const start_time = Date.now();
    const run = {
      id: runId,
      name: name != null ? name : tool.id[tool.id.length - 1],
      parent_run_id: parentRunId,
      start_time,
      serialized: tool,
      events: [
        {
          name: "start",
          time: new Date(start_time).toISOString(),
        },
      ],
      inputs: { input },
      execution_order,
      child_execution_order: execution_order,
      run_type: "tool",
      child_runs: [],
      extra: metadata ? { metadata } : {},
      tags: tags || [],
    };
    await this._startTrace(run);
    await ((_a4 = this.onToolStart) == null ? void 0 : _a4.call(this, run));
    return run;
  }
  async handleToolEnd(output, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "tool") {
      throw new Error("No tool run to end");
    }
    run.end_time = Date.now();
    run.outputs = { output };
    run.events.push({
      name: "end",
      time: new Date(run.end_time).toISOString(),
    });
    await ((_a4 = this.onToolEnd) == null ? void 0 : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleToolError(error, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "tool") {
      throw new Error("No tool run to end");
    }
    run.end_time = Date.now();
    run.error = error.message;
    run.events.push({
      name: "error",
      time: new Date(run.end_time).toISOString(),
    });
    await ((_a4 = this.onToolError) == null ? void 0 : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleAgentAction(action, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "chain") {
      return;
    }
    const agentRun = run;
    agentRun.actions = agentRun.actions || [];
    agentRun.actions.push(action);
    agentRun.events.push({
      name: "agent_action",
      time: new Date().toISOString(),
      kwargs: { action },
    });
    await ((_a4 = this.onAgentAction) == null ? void 0 : _a4.call(this, run));
  }
  async handleAgentEnd(action, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "chain") {
      return;
    }
    run.events.push({
      name: "agent_end",
      time: new Date().toISOString(),
      kwargs: { action },
    });
    await ((_a4 = this.onAgentEnd) == null ? void 0 : _a4.call(this, run));
  }
  async handleRetrieverStart(
    retriever,
    query,
    runId,
    parentRunId,
    tags,
    metadata,
    name
  ) {
    var _a4;
    const execution_order = this._getExecutionOrder(parentRunId);
    const start_time = Date.now();
    const run = {
      id: runId,
      name: name != null ? name : retriever.id[retriever.id.length - 1],
      parent_run_id: parentRunId,
      start_time,
      serialized: retriever,
      events: [
        {
          name: "start",
          time: new Date(start_time).toISOString(),
        },
      ],
      inputs: { query },
      execution_order,
      child_execution_order: execution_order,
      run_type: "retriever",
      child_runs: [],
      extra: metadata ? { metadata } : {},
      tags: tags || [],
    };
    await this._startTrace(run);
    await ((_a4 = this.onRetrieverStart) == null
      ? void 0
      : _a4.call(this, run));
    return run;
  }
  async handleRetrieverEnd(documents, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "retriever") {
      throw new Error("No retriever run to end");
    }
    run.end_time = Date.now();
    run.outputs = { documents };
    run.events.push({
      name: "end",
      time: new Date(run.end_time).toISOString(),
    });
    await ((_a4 = this.onRetrieverEnd) == null ? void 0 : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleRetrieverError(error, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "retriever") {
      throw new Error("No retriever run to end");
    }
    run.end_time = Date.now();
    run.error = error.message;
    run.events.push({
      name: "error",
      time: new Date(run.end_time).toISOString(),
    });
    await ((_a4 = this.onRetrieverError) == null
      ? void 0
      : _a4.call(this, run));
    await this._endTrace(run);
    return run;
  }
  async handleText(text, runId) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "chain") {
      return;
    }
    run.events.push({
      name: "text",
      time: new Date().toISOString(),
      kwargs: { text },
    });
    await ((_a4 = this.onText) == null ? void 0 : _a4.call(this, run));
  }
  async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {
    var _a4;
    const run = this.runMap.get(runId);
    if (!run || (run == null ? void 0 : run.run_type) !== "llm") {
      throw new Error(
        `Invalid "runId" provided to "handleLLMNewToken" callback.`
      );
    }
    run.events.push({
      name: "new_token",
      time: new Date().toISOString(),
      kwargs: { token, idx, chunk: fields == null ? void 0 : fields.chunk },
    });
    await ((_a4 = this.onLLMNewToken) == null
      ? void 0
      : _a4.call(this, run, token));
    return run;
  }
};

// ../../../../../../../../node_modules/langchain/dist/callbacks/handlers/console.js
function wrap(style, text) {
  return `${style.open}${text}${style.close}`;
}
function tryJsonStringify(obj, fallback) {
  try {
    return JSON.stringify(obj, null, 2);
  } catch (err) {
    return fallback;
  }
}
function elapsed(run) {
  if (!run.end_time) return "";
  const elapsed2 = run.end_time - run.start_time;
  if (elapsed2 < 1e3) {
    return `${elapsed2}ms`;
  }
  return `${(elapsed2 / 1e3).toFixed(2)}s`;
}
var { color } = import_ansi_styles.default;
var ConsoleCallbackHandler = class extends BaseTracer {
  constructor() {
    super(...arguments);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "console_callback_handler",
    });
  }
  persistRun(_run) {
    return Promise.resolve();
  }
  getParents(run) {
    const parents = [];
    let currentRun = run;
    while (currentRun.parent_run_id) {
      const parent = this.runMap.get(currentRun.parent_run_id);
      if (parent) {
        parents.push(parent);
        currentRun = parent;
      } else {
        break;
      }
    }
    return parents;
  }
  getBreadcrumbs(run) {
    const parents = this.getParents(run).reverse();
    const string = [...parents, run]
      .map((parent, i, arr) => {
        const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;
        return i === arr.length - 1
          ? wrap(import_ansi_styles.default.bold, name)
          : name;
      })
      .join(" > ");
    return wrap(color.grey, string);
  }
  onChainStart(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(
        color.green,
        "[chain/start]"
      )} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(
        run.inputs,
        "[inputs]"
      )}`
    );
  }
  onChainEnd(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.cyan, "[chain/end]")} [${crumbs}] [${elapsed(
        run
      )}] Exiting Chain run with output: ${tryJsonStringify(
        run.outputs,
        "[outputs]"
      )}`
    );
  }
  onChainError(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.red, "[chain/error]")} [${crumbs}] [${elapsed(
        run
      )}] Chain run errored with error: ${tryJsonStringify(
        run.error,
        "[error]"
      )}`
    );
  }
  onLLMStart(run) {
    const crumbs = this.getBreadcrumbs(run);
    const inputs =
      "prompts" in run.inputs
        ? { prompts: run.inputs.prompts.map((p) => p.trim()) }
        : run.inputs;
    console.log(
      `${wrap(
        color.green,
        "[llm/start]"
      )} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(
        inputs,
        "[inputs]"
      )}`
    );
  }
  onLLMEnd(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.cyan, "[llm/end]")} [${crumbs}] [${elapsed(
        run
      )}] Exiting LLM run with output: ${tryJsonStringify(
        run.outputs,
        "[response]"
      )}`
    );
  }
  onLLMError(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.red, "[llm/error]")} [${crumbs}] [${elapsed(
        run
      )}] LLM run errored with error: ${tryJsonStringify(run.error, "[error]")}`
    );
  }
  onToolStart(run) {
    var _a4;
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(
        color.green,
        "[tool/start]"
      )} [${crumbs}] Entering Tool run with input: "${
        (_a4 = run.inputs.input) == null ? void 0 : _a4.trim()
      }"`
    );
  }
  onToolEnd(run) {
    var _a4, _b;
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.cyan, "[tool/end]")} [${crumbs}] [${elapsed(
        run
      )}] Exiting Tool run with output: "${
        (_b = (_a4 = run.outputs) == null ? void 0 : _a4.output) == null
          ? void 0
          : _b.trim()
      }"`
    );
  }
  onToolError(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.red, "[tool/error]")} [${crumbs}] [${elapsed(
        run
      )}] Tool run errored with error: ${tryJsonStringify(
        run.error,
        "[error]"
      )}`
    );
  }
  onRetrieverStart(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(
        color.green,
        "[retriever/start]"
      )} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(
        run.inputs,
        "[inputs]"
      )}`
    );
  }
  onRetrieverEnd(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.cyan, "[retriever/end]")} [${crumbs}] [${elapsed(
        run
      )}] Exiting Retriever run with output: ${tryJsonStringify(
        run.outputs,
        "[outputs]"
      )}`
    );
  }
  onRetrieverError(run) {
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(color.red, "[retriever/error]")} [${crumbs}] [${elapsed(
        run
      )}] Retriever run errored with error: ${tryJsonStringify(
        run.error,
        "[error]"
      )}`
    );
  }
  onAgentAction(run) {
    const agentRun = run;
    const crumbs = this.getBreadcrumbs(run);
    console.log(
      `${wrap(
        color.blue,
        "[agent/action]"
      )} [${crumbs}] Agent selected action: ${tryJsonStringify(
        agentRun.actions[agentRun.actions.length - 1],
        "[action]"
      )}`
    );
  }
};

// ../../../../../../../../node_modules/langsmith/dist/utils/async_caller.js
var import_p_retry = __toESM(require_p_retry(), 1);
var import_p_queue = __toESM(require_dist(), 1);
var STATUS_NO_RETRY = [400, 401, 403, 404, 405, 406, 407, 408, 409];
var AsyncCaller = class {
  constructor(params) {
    var _a4, _b;
    Object.defineProperty(this, "maxConcurrency", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "maxRetries", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "queue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.maxConcurrency =
      (_a4 = params.maxConcurrency) != null ? _a4 : Infinity;
    this.maxRetries = (_b = params.maxRetries) != null ? _b : 6;
    const PQueue =
      "default" in import_p_queue.default
        ? import_p_queue.default.default
        : import_p_queue.default;
    this.queue = new PQueue({ concurrency: this.maxConcurrency });
  }
  call(callable, ...args) {
    return this.queue.add(
      () =>
        (0, import_p_retry.default)(
          () =>
            callable(...args).catch((error) => {
              if (error instanceof Error) {
                throw error;
              } else {
                throw new Error(error);
              }
            }),
          {
            onFailedAttempt(error) {
              var _a4;
              if (
                error.message.startsWith("Cancel") ||
                error.message.startsWith("TimeoutError") ||
                error.message.startsWith("AbortError")
              ) {
                throw error;
              }
              if ((error == null ? void 0 : error.code) === "ECONNABORTED") {
                throw error;
              }
              const status =
                (_a4 = error == null ? void 0 : error.response) == null
                  ? void 0
                  : _a4.status;
              if (status && STATUS_NO_RETRY.includes(+status)) {
                throw error;
              }
            },
            retries: this.maxRetries,
            randomize: true,
          }
        ),
      { throwOnTimeout: true }
    );
  }
  callWithOptions(options, callable, ...args) {
    if (options.signal) {
      return Promise.race([
        this.call(callable, ...args),
        new Promise((_, reject) => {
          var _a4;
          (_a4 = options.signal) == null
            ? void 0
            : _a4.addEventListener("abort", () => {
                reject(new Error("AbortError"));
              });
        }),
      ]);
    }
    return this.call(callable, ...args);
  }
  fetch(...args) {
    return this.call(() =>
      fetch(...args).then((res) => (res.ok ? res : Promise.reject(res)))
    );
  }
};

// ../../../../../../../../node_modules/langsmith/dist/utils/messages.js
function isLangChainMessage(message) {
  return typeof (message == null ? void 0 : message._getType) === "function";
}
function convertLangChainMessageToExample(message) {
  const converted = {
    type: message._getType(),
    data: { content: message.content },
  };
  if (
    (message == null ? void 0 : message.additional_kwargs) &&
    Object.keys(message.additional_kwargs).length > 0
  ) {
    converted.data.additional_kwargs = { ...message.additional_kwargs };
  }
  return converted;
}

// ../../../../../../../../node_modules/langsmith/dist/utils/env.js
var isBrowser = () =>
  typeof window !== "undefined" && typeof window.document !== "undefined";
var isWebWorker = () =>
  typeof globalThis === "object" &&
  globalThis.constructor &&
  globalThis.constructor.name === "DedicatedWorkerGlobalScope";
var isJsDom = () =>
  (typeof window !== "undefined" && window.name === "nodejs") ||
  (typeof navigator !== "undefined" &&
    (navigator.userAgent.includes("Node.js") ||
      navigator.userAgent.includes("jsdom")));
var isDeno = () => typeof Deno !== "undefined";
var isNode = () =>
  typeof process !== "undefined" &&
  typeof process.versions !== "undefined" &&
  typeof process.versions.node !== "undefined" &&
  !isDeno();
var getEnv = () => {
  let env;
  if (isBrowser()) {
    env = "browser";
  } else if (isNode()) {
    env = "node";
  } else if (isWebWorker()) {
    env = "webworker";
  } else if (isJsDom()) {
    env = "jsdom";
  } else if (isDeno()) {
    env = "deno";
  } else {
    env = "other";
  }
  return env;
};
var runtimeEnvironment;
async function getRuntimeEnvironment() {
  if (runtimeEnvironment === void 0) {
    const env = getEnv();
    const releaseEnv = getShas();
    runtimeEnvironment = {
      library: "langsmith",
      runtime: env,
      ...releaseEnv,
    };
  }
  return runtimeEnvironment;
}
function getEnvironmentVariable(name) {
  var _a4;
  try {
    return typeof process !== "undefined"
      ? (_a4 = process.env) == null
        ? void 0
        : _a4[name]
      : void 0;
  } catch (e) {
    return void 0;
  }
}
var cachedCommitSHAs;
function getShas() {
  if (cachedCommitSHAs !== void 0) {
    return cachedCommitSHAs;
  }
  const common_release_envs = [
    "VERCEL_GIT_COMMIT_SHA",
    "NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA",
    "COMMIT_REF",
    "RENDER_GIT_COMMIT",
    "CI_COMMIT_SHA",
    "CIRCLE_SHA1",
    "CF_PAGES_COMMIT_SHA",
    "REACT_APP_GIT_SHA",
    "SOURCE_VERSION",
    "GITHUB_SHA",
    "TRAVIS_COMMIT",
    "GIT_COMMIT",
    "BUILD_VCS_NUMBER",
    "bamboo_planRepository_revision",
    "Build.SourceVersion",
    "BITBUCKET_COMMIT",
    "DRONE_COMMIT_SHA",
    "SEMAPHORE_GIT_SHA",
    "BUILDKITE_COMMIT",
  ];
  const shas = {};
  for (const env of common_release_envs) {
    const envVar = getEnvironmentVariable(env);
    if (envVar !== void 0) {
      shas[env] = envVar;
    }
  }
  cachedCommitSHAs = shas;
  return shas;
}

// ../../../../../../../../node_modules/langsmith/dist/client.js
var isLocalhost = (url) => {
  const strippedUrl = url.replace("http://", "").replace("https://", "");
  const hostname = strippedUrl.split("/")[0].split(":")[0];
  return (
    hostname === "localhost" || hostname === "127.0.0.1" || hostname === "::1"
  );
};
var raiseForStatus = async (response, operation) => {
  const body = await response.text();
  if (!response.ok) {
    throw new Error(
      `Failed to ${operation}: ${response.status} ${response.statusText} ${body}`
    );
  }
};
async function toArray(iterable) {
  const result = [];
  for await (const item of iterable) {
    result.push(item);
  }
  return result;
}
function trimQuotes(str3) {
  if (str3 === void 0) {
    return void 0;
  }
  return str3
    .trim()
    .replace(/^"(.*)"$/, "$1")
    .replace(/^'(.*)'$/, "$1");
}
function hideInputs(inputs) {
  if (getEnvironmentVariable("LANGCHAIN_HIDE_INPUTS") === "true") {
    return {};
  }
  return inputs;
}
function hideOutputs(outputs) {
  if (getEnvironmentVariable("LANGCHAIN_HIDE_OUTPUTS") === "true") {
    return {};
  }
  return outputs;
}
function assertUuid(str3) {
  if (!validate_default(str3)) {
    throw new Error(`Invalid UUID: ${str3}`);
  }
}
var Client = class {
  constructor(config = {}) {
    var _a4, _b, _c, _d, _e, _f;
    Object.defineProperty(this, "apiKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "apiUrl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "webUrl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "caller", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "timeout_ms", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "_tenantId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null,
    });
    const defaultConfig = Client.getDefaultClientConfig();
    this.apiUrl =
      (_b = trimQuotes(
        (_a4 = config.apiUrl) != null ? _a4 : defaultConfig.apiUrl
      )) != null
        ? _b
        : "";
    this.apiKey = trimQuotes(
      (_c = config.apiKey) != null ? _c : defaultConfig.apiKey
    );
    this.webUrl = trimQuotes(
      (_d = config.webUrl) != null ? _d : defaultConfig.webUrl
    );
    this.validateApiKeyIfHosted();
    this.timeout_ms = (_e = config.timeout_ms) != null ? _e : 4e3;
    this.caller = new AsyncCaller(
      (_f = config.callerOptions) != null ? _f : {}
    );
  }
  static getDefaultClientConfig() {
    var _a4;
    const apiKey = getEnvironmentVariable("LANGCHAIN_API_KEY");
    const apiUrl =
      (_a4 = getEnvironmentVariable("LANGCHAIN_ENDPOINT")) != null
        ? _a4
        : apiKey
        ? "https://api.smith.langchain.com"
        : "http://localhost:1984";
    return {
      apiUrl,
      apiKey,
      webUrl: void 0,
    };
  }
  validateApiKeyIfHosted() {
    const isLocal = isLocalhost(this.apiUrl);
    if (!isLocal && !this.apiKey) {
      throw new Error(
        "API key must be provided when using hosted LangSmith API"
      );
    }
  }
  getHostUrl() {
    if (this.webUrl) {
      return this.webUrl;
    } else if (isLocalhost(this.apiUrl)) {
      this.webUrl = "http://localhost";
      return "http://localhost";
    } else if (this.apiUrl.split(".", 1)[0].includes("dev")) {
      this.webUrl = "https://dev.smith.langchain.com";
      return "https://dev.smith.langchain.com";
    } else {
      this.webUrl = "https://smith.langchain.com";
      return "https://smith.langchain.com";
    }
  }
  get headers() {
    const headers = {};
    if (this.apiKey) {
      headers["x-api-key"] = `${this.apiKey}`;
    }
    return headers;
  }
  async _getResponse(path, queryParams) {
    var _a4;
    const paramsString =
      (_a4 = queryParams == null ? void 0 : queryParams.toString()) != null
        ? _a4
        : "";
    const url = `${this.apiUrl}${path}?${paramsString}`;
    const response = await this.caller.call(fetch, url, {
      method: "GET",
      headers: this.headers,
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    if (!response.ok) {
      throw new Error(
        `Failed to fetch ${path}: ${response.status} ${response.statusText}`
      );
    }
    return response;
  }
  async _get(path, queryParams) {
    const response = await this._getResponse(path, queryParams);
    return response.json();
  }
  async *_getPaginated(path, queryParams = new URLSearchParams()) {
    let offset = Number(queryParams.get("offset")) || 0;
    const limit = Number(queryParams.get("limit")) || 100;
    while (true) {
      queryParams.set("offset", String(offset));
      queryParams.set("limit", String(limit));
      const url = `${this.apiUrl}${path}?${queryParams}`;
      const response = await this.caller.call(fetch, url, {
        method: "GET",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      });
      if (!response.ok) {
        throw new Error(
          `Failed to fetch ${path}: ${response.status} ${response.statusText}`
        );
      }
      const items = await response.json();
      if (items.length === 0) {
        break;
      }
      yield items;
      if (items.length < limit) {
        break;
      }
      offset += items.length;
    }
  }
  async createRun(run) {
    var _a4;
    const headers = { ...this.headers, "Content-Type": "application/json" };
    const extra = (_a4 = run.extra) != null ? _a4 : {};
    const runtimeEnv = await getRuntimeEnvironment();
    const session_name = run.project_name;
    delete run.project_name;
    const runCreate = {
      session_name,
      ...run,
      extra: {
        ...run.extra,
        runtime: {
          ...runtimeEnv,
          ...extra.runtime,
        },
      },
    };
    runCreate.inputs = hideInputs(runCreate.inputs);
    if (runCreate.outputs) {
      runCreate.outputs = hideOutputs(runCreate.outputs);
    }
    const response = await this.caller.call(fetch, `${this.apiUrl}/runs`, {
      method: "POST",
      headers,
      body: JSON.stringify(runCreate),
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    await raiseForStatus(response, "create run");
  }
  async updateRun(runId, run) {
    assertUuid(runId);
    if (run.inputs) {
      run.inputs = hideInputs(run.inputs);
    }
    if (run.outputs) {
      run.outputs = hideOutputs(run.outputs);
    }
    const headers = { ...this.headers, "Content-Type": "application/json" };
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/runs/${runId}`,
      {
        method: "PATCH",
        headers,
        body: JSON.stringify(run),
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    await raiseForStatus(response, "update run");
  }
  async readRun(runId, { loadChildRuns } = { loadChildRuns: false }) {
    assertUuid(runId);
    let run = await this._get(`/runs/${runId}`);
    if (loadChildRuns && run.child_run_ids) {
      run = await this._loadChildRuns(run);
    }
    return run;
  }
  async getRunUrl({ runId, run, projectOpts }) {
    if (run !== void 0) {
      let sessionId;
      if (run.session_id) {
        sessionId = run.session_id;
      } else if (projectOpts == null ? void 0 : projectOpts.projectName) {
        sessionId = (
          await this.readProject({
            projectName: projectOpts == null ? void 0 : projectOpts.projectName,
          })
        ).id;
      } else if (projectOpts == null ? void 0 : projectOpts.projectId) {
        sessionId = projectOpts == null ? void 0 : projectOpts.projectId;
      } else {
        const project = await this.readProject({
          projectName: getEnvironmentVariable("LANGCHAIN_PROJECT") || "default",
        });
        sessionId = project.id;
      }
      const tenantId = await this._getTenantId();
      return `${this.getHostUrl()}/o/${tenantId}/projects/p/${sessionId}/r/${
        run.id
      }?poll=true`;
    } else if (runId !== void 0) {
      const run_ = await this.readRun(runId);
      if (!run_.app_path) {
        throw new Error(`Run ${runId} has no app_path`);
      }
      const baseUrl = this.getHostUrl();
      return `${baseUrl}${run_.app_path}`;
    } else {
      throw new Error("Must provide either runId or run");
    }
  }
  async _loadChildRuns(run) {
    const childRuns = await toArray(this.listRuns({ id: run.child_run_ids }));
    const treemap = {};
    const runs = {};
    childRuns.sort((a, b) => {
      var _a4, _b;
      return (
        (_a4 = a == null ? void 0 : a.dotted_order) != null ? _a4 : ""
      ).localeCompare(
        (_b = b == null ? void 0 : b.dotted_order) != null ? _b : ""
      );
    });
    for (const childRun of childRuns) {
      if (
        childRun.parent_run_id === null ||
        childRun.parent_run_id === void 0
      ) {
        throw new Error(`Child run ${childRun.id} has no parent`);
      }
      if (!(childRun.parent_run_id in treemap)) {
        treemap[childRun.parent_run_id] = [];
      }
      treemap[childRun.parent_run_id].push(childRun);
      runs[childRun.id] = childRun;
    }
    run.child_runs = treemap[run.id] || [];
    for (const runId in treemap) {
      if (runId !== run.id) {
        runs[runId].child_runs = treemap[runId];
      }
    }
    return run;
  }
  async *listRuns({
    projectId,
    projectName,
    parentRunId,
    referenceExampleId,
    startTime,
    executionOrder,
    runType,
    error,
    id,
    limit,
    offset,
    query,
    filter,
  }) {
    const queryParams = new URLSearchParams();
    let projectId_ = projectId;
    if (projectName) {
      if (projectId) {
        throw new Error("Only one of projectId or projectName may be given");
      }
      projectId_ = (await this.readProject({ projectName })).id;
    }
    if (projectId_) {
      queryParams.append("session", projectId_);
    }
    if (parentRunId) {
      queryParams.append("parent_run", parentRunId);
    }
    if (referenceExampleId) {
      queryParams.append("reference_example", referenceExampleId);
    }
    if (startTime) {
      queryParams.append("start_time", startTime.toISOString());
    }
    if (executionOrder) {
      queryParams.append("execution_order", executionOrder.toString());
    }
    if (runType) {
      queryParams.append("run_type", runType);
    }
    if (error !== void 0) {
      queryParams.append("error", error.toString());
    }
    if (id !== void 0) {
      for (const id_ of id) {
        queryParams.append("id", id_);
      }
    }
    if (limit !== void 0) {
      queryParams.append("limit", limit.toString());
    }
    if (offset !== void 0) {
      queryParams.append("offset", offset.toString());
    }
    if (query !== void 0) {
      queryParams.append("query", query);
    }
    if (filter !== void 0) {
      queryParams.append("filter", filter);
    }
    for await (const runs of this._getPaginated("/runs", queryParams)) {
      yield* runs;
    }
  }
  async shareRun(runId, { shareId } = {}) {
    const data = {
      run_id: runId,
      share_token: shareId || v4_default(),
    };
    assertUuid(runId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/runs/${runId}/share`,
      {
        method: "PUT",
        headers: this.headers,
        body: JSON.stringify(data),
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    const result = await response.json();
    if (result === null || !("share_token" in result)) {
      throw new Error("Invalid response from server");
    }
    return `${this.getHostUrl()}/public/${result["share_token"]}/r`;
  }
  async unshareRun(runId) {
    assertUuid(runId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/runs/${runId}/share`,
      {
        method: "DELETE",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    await raiseForStatus(response, "unshare run");
  }
  async readRunSharedLink(runId) {
    assertUuid(runId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/runs/${runId}/share`,
      {
        method: "GET",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    const result = await response.json();
    if (result === null || !("share_token" in result)) {
      return void 0;
    }
    return `${this.getHostUrl()}/public/${result["share_token"]}/r`;
  }
  async listSharedRuns(shareToken, { runIds } = {}) {
    const queryParams = new URLSearchParams({
      share_token: shareToken,
    });
    if (runIds !== void 0) {
      for (const runId of runIds) {
        queryParams.append("id", runId);
      }
    }
    assertUuid(shareToken);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/public/${shareToken}/runs${queryParams}`,
      {
        method: "GET",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    const runs = await response.json();
    return runs;
  }
  async readDatasetSharedSchema(datasetId, datasetName) {
    if (!datasetId && !datasetName) {
      throw new Error("Either datasetId or datasetName must be given");
    }
    if (!datasetId) {
      const dataset = await this.readDataset({ datasetName });
      datasetId = dataset.id;
    }
    assertUuid(datasetId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/datasets/${datasetId}/share`,
      {
        method: "GET",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    const shareSchema = await response.json();
    shareSchema.url = `${this.getHostUrl()}/public/${
      shareSchema.share_token
    }/d`;
    return shareSchema;
  }
  async shareDataset(datasetId, datasetName) {
    if (!datasetId && !datasetName) {
      throw new Error("Either datasetId or datasetName must be given");
    }
    if (!datasetId) {
      const dataset = await this.readDataset({ datasetName });
      datasetId = dataset.id;
    }
    const data = {
      dataset_id: datasetId,
    };
    assertUuid(datasetId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/datasets/${datasetId}/share`,
      {
        method: "PUT",
        headers: this.headers,
        body: JSON.stringify(data),
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    const shareSchema = await response.json();
    shareSchema.url = `${this.getHostUrl()}/public/${
      shareSchema.share_token
    }/d`;
    return shareSchema;
  }
  async unshareDataset(datasetId) {
    assertUuid(datasetId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/datasets/${datasetId}/share`,
      {
        method: "DELETE",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    await raiseForStatus(response, "unshare dataset");
  }
  async readSharedDataset(shareToken) {
    assertUuid(shareToken);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/public/${shareToken}/datasets`,
      {
        method: "GET",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    const dataset = await response.json();
    return dataset;
  }
  async createProject({
    projectName,
    projectExtra,
    upsert,
    referenceDatasetId,
  }) {
    const upsert_ = upsert ? `?upsert=true` : "";
    const endpoint = `${this.apiUrl}/sessions${upsert_}`;
    const body = {
      name: projectName,
    };
    if (projectExtra !== void 0) {
      body["extra"] = projectExtra;
    }
    if (referenceDatasetId !== void 0) {
      body["reference_dataset_id"] = referenceDatasetId;
    }
    const response = await this.caller.call(fetch, endpoint, {
      method: "POST",
      headers: { ...this.headers, "Content-Type": "application/json" },
      body: JSON.stringify(body),
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    const result = await response.json();
    if (!response.ok) {
      throw new Error(
        `Failed to create session ${projectName}: ${response.status} ${response.statusText}`
      );
    }
    return result;
  }
  async readProject({ projectId, projectName }) {
    let path = "/sessions";
    const params = new URLSearchParams();
    if (projectId !== void 0 && projectName !== void 0) {
      throw new Error("Must provide either projectName or projectId, not both");
    } else if (projectId !== void 0) {
      assertUuid(projectId);
      path += `/${projectId}`;
    } else if (projectName !== void 0) {
      params.append("name", projectName);
    } else {
      throw new Error("Must provide projectName or projectId");
    }
    const response = await this._get(path, params);
    let result;
    if (Array.isArray(response)) {
      if (response.length === 0) {
        throw new Error(
          `Project[id=${projectId}, name=${projectName}] not found`
        );
      }
      result = response[0];
    } else {
      result = response;
    }
    return result;
  }
  async _getTenantId() {
    if (this._tenantId !== null) {
      return this._tenantId;
    }
    const queryParams = new URLSearchParams({ limit: "1" });
    for await (const projects of this._getPaginated("/sessions", queryParams)) {
      this._tenantId = projects[0].tenant_id;
      return projects[0].tenant_id;
    }
    throw new Error("No projects found to resolve tenant.");
  }
  async *listProjects({
    projectIds,
    name,
    nameContains,
    referenceDatasetId,
    referenceDatasetName,
    referenceFree,
  } = {}) {
    const params = new URLSearchParams();
    if (projectIds !== void 0) {
      for (const projectId of projectIds) {
        params.append("id", projectId);
      }
    }
    if (name !== void 0) {
      params.append("name", name);
    }
    if (nameContains !== void 0) {
      params.append("name_contains", nameContains);
    }
    if (referenceDatasetId !== void 0) {
      params.append("reference_dataset", referenceDatasetId);
    } else if (referenceDatasetName !== void 0) {
      const dataset = await this.readDataset({
        datasetName: referenceDatasetName,
      });
      params.append("reference_dataset", dataset.id);
    }
    if (referenceFree !== void 0) {
      params.append("reference_free", referenceFree.toString());
    }
    for await (const projects of this._getPaginated("/sessions", params)) {
      yield* projects;
    }
  }
  async deleteProject({ projectId, projectName }) {
    let projectId_;
    if (projectId === void 0 && projectName === void 0) {
      throw new Error("Must provide projectName or projectId");
    } else if (projectId !== void 0 && projectName !== void 0) {
      throw new Error("Must provide either projectName or projectId, not both");
    } else if (projectId === void 0) {
      projectId_ = (await this.readProject({ projectName })).id;
    } else {
      projectId_ = projectId;
    }
    assertUuid(projectId_);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/sessions/${projectId_}`,
      {
        method: "DELETE",
        headers: this.headers,
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    await raiseForStatus(
      response,
      `delete session ${projectId_} (${projectName})`
    );
  }
  async uploadCsv({
    csvFile,
    fileName,
    inputKeys,
    outputKeys,
    description,
    dataType,
    name,
  }) {
    const url = `${this.apiUrl}/datasets/upload`;
    const formData = new FormData();
    formData.append("file", csvFile, fileName);
    inputKeys.forEach((key) => {
      formData.append("input_keys", key);
    });
    outputKeys.forEach((key) => {
      formData.append("output_keys", key);
    });
    if (description) {
      formData.append("description", description);
    }
    if (dataType) {
      formData.append("data_type", dataType);
    }
    if (name) {
      formData.append("name", name);
    }
    const response = await this.caller.call(fetch, url, {
      method: "POST",
      headers: this.headers,
      body: formData,
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    if (!response.ok) {
      const result2 = await response.json();
      if (result2.detail && result2.detail.includes("already exists")) {
        throw new Error(`Dataset ${fileName} already exists`);
      }
      throw new Error(
        `Failed to upload CSV: ${response.status} ${response.statusText}`
      );
    }
    const result = await response.json();
    return result;
  }
  async createDataset(name, { description, dataType } = {}) {
    const body = {
      name,
      description,
    };
    if (dataType) {
      body.data_type = dataType;
    }
    const response = await this.caller.call(fetch, `${this.apiUrl}/datasets`, {
      method: "POST",
      headers: { ...this.headers, "Content-Type": "application/json" },
      body: JSON.stringify(body),
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    if (!response.ok) {
      const result2 = await response.json();
      if (result2.detail && result2.detail.includes("already exists")) {
        throw new Error(`Dataset ${name} already exists`);
      }
      throw new Error(
        `Failed to create dataset ${response.status} ${response.statusText}`
      );
    }
    const result = await response.json();
    return result;
  }
  async readDataset({ datasetId, datasetName }) {
    let path = "/datasets";
    const params = new URLSearchParams({ limit: "1" });
    if (datasetId !== void 0 && datasetName !== void 0) {
      throw new Error("Must provide either datasetName or datasetId, not both");
    } else if (datasetId !== void 0) {
      assertUuid(datasetId);
      path += `/${datasetId}`;
    } else if (datasetName !== void 0) {
      params.append("name", datasetName);
    } else {
      throw new Error("Must provide datasetName or datasetId");
    }
    const response = await this._get(path, params);
    let result;
    if (Array.isArray(response)) {
      if (response.length === 0) {
        throw new Error(
          `Dataset[id=${datasetId}, name=${datasetName}] not found`
        );
      }
      result = response[0];
    } else {
      result = response;
    }
    return result;
  }
  async readDatasetOpenaiFinetuning({ datasetId, datasetName }) {
    const path = "/datasets";
    if (datasetId !== void 0) {
    } else if (datasetName !== void 0) {
      datasetId = (await this.readDataset({ datasetName })).id;
    } else {
      throw new Error("Must provide datasetName or datasetId");
    }
    const response = await this._getResponse(`${path}/${datasetId}/openai_ft`);
    const datasetText = await response.text();
    const dataset = datasetText
      .trim()
      .split("\n")
      .map((line) => JSON.parse(line));
    return dataset;
  }
  async *listDatasets({
    limit = 100,
    offset = 0,
    datasetIds,
    datasetName,
    datasetNameContains,
  } = {}) {
    const path = "/datasets";
    const params = new URLSearchParams({
      limit: limit.toString(),
      offset: offset.toString(),
    });
    if (datasetIds !== void 0) {
      for (const id_ of datasetIds) {
        params.append("id", id_);
      }
    }
    if (datasetName !== void 0) {
      params.append("name", datasetName);
    }
    if (datasetNameContains !== void 0) {
      params.append("name_contains", datasetNameContains);
    }
    for await (const datasets of this._getPaginated(path, params)) {
      yield* datasets;
    }
  }
  async deleteDataset({ datasetId, datasetName }) {
    let path = "/datasets";
    let datasetId_ = datasetId;
    if (datasetId !== void 0 && datasetName !== void 0) {
      throw new Error("Must provide either datasetName or datasetId, not both");
    } else if (datasetName !== void 0) {
      const dataset = await this.readDataset({ datasetName });
      datasetId_ = dataset.id;
    }
    if (datasetId_ !== void 0) {
      assertUuid(datasetId_);
      path += `/${datasetId_}`;
    } else {
      throw new Error("Must provide datasetName or datasetId");
    }
    const response = await this.caller.call(fetch, this.apiUrl + path, {
      method: "DELETE",
      headers: this.headers,
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    if (!response.ok) {
      throw new Error(
        `Failed to delete ${path}: ${response.status} ${response.statusText}`
      );
    }
    await response.json();
  }
  async createExample(
    inputs,
    outputs,
    { datasetId, datasetName, createdAt, exampleId }
  ) {
    let datasetId_ = datasetId;
    if (datasetId_ === void 0 && datasetName === void 0) {
      throw new Error("Must provide either datasetName or datasetId");
    } else if (datasetId_ !== void 0 && datasetName !== void 0) {
      throw new Error("Must provide either datasetName or datasetId, not both");
    } else if (datasetId_ === void 0) {
      const dataset = await this.readDataset({ datasetName });
      datasetId_ = dataset.id;
    }
    const createdAt_ = createdAt || new Date();
    const data = {
      dataset_id: datasetId_,
      inputs,
      outputs,
      created_at: createdAt_.toISOString(),
      id: exampleId,
    };
    const response = await this.caller.call(fetch, `${this.apiUrl}/examples`, {
      method: "POST",
      headers: { ...this.headers, "Content-Type": "application/json" },
      body: JSON.stringify(data),
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    if (!response.ok) {
      throw new Error(
        `Failed to create example: ${response.status} ${response.statusText}`
      );
    }
    const result = await response.json();
    return result;
  }
  async createLLMExample(input, generation, options) {
    return this.createExample({ input }, { output: generation }, options);
  }
  async createChatExample(input, generations, options) {
    const finalInput = input.map((message) => {
      if (isLangChainMessage(message)) {
        return convertLangChainMessageToExample(message);
      }
      return message;
    });
    const finalOutput = isLangChainMessage(generations)
      ? convertLangChainMessageToExample(generations)
      : generations;
    return this.createExample(
      { input: finalInput },
      { output: finalOutput },
      options
    );
  }
  async readExample(exampleId) {
    assertUuid(exampleId);
    const path = `/examples/${exampleId}`;
    return await this._get(path);
  }
  async *listExamples({ datasetId, datasetName, exampleIds } = {}) {
    let datasetId_;
    if (datasetId !== void 0 && datasetName !== void 0) {
      throw new Error("Must provide either datasetName or datasetId, not both");
    } else if (datasetId !== void 0) {
      datasetId_ = datasetId;
    } else if (datasetName !== void 0) {
      const dataset = await this.readDataset({ datasetName });
      datasetId_ = dataset.id;
    } else {
      throw new Error("Must provide a datasetName or datasetId");
    }
    const params = new URLSearchParams({ dataset: datasetId_ });
    if (exampleIds !== void 0) {
      for (const id_ of exampleIds) {
        params.append("id", id_);
      }
    }
    for await (const examples of this._getPaginated("/examples", params)) {
      yield* examples;
    }
  }
  async deleteExample(exampleId) {
    assertUuid(exampleId);
    const path = `/examples/${exampleId}`;
    const response = await this.caller.call(fetch, this.apiUrl + path, {
      method: "DELETE",
      headers: this.headers,
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    if (!response.ok) {
      throw new Error(
        `Failed to delete ${path}: ${response.status} ${response.statusText}`
      );
    }
    await response.json();
  }
  async updateExample(exampleId, update) {
    assertUuid(exampleId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/examples/${exampleId}`,
      {
        method: "PATCH",
        headers: { ...this.headers, "Content-Type": "application/json" },
        body: JSON.stringify(update),
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    if (!response.ok) {
      throw new Error(
        `Failed to update example ${exampleId}: ${response.status} ${response.statusText}`
      );
    }
    const result = await response.json();
    return result;
  }
  async evaluateRun(
    run,
    evaluator,
    { sourceInfo, loadChildRuns } = { loadChildRuns: false }
  ) {
    let run_;
    if (typeof run === "string") {
      run_ = await this.readRun(run, { loadChildRuns });
    } else if (typeof run === "object" && "id" in run) {
      run_ = run;
    } else {
      throw new Error(`Invalid run type: ${typeof run}`);
    }
    let referenceExample = void 0;
    if (
      run_.reference_example_id !== null &&
      run_.reference_example_id !== void 0
    ) {
      referenceExample = await this.readExample(run_.reference_example_id);
    }
    const feedbackResult = await evaluator.evaluateRun(run_, referenceExample);
    let sourceInfo_ = sourceInfo != null ? sourceInfo : {};
    if (feedbackResult.evaluatorInfo) {
      sourceInfo_ = { ...sourceInfo_, ...feedbackResult.evaluatorInfo };
    }
    return await this.createFeedback(run_.id, feedbackResult.key, {
      score: feedbackResult.score,
      value: feedbackResult.value,
      comment: feedbackResult.comment,
      correction: feedbackResult.correction,
      sourceInfo: sourceInfo_,
      feedbackSourceType: "model",
    });
  }
  async createFeedback(
    runId,
    key,
    {
      score,
      value,
      correction,
      comment,
      sourceInfo,
      feedbackSourceType = "api",
      sourceRunId,
      feedbackId,
      eager = false,
    }
  ) {
    var _a4;
    const feedback_source = {
      type: feedbackSourceType != null ? feedbackSourceType : "api",
      metadata: sourceInfo != null ? sourceInfo : {},
    };
    if (
      sourceRunId !== void 0 &&
      (feedback_source == null ? void 0 : feedback_source.metadata) !==
        void 0 &&
      !feedback_source.metadata["__run"]
    ) {
      feedback_source.metadata["__run"] = { run_id: sourceRunId };
    }
    if (
      (feedback_source == null ? void 0 : feedback_source.metadata) !==
        void 0 &&
      ((_a4 = feedback_source.metadata["__run"]) == null
        ? void 0
        : _a4.run_id) !== void 0
    ) {
      assertUuid(feedback_source.metadata["__run"].run_id);
    }
    const feedback = {
      id: feedbackId != null ? feedbackId : v4_default(),
      run_id: runId,
      key,
      score,
      value,
      correction,
      comment,
      feedback_source,
    };
    const url = `${this.apiUrl}/feedback` + (eager ? "/eager" : "");
    const response = await this.caller.call(fetch, url, {
      method: "POST",
      headers: { ...this.headers, "Content-Type": "application/json" },
      body: JSON.stringify(feedback),
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    await raiseForStatus(response, "create feedback");
    return feedback;
  }
  async updateFeedback(feedbackId, { score, value, correction, comment }) {
    const feedbackUpdate = {};
    if (score !== void 0 && score !== null) {
      feedbackUpdate["score"] = score;
    }
    if (value !== void 0 && value !== null) {
      feedbackUpdate["value"] = value;
    }
    if (correction !== void 0 && correction !== null) {
      feedbackUpdate["correction"] = correction;
    }
    if (comment !== void 0 && comment !== null) {
      feedbackUpdate["comment"] = comment;
    }
    assertUuid(feedbackId);
    const response = await this.caller.call(
      fetch,
      `${this.apiUrl}/feedback/${feedbackId}`,
      {
        method: "PATCH",
        headers: { ...this.headers, "Content-Type": "application/json" },
        body: JSON.stringify(feedbackUpdate),
        signal: AbortSignal.timeout(this.timeout_ms),
      }
    );
    await raiseForStatus(response, "update feedback");
  }
  async readFeedback(feedbackId) {
    assertUuid(feedbackId);
    const path = `/feedback/${feedbackId}`;
    const response = await this._get(path);
    return response;
  }
  async deleteFeedback(feedbackId) {
    assertUuid(feedbackId);
    const path = `/feedback/${feedbackId}`;
    const response = await this.caller.call(fetch, this.apiUrl + path, {
      method: "DELETE",
      headers: this.headers,
      signal: AbortSignal.timeout(this.timeout_ms),
    });
    if (!response.ok) {
      throw new Error(
        `Failed to delete ${path}: ${response.status} ${response.statusText}`
      );
    }
    await response.json();
  }
  async *listFeedback({ runIds, feedbackKeys, feedbackSourceTypes } = {}) {
    const queryParams = new URLSearchParams();
    if (runIds) {
      queryParams.append("run", runIds.join(","));
    }
    if (feedbackKeys) {
      for (const key of feedbackKeys) {
        queryParams.append("key", key);
      }
    }
    if (feedbackSourceTypes) {
      for (const type of feedbackSourceTypes) {
        queryParams.append("source", type);
      }
    }
    for await (const feedbacks of this._getPaginated(
      "/feedback",
      queryParams
    )) {
      yield* feedbacks;
    }
  }
};

// ../../../../../../../../node_modules/langchain/dist/util/env.js
var isBrowser2 = () =>
  typeof window !== "undefined" && typeof window.document !== "undefined";
var isWebWorker2 = () =>
  typeof globalThis === "object" &&
  globalThis.constructor &&
  globalThis.constructor.name === "DedicatedWorkerGlobalScope";
var isJsDom2 = () =>
  (typeof window !== "undefined" && window.name === "nodejs") ||
  (typeof navigator !== "undefined" &&
    (navigator.userAgent.includes("Node.js") ||
      navigator.userAgent.includes("jsdom")));
var isDeno2 = () => typeof Deno !== "undefined";
var isNode2 = () =>
  typeof process !== "undefined" &&
  typeof process.versions !== "undefined" &&
  typeof process.versions.node !== "undefined" &&
  !isDeno2();
var getEnv2 = () => {
  let env;
  if (isBrowser2()) {
    env = "browser";
  } else if (isNode2()) {
    env = "node";
  } else if (isWebWorker2()) {
    env = "webworker";
  } else if (isJsDom2()) {
    env = "jsdom";
  } else if (isDeno2()) {
    env = "deno";
  } else {
    env = "other";
  }
  return env;
};
var runtimeEnvironment2;
async function getRuntimeEnvironment2() {
  if (runtimeEnvironment2 === void 0) {
    const env = getEnv2();
    runtimeEnvironment2 = {
      library: "langchain-js",
      runtime: env,
    };
  }
  return runtimeEnvironment2;
}
function getEnvironmentVariable2(name) {
  var _a4;
  try {
    return typeof process !== "undefined"
      ? (_a4 = process.env) == null
        ? void 0
        : _a4[name]
      : void 0;
  } catch (e) {
    return void 0;
  }
}

// ../../../../../../../../node_modules/langchain/dist/callbacks/handlers/tracer_langchain.js
var LangChainTracer = class extends BaseTracer {
  constructor(fields = {}) {
    var _a4;
    super(fields);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "langchain_tracer",
    });
    Object.defineProperty(this, "projectName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "exampleId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "client", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    const { exampleId, projectName, client } = fields;
    this.projectName =
      (_a4 =
        projectName != null
          ? projectName
          : getEnvironmentVariable2("LANGCHAIN_PROJECT")) != null
        ? _a4
        : getEnvironmentVariable2("LANGCHAIN_SESSION");
    this.exampleId = exampleId;
    this.client = client != null ? client : new Client({});
  }
  async _convertToCreate(run, example_id = void 0) {
    return {
      ...run,
      extra: {
        ...run.extra,
        runtime: await getRuntimeEnvironment2(),
      },
      child_runs: void 0,
      session_name: this.projectName,
      reference_example_id: run.parent_run_id ? void 0 : example_id,
    };
  }
  async persistRun(_run) {}
  async _persistRunSingle(run) {
    const persistedRun = await this._convertToCreate(run, this.exampleId);
    await this.client.createRun(persistedRun);
  }
  async _updateRunSingle(run) {
    const runUpdate = {
      end_time: run.end_time,
      error: run.error,
      outputs: run.outputs,
      events: run.events,
      inputs: run.inputs,
    };
    await this.client.updateRun(run.id, runUpdate);
  }
  async onRetrieverStart(run) {
    await this._persistRunSingle(run);
  }
  async onRetrieverEnd(run) {
    await this._updateRunSingle(run);
  }
  async onRetrieverError(run) {
    await this._updateRunSingle(run);
  }
  async onLLMStart(run) {
    await this._persistRunSingle(run);
  }
  async onLLMEnd(run) {
    await this._updateRunSingle(run);
  }
  async onLLMError(run) {
    await this._updateRunSingle(run);
  }
  async onChainStart(run) {
    await this._persistRunSingle(run);
  }
  async onChainEnd(run) {
    await this._updateRunSingle(run);
  }
  async onChainError(run) {
    await this._updateRunSingle(run);
  }
  async onToolStart(run) {
    await this._persistRunSingle(run);
  }
  async onToolEnd(run) {
    await this._updateRunSingle(run);
  }
  async onToolError(run) {
    await this._updateRunSingle(run);
  }
};

// ../../../../../../../../node_modules/langchain/dist/memory/base.js
function getBufferString(messages, humanPrefix = "Human", aiPrefix = "AI") {
  const string_messages = [];
  for (const m of messages) {
    let role;
    if (m._getType() === "human") {
      role = humanPrefix;
    } else if (m._getType() === "ai") {
      role = aiPrefix;
    } else if (m._getType() === "system") {
      role = "System";
    } else if (m._getType() === "function") {
      role = "Function";
    } else if (m._getType() === "generic") {
      role = m.role;
    } else {
      throw new Error(`Got unsupported message type: ${m}`);
    }
    const nameStr = m.name ? `${m.name}, ` : "";
    string_messages.push(`${role}: ${nameStr}${m.content}`);
  }
  return string_messages.join("\n");
}

// ../../../../../../../../node_modules/langchain/dist/callbacks/handlers/tracer_langchain_v1.js
var LangChainTracerV1 = class extends BaseTracer {
  constructor() {
    super();
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "langchain_tracer",
    });
    Object.defineProperty(this, "endpoint", {
      enumerable: true,
      configurable: true,
      writable: true,
      value:
        getEnvironmentVariable2("LANGCHAIN_ENDPOINT") ||
        "http://localhost:1984",
    });
    Object.defineProperty(this, "headers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {
        "Content-Type": "application/json",
      },
    });
    Object.defineProperty(this, "session", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    const apiKey = getEnvironmentVariable2("LANGCHAIN_API_KEY");
    if (apiKey) {
      this.headers["x-api-key"] = apiKey;
    }
  }
  async newSession(sessionName) {
    const sessionCreate = {
      start_time: Date.now(),
      name: sessionName,
    };
    const session = await this.persistSession(sessionCreate);
    this.session = session;
    return session;
  }
  async loadSession(sessionName) {
    const endpoint = `${this.endpoint}/sessions?name=${sessionName}`;
    return this._handleSessionResponse(endpoint);
  }
  async loadDefaultSession() {
    const endpoint = `${this.endpoint}/sessions?name=default`;
    return this._handleSessionResponse(endpoint);
  }
  async convertV2RunToRun(run) {
    var _a4, _b;
    const session =
      (_a4 = this.session) != null ? _a4 : await this.loadDefaultSession();
    const serialized = run.serialized;
    let runResult;
    if (run.run_type === "llm") {
      const prompts = run.inputs.prompts
        ? run.inputs.prompts
        : run.inputs.messages.map((x) => getBufferString(x));
      const llmRun = {
        uuid: run.id,
        start_time: run.start_time,
        end_time: run.end_time,
        execution_order: run.execution_order,
        child_execution_order: run.child_execution_order,
        serialized,
        type: run.run_type,
        session_id: session.id,
        prompts,
        response: run.outputs,
      };
      runResult = llmRun;
    } else if (run.run_type === "chain") {
      const child_runs = await Promise.all(
        run.child_runs.map((child_run) => this.convertV2RunToRun(child_run))
      );
      const chainRun = {
        uuid: run.id,
        start_time: run.start_time,
        end_time: run.end_time,
        execution_order: run.execution_order,
        child_execution_order: run.child_execution_order,
        serialized,
        type: run.run_type,
        session_id: session.id,
        inputs: run.inputs,
        outputs: run.outputs,
        child_llm_runs: child_runs.filter(
          (child_run) => child_run.type === "llm"
        ),
        child_chain_runs: child_runs.filter(
          (child_run) => child_run.type === "chain"
        ),
        child_tool_runs: child_runs.filter(
          (child_run) => child_run.type === "tool"
        ),
      };
      runResult = chainRun;
    } else if (run.run_type === "tool") {
      const child_runs = await Promise.all(
        run.child_runs.map((child_run) => this.convertV2RunToRun(child_run))
      );
      const toolRun = {
        uuid: run.id,
        start_time: run.start_time,
        end_time: run.end_time,
        execution_order: run.execution_order,
        child_execution_order: run.child_execution_order,
        serialized,
        type: run.run_type,
        session_id: session.id,
        tool_input: run.inputs.input,
        output: (_b = run.outputs) == null ? void 0 : _b.output,
        action: JSON.stringify(serialized),
        child_llm_runs: child_runs.filter(
          (child_run) => child_run.type === "llm"
        ),
        child_chain_runs: child_runs.filter(
          (child_run) => child_run.type === "chain"
        ),
        child_tool_runs: child_runs.filter(
          (child_run) => child_run.type === "tool"
        ),
      };
      runResult = toolRun;
    } else {
      throw new Error(`Unknown run type: ${run.run_type}`);
    }
    return runResult;
  }
  async persistRun(run) {
    let endpoint;
    let v1Run;
    if (run.run_type !== void 0) {
      v1Run = await this.convertV2RunToRun(run);
    } else {
      v1Run = run;
    }
    if (v1Run.type === "llm") {
      endpoint = `${this.endpoint}/llm-runs`;
    } else if (v1Run.type === "chain") {
      endpoint = `${this.endpoint}/chain-runs`;
    } else {
      endpoint = `${this.endpoint}/tool-runs`;
    }
    const response = await fetch(endpoint, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(v1Run),
    });
    if (!response.ok) {
      console.error(
        `Failed to persist run: ${response.status} ${response.statusText}`
      );
    }
  }
  async persistSession(sessionCreate) {
    const endpoint = `${this.endpoint}/sessions`;
    const response = await fetch(endpoint, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(sessionCreate),
    });
    if (!response.ok) {
      console.error(
        `Failed to persist session: ${response.status} ${response.statusText}, using default session.`
      );
      return {
        id: 1,
        ...sessionCreate,
      };
    }
    return {
      id: (await response.json()).id,
      ...sessionCreate,
    };
  }
  async _handleSessionResponse(endpoint) {
    const response = await fetch(endpoint, {
      method: "GET",
      headers: this.headers,
    });
    let tracerSession;
    if (!response.ok) {
      console.error(
        `Failed to load session: ${response.status} ${response.statusText}`
      );
      tracerSession = {
        id: 1,
        start_time: Date.now(),
      };
      this.session = tracerSession;
      return tracerSession;
    }
    const resp = await response.json();
    if (resp.length === 0) {
      tracerSession = {
        id: 1,
        start_time: Date.now(),
      };
      this.session = tracerSession;
      return tracerSession;
    }
    [tracerSession] = resp;
    this.session = tracerSession;
    return tracerSession;
  }
};

// ../../../../../../../../node_modules/langchain/dist/callbacks/handlers/initialize.js
async function getTracingCallbackHandler(session) {
  const tracer = new LangChainTracerV1();
  if (session) {
    await tracer.loadSession(session);
  } else {
    await tracer.loadDefaultSession();
  }
  return tracer;
}
async function getTracingV2CallbackHandler() {
  return new LangChainTracer();
}

// ../../../../../../../../node_modules/langchain/dist/callbacks/promises.js
var import_p_queue2 = __toESM(require_dist(), 1);
var queue;
function createQueue() {
  const PQueue =
    "default" in import_p_queue2.default
      ? import_p_queue2.default.default
      : import_p_queue2.default;
  return new PQueue({
    autoStart: true,
    concurrency: 1,
  });
}
async function consumeCallback(promiseFn, wait) {
  if (wait === true) {
    await promiseFn();
  } else {
    if (typeof queue === "undefined") {
      queue = createQueue();
    }
    void queue.add(promiseFn);
  }
}

// ../../../../../../../../node_modules/langchain/dist/callbacks/manager.js
function parseCallbackConfigArg(arg) {
  if (!arg) {
    return {};
  } else if (Array.isArray(arg) || "name" in arg) {
    return { callbacks: arg };
  } else {
    return arg;
  }
}
var BaseCallbackManager = class {
  setHandler(handler) {
    return this.setHandlers([handler]);
  }
};
var BaseRunManager = class {
  constructor(
    runId,
    handlers,
    inheritableHandlers,
    tags,
    inheritableTags,
    metadata,
    inheritableMetadata,
    _parentRunId
  ) {
    Object.defineProperty(this, "runId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: runId,
    });
    Object.defineProperty(this, "handlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: handlers,
    });
    Object.defineProperty(this, "inheritableHandlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: inheritableHandlers,
    });
    Object.defineProperty(this, "tags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: tags,
    });
    Object.defineProperty(this, "inheritableTags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: inheritableTags,
    });
    Object.defineProperty(this, "metadata", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: metadata,
    });
    Object.defineProperty(this, "inheritableMetadata", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: inheritableMetadata,
    });
    Object.defineProperty(this, "_parentRunId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _parentRunId,
    });
  }
  async handleText(text) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          try {
            await ((_a4 = handler.handleText) == null
              ? void 0
              : _a4.call(
                  handler,
                  text,
                  this.runId,
                  this._parentRunId,
                  this.tags
                ));
          } catch (err) {
            console.error(
              `Error in handler ${handler.constructor.name}, handleText: ${err}`
            );
          }
        }, handler.awaitHandlers)
      )
    );
  }
};
var CallbackManagerForRetrieverRun = class extends BaseRunManager {
  getChild(tag) {
    const manager = new CallbackManager(this.runId);
    manager.setHandlers(this.inheritableHandlers);
    manager.addTags(this.inheritableTags);
    manager.addMetadata(this.inheritableMetadata);
    if (tag) {
      manager.addTags([tag], false);
    }
    return manager;
  }
  async handleRetrieverEnd(documents) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreRetriever) {
            try {
              await ((_a4 = handler.handleRetrieverEnd) == null
                ? void 0
                : _a4.call(
                    handler,
                    documents,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleRetriever`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
  async handleRetrieverError(err) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreRetriever) {
            try {
              await ((_a4 = handler.handleRetrieverError) == null
                ? void 0
                : _a4.call(
                    handler,
                    err,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (error) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
};
var CallbackManagerForLLMRun = class extends BaseRunManager {
  async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreLLM) {
            try {
              await ((_a4 = handler.handleLLMNewToken) == null
                ? void 0
                : _a4.call(
                    handler,
                    token,
                    idx != null ? idx : { prompt: 0, completion: 0 },
                    this.runId,
                    this._parentRunId,
                    this.tags,
                    fields
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
  async handleLLMError(err) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreLLM) {
            try {
              await ((_a4 = handler.handleLLMError) == null
                ? void 0
                : _a4.call(
                    handler,
                    err,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (err2) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleLLMError: ${err2}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
  async handleLLMEnd(output) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreLLM) {
            try {
              await ((_a4 = handler.handleLLMEnd) == null
                ? void 0
                : _a4.call(
                    handler,
                    output,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
};
var CallbackManagerForChainRun = class extends BaseRunManager {
  getChild(tag) {
    const manager = new CallbackManager(this.runId);
    manager.setHandlers(this.inheritableHandlers);
    manager.addTags(this.inheritableTags);
    manager.addMetadata(this.inheritableMetadata);
    if (tag) {
      manager.addTags([tag], false);
    }
    return manager;
  }
  async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreChain) {
            try {
              await ((_a4 = handler.handleChainError) == null
                ? void 0
                : _a4.call(
                    handler,
                    err,
                    this.runId,
                    this._parentRunId,
                    this.tags,
                    kwargs
                  ));
            } catch (err2) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleChainError: ${err2}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
  async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreChain) {
            try {
              await ((_a4 = handler.handleChainEnd) == null
                ? void 0
                : _a4.call(
                    handler,
                    output,
                    this.runId,
                    this._parentRunId,
                    this.tags,
                    kwargs
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
  async handleAgentAction(action) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreAgent) {
            try {
              await ((_a4 = handler.handleAgentAction) == null
                ? void 0
                : _a4.call(
                    handler,
                    action,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
  async handleAgentEnd(action) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreAgent) {
            try {
              await ((_a4 = handler.handleAgentEnd) == null
                ? void 0
                : _a4.call(
                    handler,
                    action,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
};
var CallbackManagerForToolRun = class extends BaseRunManager {
  getChild(tag) {
    const manager = new CallbackManager(this.runId);
    manager.setHandlers(this.inheritableHandlers);
    manager.addTags(this.inheritableTags);
    manager.addMetadata(this.inheritableMetadata);
    if (tag) {
      manager.addTags([tag], false);
    }
    return manager;
  }
  async handleToolError(err) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreAgent) {
            try {
              await ((_a4 = handler.handleToolError) == null
                ? void 0
                : _a4.call(
                    handler,
                    err,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (err2) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleToolError: ${err2}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
  async handleToolEnd(output) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreAgent) {
            try {
              await ((_a4 = handler.handleToolEnd) == null
                ? void 0
                : _a4.call(
                    handler,
                    output,
                    this.runId,
                    this._parentRunId,
                    this.tags
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
  }
};
var CallbackManager = class extends BaseCallbackManager {
  constructor(parentRunId) {
    super();
    Object.defineProperty(this, "handlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "inheritableHandlers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "tags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: [],
    });
    Object.defineProperty(this, "inheritableTags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: [],
    });
    Object.defineProperty(this, "metadata", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {},
    });
    Object.defineProperty(this, "inheritableMetadata", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {},
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "callback_manager",
    });
    Object.defineProperty(this, "_parentRunId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.handlers = [];
    this.inheritableHandlers = [];
    this._parentRunId = parentRunId;
  }
  async handleLLMStart(
    llm,
    prompts,
    _runId = void 0,
    _parentRunId = void 0,
    extraParams = void 0,
    _tags = void 0,
    _metadata = void 0,
    runName = void 0
  ) {
    return Promise.all(
      prompts.map(async (prompt) => {
        const runId = v4_default();
        await Promise.all(
          this.handlers.map((handler) =>
            consumeCallback(async () => {
              var _a4;
              if (!handler.ignoreLLM) {
                try {
                  await ((_a4 = handler.handleLLMStart) == null
                    ? void 0
                    : _a4.call(
                        handler,
                        llm,
                        [prompt],
                        runId,
                        this._parentRunId,
                        extraParams,
                        this.tags,
                        this.metadata,
                        runName
                      ));
                } catch (err) {
                  console.error(
                    `Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`
                  );
                }
              }
            }, handler.awaitHandlers)
          )
        );
        return new CallbackManagerForLLMRun(
          runId,
          this.handlers,
          this.inheritableHandlers,
          this.tags,
          this.inheritableTags,
          this.metadata,
          this.inheritableMetadata,
          this._parentRunId
        );
      })
    );
  }
  async handleChatModelStart(
    llm,
    messages,
    _runId = void 0,
    _parentRunId = void 0,
    extraParams = void 0,
    _tags = void 0,
    _metadata = void 0,
    runName = void 0
  ) {
    return Promise.all(
      messages.map(async (messageGroup) => {
        const runId = v4_default();
        await Promise.all(
          this.handlers.map((handler) =>
            consumeCallback(async () => {
              var _a4, _b;
              if (!handler.ignoreLLM) {
                try {
                  if (handler.handleChatModelStart) {
                    await ((_a4 = handler.handleChatModelStart) == null
                      ? void 0
                      : _a4.call(
                          handler,
                          llm,
                          [messageGroup],
                          runId,
                          this._parentRunId,
                          extraParams,
                          this.tags,
                          this.metadata,
                          runName
                        ));
                  } else if (handler.handleLLMStart) {
                    const messageString = getBufferString(messageGroup);
                    await ((_b = handler.handleLLMStart) == null
                      ? void 0
                      : _b.call(
                          handler,
                          llm,
                          [messageString],
                          runId,
                          this._parentRunId,
                          extraParams,
                          this.tags,
                          this.metadata,
                          runName
                        ));
                  }
                } catch (err) {
                  console.error(
                    `Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`
                  );
                }
              }
            }, handler.awaitHandlers)
          )
        );
        return new CallbackManagerForLLMRun(
          runId,
          this.handlers,
          this.inheritableHandlers,
          this.tags,
          this.inheritableTags,
          this.metadata,
          this.inheritableMetadata,
          this._parentRunId
        );
      })
    );
  }
  async handleChainStart(
    chain,
    inputs,
    runId = v4_default(),
    runType = void 0,
    _tags = void 0,
    _metadata = void 0,
    runName = void 0
  ) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreChain) {
            try {
              await ((_a4 = handler.handleChainStart) == null
                ? void 0
                : _a4.call(
                    handler,
                    chain,
                    inputs,
                    runId,
                    this._parentRunId,
                    this.tags,
                    this.metadata,
                    runType,
                    runName
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleChainStart: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
    return new CallbackManagerForChainRun(
      runId,
      this.handlers,
      this.inheritableHandlers,
      this.tags,
      this.inheritableTags,
      this.metadata,
      this.inheritableMetadata,
      this._parentRunId
    );
  }
  async handleToolStart(
    tool,
    input,
    runId = v4_default(),
    _parentRunId = void 0,
    _tags = void 0,
    _metadata = void 0,
    runName = void 0
  ) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreAgent) {
            try {
              await ((_a4 = handler.handleToolStart) == null
                ? void 0
                : _a4.call(
                    handler,
                    tool,
                    input,
                    runId,
                    this._parentRunId,
                    this.tags,
                    this.metadata,
                    runName
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleToolStart: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
    return new CallbackManagerForToolRun(
      runId,
      this.handlers,
      this.inheritableHandlers,
      this.tags,
      this.inheritableTags,
      this.metadata,
      this.inheritableMetadata,
      this._parentRunId
    );
  }
  async handleRetrieverStart(
    retriever,
    query,
    runId = v4_default(),
    _parentRunId = void 0,
    _tags = void 0,
    _metadata = void 0,
    runName = void 0
  ) {
    await Promise.all(
      this.handlers.map((handler) =>
        consumeCallback(async () => {
          var _a4;
          if (!handler.ignoreRetriever) {
            try {
              await ((_a4 = handler.handleRetrieverStart) == null
                ? void 0
                : _a4.call(
                    handler,
                    retriever,
                    query,
                    runId,
                    this._parentRunId,
                    this.tags,
                    this.metadata,
                    runName
                  ));
            } catch (err) {
              console.error(
                `Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`
              );
            }
          }
        }, handler.awaitHandlers)
      )
    );
    return new CallbackManagerForRetrieverRun(
      runId,
      this.handlers,
      this.inheritableHandlers,
      this.tags,
      this.inheritableTags,
      this.metadata,
      this.inheritableMetadata,
      this._parentRunId
    );
  }
  addHandler(handler, inherit = true) {
    this.handlers.push(handler);
    if (inherit) {
      this.inheritableHandlers.push(handler);
    }
  }
  removeHandler(handler) {
    this.handlers = this.handlers.filter((_handler) => _handler !== handler);
    this.inheritableHandlers = this.inheritableHandlers.filter(
      (_handler) => _handler !== handler
    );
  }
  setHandlers(handlers, inherit = true) {
    this.handlers = [];
    this.inheritableHandlers = [];
    for (const handler of handlers) {
      this.addHandler(handler, inherit);
    }
  }
  addTags(tags, inherit = true) {
    this.removeTags(tags);
    this.tags.push(...tags);
    if (inherit) {
      this.inheritableTags.push(...tags);
    }
  }
  removeTags(tags) {
    this.tags = this.tags.filter((tag) => !tags.includes(tag));
    this.inheritableTags = this.inheritableTags.filter(
      (tag) => !tags.includes(tag)
    );
  }
  addMetadata(metadata, inherit = true) {
    this.metadata = { ...this.metadata, ...metadata };
    if (inherit) {
      this.inheritableMetadata = { ...this.inheritableMetadata, ...metadata };
    }
  }
  removeMetadata(metadata) {
    for (const key of Object.keys(metadata)) {
      delete this.metadata[key];
      delete this.inheritableMetadata[key];
    }
  }
  copy(additionalHandlers = [], inherit = true) {
    const manager = new CallbackManager(this._parentRunId);
    for (const handler of this.handlers) {
      const inheritable = this.inheritableHandlers.includes(handler);
      manager.addHandler(handler, inheritable);
    }
    for (const tag of this.tags) {
      const inheritable = this.inheritableTags.includes(tag);
      manager.addTags([tag], inheritable);
    }
    for (const key of Object.keys(this.metadata)) {
      const inheritable = Object.keys(this.inheritableMetadata).includes(key);
      manager.addMetadata({ [key]: this.metadata[key] }, inheritable);
    }
    for (const handler of additionalHandlers) {
      if (
        manager.handlers
          .filter((h) => h.name === "console_callback_handler")
          .some((h) => h.name === handler.name)
      ) {
        continue;
      }
      manager.addHandler(handler, inherit);
    }
    return manager;
  }
  static fromHandlers(handlers) {
    class Handler extends BaseCallbackHandler {
      constructor() {
        super();
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: v4_default(),
        });
        Object.assign(this, handlers);
      }
    }
    const manager = new this();
    manager.addHandler(new Handler());
    return manager;
  }
  static async configure(
    inheritableHandlers,
    localHandlers,
    inheritableTags,
    localTags,
    inheritableMetadata,
    localMetadata,
    options
  ) {
    var _a4, _b;
    let callbackManager;
    if (inheritableHandlers || localHandlers) {
      if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {
        callbackManager = new CallbackManager();
        callbackManager.setHandlers(
          (_a4 =
            inheritableHandlers == null
              ? void 0
              : inheritableHandlers.map(ensureHandler)) != null
            ? _a4
            : [],
          true
        );
      } else {
        callbackManager = inheritableHandlers;
      }
      callbackManager = callbackManager.copy(
        Array.isArray(localHandlers)
          ? localHandlers.map(ensureHandler)
          : localHandlers == null
          ? void 0
          : localHandlers.handlers,
        false
      );
    }
    const verboseEnabled =
      getEnvironmentVariable2("LANGCHAIN_VERBOSE") === "true" ||
      (options == null ? void 0 : options.verbose);
    const tracingV2Enabled =
      getEnvironmentVariable2("LANGCHAIN_TRACING_V2") === "true";
    const tracingEnabled =
      tracingV2Enabled ||
      ((_b = getEnvironmentVariable2("LANGCHAIN_TRACING")) != null
        ? _b
        : false);
    if (verboseEnabled || tracingEnabled) {
      if (!callbackManager) {
        callbackManager = new CallbackManager();
      }
      if (
        verboseEnabled &&
        !callbackManager.handlers.some(
          (handler) => handler.name === ConsoleCallbackHandler.prototype.name
        )
      ) {
        const consoleHandler = new ConsoleCallbackHandler();
        callbackManager.addHandler(consoleHandler, true);
      }
      if (
        tracingEnabled &&
        !callbackManager.handlers.some(
          (handler) => handler.name === "langchain_tracer"
        )
      ) {
        if (tracingV2Enabled) {
          callbackManager.addHandler(await getTracingV2CallbackHandler(), true);
        } else {
          const session =
            getEnvironmentVariable2("LANGCHAIN_PROJECT") &&
            getEnvironmentVariable2("LANGCHAIN_SESSION");
          callbackManager.addHandler(
            await getTracingCallbackHandler(session),
            true
          );
        }
      }
    }
    if (inheritableTags || localTags) {
      if (callbackManager) {
        callbackManager.addTags(inheritableTags != null ? inheritableTags : []);
        callbackManager.addTags(localTags != null ? localTags : [], false);
      }
    }
    if (inheritableMetadata || localMetadata) {
      if (callbackManager) {
        callbackManager.addMetadata(
          inheritableMetadata != null ? inheritableMetadata : {}
        );
        callbackManager.addMetadata(
          localMetadata != null ? localMetadata : {},
          false
        );
      }
    }
    return callbackManager;
  }
};
function ensureHandler(handler) {
  if ("name" in handler) {
    return handler;
  }
  return BaseCallbackHandler.fromMethods(handler);
}

// ../../../../../../../../node_modules/langchain/dist/schema/runnable/base.js
var import_p_retry3 = __toESM(require_p_retry(), 1);

// ../../../../../../../../node_modules/langchain/dist/util/fast-json-patch/src/core.js
var core_exports = {};
__export(core_exports, {
  JsonPatchError: () => JsonPatchError,
  _areEquals: () => _areEquals,
  applyOperation: () => applyOperation,
  applyPatch: () => applyPatch,
  applyReducer: () => applyReducer,
  deepClone: () => deepClone,
  getValueByPointer: () => getValueByPointer,
  validate: () => validate2,
  validator: () => validator,
});

// ../../../../../../../../node_modules/langchain/dist/util/fast-json-patch/src/helpers.js
var _hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwnProperty(obj, key) {
  return _hasOwnProperty.call(obj, key);
}
function _objectKeys(obj) {
  if (Array.isArray(obj)) {
    const keys2 = new Array(obj.length);
    for (let k = 0; k < keys2.length; k++) {
      keys2[k] = "" + k;
    }
    return keys2;
  }
  if (Object.keys) {
    return Object.keys(obj);
  }
  let keys = [];
  for (let i in obj) {
    if (hasOwnProperty(obj, i)) {
      keys.push(i);
    }
  }
  return keys;
}
function _deepClone(obj) {
  switch (typeof obj) {
    case "object":
      return JSON.parse(JSON.stringify(obj));
    case "undefined":
      return null;
    default:
      return obj;
  }
}
function isInteger(str3) {
  let i = 0;
  const len = str3.length;
  let charCode;
  while (i < len) {
    charCode = str3.charCodeAt(i);
    if (charCode >= 48 && charCode <= 57) {
      i++;
      continue;
    }
    return false;
  }
  return true;
}
function escapePathComponent(path) {
  if (path.indexOf("/") === -1 && path.indexOf("~") === -1) return path;
  return path.replace(/~/g, "~0").replace(/\//g, "~1");
}
function unescapePathComponent(path) {
  return path.replace(/~1/g, "/").replace(/~0/g, "~");
}
function hasUndefined(obj) {
  if (obj === void 0) {
    return true;
  }
  if (obj) {
    if (Array.isArray(obj)) {
      for (let i2 = 0, len = obj.length; i2 < len; i2++) {
        if (hasUndefined(obj[i2])) {
          return true;
        }
      }
    } else if (typeof obj === "object") {
      const objKeys = _objectKeys(obj);
      const objKeysLength = objKeys.length;
      for (var i = 0; i < objKeysLength; i++) {
        if (hasUndefined(obj[objKeys[i]])) {
          return true;
        }
      }
    }
  }
  return false;
}
function patchErrorMessageFormatter(message, args) {
  const messageParts = [message];
  for (const key in args) {
    const value =
      typeof args[key] === "object"
        ? JSON.stringify(args[key], null, 2)
        : args[key];
    if (typeof value !== "undefined") {
      messageParts.push(`${key}: ${value}`);
    }
  }
  return messageParts.join("\n");
}
var PatchError = class extends Error {
  constructor(message, name, index, operation, tree) {
    super(
      patchErrorMessageFormatter(message, { name, index, operation, tree })
    );
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: name,
    });
    Object.defineProperty(this, "index", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: index,
    });
    Object.defineProperty(this, "operation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: operation,
    });
    Object.defineProperty(this, "tree", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: tree,
    });
    Object.setPrototypeOf(this, new.target.prototype);
    this.message = patchErrorMessageFormatter(message, {
      name,
      index,
      operation,
      tree,
    });
  }
};

// ../../../../../../../../node_modules/langchain/dist/util/fast-json-patch/src/core.js
var JsonPatchError = PatchError;
var deepClone = _deepClone;
var objOps = {
  add: function (obj, key, document) {
    obj[key] = this.value;
    return { newDocument: document };
  },
  remove: function (obj, key, document) {
    var removed = obj[key];
    delete obj[key];
    return { newDocument: document, removed };
  },
  replace: function (obj, key, document) {
    var removed = obj[key];
    obj[key] = this.value;
    return { newDocument: document, removed };
  },
  move: function (obj, key, document) {
    let removed = getValueByPointer(document, this.path);
    if (removed) {
      removed = _deepClone(removed);
    }
    const originalValue = applyOperation(document, {
      op: "remove",
      path: this.from,
    }).removed;
    applyOperation(document, {
      op: "add",
      path: this.path,
      value: originalValue,
    });
    return { newDocument: document, removed };
  },
  copy: function (obj, key, document) {
    const valueToCopy = getValueByPointer(document, this.from);
    applyOperation(document, {
      op: "add",
      path: this.path,
      value: _deepClone(valueToCopy),
    });
    return { newDocument: document };
  },
  test: function (obj, key, document) {
    return { newDocument: document, test: _areEquals(obj[key], this.value) };
  },
  _get: function (obj, key, document) {
    this.value = obj[key];
    return { newDocument: document };
  },
};
var arrOps = {
  add: function (arr, i, document) {
    if (isInteger(i)) {
      arr.splice(i, 0, this.value);
    } else {
      arr[i] = this.value;
    }
    return { newDocument: document, index: i };
  },
  remove: function (arr, i, document) {
    var removedList = arr.splice(i, 1);
    return { newDocument: document, removed: removedList[0] };
  },
  replace: function (arr, i, document) {
    var removed = arr[i];
    arr[i] = this.value;
    return { newDocument: document, removed };
  },
  move: objOps.move,
  copy: objOps.copy,
  test: objOps.test,
  _get: objOps._get,
};
function getValueByPointer(document, pointer) {
  if (pointer == "") {
    return document;
  }
  var getOriginalDestination = { op: "_get", path: pointer };
  applyOperation(document, getOriginalDestination);
  return getOriginalDestination.value;
}
function applyOperation(
  document,
  operation,
  validateOperation = false,
  mutateDocument = true,
  banPrototypeModifications = true,
  index = 0
) {
  if (validateOperation) {
    if (typeof validateOperation == "function") {
      validateOperation(operation, 0, document, operation.path);
    } else {
      validator(operation, 0);
    }
  }
  if (operation.path === "") {
    let returnValue = { newDocument: document };
    if (operation.op === "add") {
      returnValue.newDocument = operation.value;
      return returnValue;
    } else if (operation.op === "replace") {
      returnValue.newDocument = operation.value;
      returnValue.removed = document;
      return returnValue;
    } else if (operation.op === "move" || operation.op === "copy") {
      returnValue.newDocument = getValueByPointer(document, operation.from);
      if (operation.op === "move") {
        returnValue.removed = document;
      }
      return returnValue;
    } else if (operation.op === "test") {
      returnValue.test = _areEquals(document, operation.value);
      if (returnValue.test === false) {
        throw new JsonPatchError(
          "Test operation failed",
          "TEST_OPERATION_FAILED",
          index,
          operation,
          document
        );
      }
      returnValue.newDocument = document;
      return returnValue;
    } else if (operation.op === "remove") {
      returnValue.removed = document;
      returnValue.newDocument = null;
      return returnValue;
    } else if (operation.op === "_get") {
      operation.value = document;
      return returnValue;
    } else {
      if (validateOperation) {
        throw new JsonPatchError(
          "Operation `op` property is not one of operations defined in RFC-6902",
          "OPERATION_OP_INVALID",
          index,
          operation,
          document
        );
      } else {
        return returnValue;
      }
    }
  } else {
    if (!mutateDocument) {
      document = _deepClone(document);
    }
    const path = operation.path || "";
    const keys = path.split("/");
    let obj = document;
    let t = 1;
    let len = keys.length;
    let existingPathFragment = void 0;
    let key;
    let validateFunction;
    if (typeof validateOperation == "function") {
      validateFunction = validateOperation;
    } else {
      validateFunction = validator;
    }
    while (true) {
      key = keys[t];
      if (key && key.indexOf("~") != -1) {
        key = unescapePathComponent(key);
      }
      if (
        banPrototypeModifications &&
        (key == "__proto__" ||
          (key == "prototype" && t > 0 && keys[t - 1] == "constructor"))
      ) {
        throw new TypeError(
          "JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README"
        );
      }
      if (validateOperation) {
        if (existingPathFragment === void 0) {
          if (obj[key] === void 0) {
            existingPathFragment = keys.slice(0, t).join("/");
          } else if (t == len - 1) {
            existingPathFragment = operation.path;
          }
          if (existingPathFragment !== void 0) {
            validateFunction(operation, 0, document, existingPathFragment);
          }
        }
      }
      t++;
      if (Array.isArray(obj)) {
        if (key === "-") {
          key = obj.length;
        } else {
          if (validateOperation && !isInteger(key)) {
            throw new JsonPatchError(
              "Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index",
              "OPERATION_PATH_ILLEGAL_ARRAY_INDEX",
              index,
              operation,
              document
            );
          } else if (isInteger(key)) {
            key = ~~key;
          }
        }
        if (t >= len) {
          if (validateOperation && operation.op === "add" && key > obj.length) {
            throw new JsonPatchError(
              "The specified index MUST NOT be greater than the number of elements in the array",
              "OPERATION_VALUE_OUT_OF_BOUNDS",
              index,
              operation,
              document
            );
          }
          const returnValue = arrOps[operation.op].call(
            operation,
            obj,
            key,
            document
          );
          if (returnValue.test === false) {
            throw new JsonPatchError(
              "Test operation failed",
              "TEST_OPERATION_FAILED",
              index,
              operation,
              document
            );
          }
          return returnValue;
        }
      } else {
        if (t >= len) {
          const returnValue = objOps[operation.op].call(
            operation,
            obj,
            key,
            document
          );
          if (returnValue.test === false) {
            throw new JsonPatchError(
              "Test operation failed",
              "TEST_OPERATION_FAILED",
              index,
              operation,
              document
            );
          }
          return returnValue;
        }
      }
      obj = obj[key];
      if (validateOperation && t < len && (!obj || typeof obj !== "object")) {
        throw new JsonPatchError(
          "Cannot perform operation at the desired path",
          "OPERATION_PATH_UNRESOLVABLE",
          index,
          operation,
          document
        );
      }
    }
  }
}
function applyPatch(
  document,
  patch,
  validateOperation,
  mutateDocument = true,
  banPrototypeModifications = true
) {
  if (validateOperation) {
    if (!Array.isArray(patch)) {
      throw new JsonPatchError(
        "Patch sequence must be an array",
        "SEQUENCE_NOT_AN_ARRAY"
      );
    }
  }
  if (!mutateDocument) {
    document = _deepClone(document);
  }
  const results = new Array(patch.length);
  for (let i = 0, length = patch.length; i < length; i++) {
    results[i] = applyOperation(
      document,
      patch[i],
      validateOperation,
      true,
      banPrototypeModifications,
      i
    );
    document = results[i].newDocument;
  }
  results.newDocument = document;
  return results;
}
function applyReducer(document, operation, index) {
  const operationResult = applyOperation(document, operation);
  if (operationResult.test === false) {
    throw new JsonPatchError(
      "Test operation failed",
      "TEST_OPERATION_FAILED",
      index,
      operation,
      document
    );
  }
  return operationResult.newDocument;
}
function validator(operation, index, document, existingPathFragment) {
  if (
    typeof operation !== "object" ||
    operation === null ||
    Array.isArray(operation)
  ) {
    throw new JsonPatchError(
      "Operation is not an object",
      "OPERATION_NOT_AN_OBJECT",
      index,
      operation,
      document
    );
  } else if (!objOps[operation.op]) {
    throw new JsonPatchError(
      "Operation `op` property is not one of operations defined in RFC-6902",
      "OPERATION_OP_INVALID",
      index,
      operation,
      document
    );
  } else if (typeof operation.path !== "string") {
    throw new JsonPatchError(
      "Operation `path` property is not a string",
      "OPERATION_PATH_INVALID",
      index,
      operation,
      document
    );
  } else if (operation.path.indexOf("/") !== 0 && operation.path.length > 0) {
    throw new JsonPatchError(
      'Operation `path` property must start with "/"',
      "OPERATION_PATH_INVALID",
      index,
      operation,
      document
    );
  } else if (
    (operation.op === "move" || operation.op === "copy") &&
    typeof operation.from !== "string"
  ) {
    throw new JsonPatchError(
      "Operation `from` property is not present (applicable in `move` and `copy` operations)",
      "OPERATION_FROM_REQUIRED",
      index,
      operation,
      document
    );
  } else if (
    (operation.op === "add" ||
      operation.op === "replace" ||
      operation.op === "test") &&
    operation.value === void 0
  ) {
    throw new JsonPatchError(
      "Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)",
      "OPERATION_VALUE_REQUIRED",
      index,
      operation,
      document
    );
  } else if (
    (operation.op === "add" ||
      operation.op === "replace" ||
      operation.op === "test") &&
    hasUndefined(operation.value)
  ) {
    throw new JsonPatchError(
      "Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)",
      "OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED",
      index,
      operation,
      document
    );
  } else if (document) {
    if (operation.op == "add") {
      var pathLen = operation.path.split("/").length;
      var existingPathLen = existingPathFragment.split("/").length;
      if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
        throw new JsonPatchError(
          "Cannot perform an `add` operation at the desired path",
          "OPERATION_PATH_CANNOT_ADD",
          index,
          operation,
          document
        );
      }
    } else if (
      operation.op === "replace" ||
      operation.op === "remove" ||
      operation.op === "_get"
    ) {
      if (operation.path !== existingPathFragment) {
        throw new JsonPatchError(
          "Cannot perform the operation at a path that does not exist",
          "OPERATION_PATH_UNRESOLVABLE",
          index,
          operation,
          document
        );
      }
    } else if (operation.op === "move" || operation.op === "copy") {
      var existingValue = {
        op: "_get",
        path: operation.from,
        value: void 0,
      };
      var error = validate2([existingValue], document);
      if (error && error.name === "OPERATION_PATH_UNRESOLVABLE") {
        throw new JsonPatchError(
          "Cannot perform the operation from a path that does not exist",
          "OPERATION_FROM_UNRESOLVABLE",
          index,
          operation,
          document
        );
      }
    }
  }
}
function validate2(sequence, document, externalValidator) {
  try {
    if (!Array.isArray(sequence)) {
      throw new JsonPatchError(
        "Patch sequence must be an array",
        "SEQUENCE_NOT_AN_ARRAY"
      );
    }
    if (document) {
      applyPatch(
        _deepClone(document),
        _deepClone(sequence),
        externalValidator || true
      );
    } else {
      externalValidator = externalValidator || validator;
      for (var i = 0; i < sequence.length; i++) {
        externalValidator(sequence[i], i, document, void 0);
      }
    }
  } catch (e) {
    if (e instanceof JsonPatchError) {
      return e;
    } else {
      throw e;
    }
  }
}
function _areEquals(a, b) {
  if (a === b) return true;
  if (a && b && typeof a == "object" && typeof b == "object") {
    var arrA = Array.isArray(a),
      arrB = Array.isArray(b),
      i,
      length,
      key;
    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0; ) if (!_areEquals(a[i], b[i])) return false;
      return true;
    }
    if (arrA != arrB) return false;
    var keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;
    for (i = length; i-- !== 0; ) if (!b.hasOwnProperty(keys[i])) return false;
    for (i = length; i-- !== 0; ) {
      key = keys[i];
      if (!_areEquals(a[key], b[key])) return false;
    }
    return true;
  }
  return a !== a && b !== b;
}

// ../../../../../../../../node_modules/langchain/dist/util/fast-json-patch/index.js
var fast_json_patch_default = {
  ...core_exports,
  JsonPatchError: PatchError,
  deepClone: _deepClone,
  escapePathComponent,
  unescapePathComponent,
};

// ../../../../../../../../node_modules/langchain/dist/util/stream.js
var IterableReadableStream = class extends ReadableStream {
  constructor() {
    super(...arguments);
    Object.defineProperty(this, "reader", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
  }
  ensureReader() {
    if (!this.reader) {
      this.reader = this.getReader();
    }
  }
  async next() {
    this.ensureReader();
    try {
      const result = await this.reader.read();
      if (result.done) this.reader.releaseLock();
      return {
        done: result.done,
        value: result.value,
      };
    } catch (e) {
      this.reader.releaseLock();
      throw e;
    }
  }
  async return() {
    this.ensureReader();
    const cancelPromise = this.reader.cancel();
    this.reader.releaseLock();
    await cancelPromise;
    return { done: true, value: void 0 };
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  static fromReadableStream(stream) {
    const reader = stream.getReader();
    return new IterableReadableStream({
      start(controller) {
        return pump();
        function pump() {
          return reader.read().then(({ done, value }) => {
            if (done) {
              controller.close();
              return;
            }
            controller.enqueue(value);
            return pump();
          });
        }
      },
      cancel() {
        reader.releaseLock();
      },
    });
  }
  static fromAsyncGenerator(generator) {
    return new IterableReadableStream({
      async pull(controller) {
        const { value, done } = await generator.next();
        if (done) {
          controller.close();
        }
        controller.enqueue(value);
      },
    });
  }
};

// ../../../../../../../../node_modules/langchain/dist/callbacks/handlers/log_stream.js
var RunLogPatch = class {
  constructor(fields) {
    Object.defineProperty(this, "ops", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.ops = fields.ops;
  }
  concat(other) {
    const ops = this.ops.concat(other.ops);
    const states = applyPatch({}, ops);
    return new RunLog({
      ops,
      state: states[states.length - 1].newDocument,
    });
  }
};
var RunLog = class extends RunLogPatch {
  constructor(fields) {
    super(fields);
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.state = fields.state;
  }
  concat(other) {
    const ops = this.ops.concat(other.ops);
    const states = applyPatch(this.state, other.ops);
    return new RunLog({ ops, state: states[states.length - 1].newDocument });
  }
};
var LogStreamCallbackHandler = class extends BaseTracer {
  constructor(fields) {
    var _a4;
    super(fields);
    Object.defineProperty(this, "autoClose", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
    Object.defineProperty(this, "includeNames", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "includeTypes", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "includeTags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "excludeNames", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "excludeTypes", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "excludeTags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "keyMapByRunId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {},
    });
    Object.defineProperty(this, "counterMapByRunName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {},
    });
    Object.defineProperty(this, "transformStream", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "writer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "receiveStream", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "log_stream_tracer",
    });
    this.autoClose =
      (_a4 = fields == null ? void 0 : fields.autoClose) != null ? _a4 : true;
    this.includeNames = fields == null ? void 0 : fields.includeNames;
    this.includeTypes = fields == null ? void 0 : fields.includeTypes;
    this.includeTags = fields == null ? void 0 : fields.includeTags;
    this.excludeNames = fields == null ? void 0 : fields.excludeNames;
    this.excludeTypes = fields == null ? void 0 : fields.excludeTypes;
    this.excludeTags = fields == null ? void 0 : fields.excludeTags;
    this.transformStream = new TransformStream();
    this.writer = this.transformStream.writable.getWriter();
    this.receiveStream = IterableReadableStream.fromReadableStream(
      this.transformStream.readable
    );
  }
  [Symbol.asyncIterator]() {
    return this.receiveStream;
  }
  async persistRun(_run) {}
  _includeRun(run) {
    var _a4;
    if (run.parent_run_id === void 0) {
      return false;
    }
    const runTags = (_a4 = run.tags) != null ? _a4 : [];
    let include =
      this.includeNames === void 0 &&
      this.includeTags === void 0 &&
      this.includeTypes === void 0;
    if (this.includeNames !== void 0) {
      include = include || this.includeNames.includes(run.name);
    }
    if (this.includeTypes !== void 0) {
      include = include || this.includeTypes.includes(run.run_type);
    }
    if (this.includeTags !== void 0) {
      include =
        include ||
        runTags.find((tag) => {
          var _a5;
          return (_a5 = this.includeTags) == null ? void 0 : _a5.includes(tag);
        }) !== void 0;
    }
    if (this.excludeNames !== void 0) {
      include = include && !this.excludeNames.includes(run.name);
    }
    if (this.excludeTypes !== void 0) {
      include = include && !this.excludeTypes.includes(run.run_type);
    }
    if (this.excludeTags !== void 0) {
      include =
        include &&
        runTags.every((tag) => {
          var _a5;
          return !((_a5 = this.excludeTags) == null
            ? void 0
            : _a5.includes(tag));
        });
    }
    return include;
  }
  async onRunCreate(run) {
    var _a4, _b, _c;
    if (run.parent_run_id === void 0) {
      await this.writer.write(
        new RunLogPatch({
          ops: [
            {
              op: "replace",
              path: "",
              value: {
                id: run.id,
                streamed_output: [],
                final_output: void 0,
                logs: {},
              },
            },
          ],
        })
      );
    }
    if (!this._includeRun(run)) {
      return;
    }
    if (this.counterMapByRunName[run.name] === void 0) {
      this.counterMapByRunName[run.name] = 0;
    }
    this.counterMapByRunName[run.name] += 1;
    const count = this.counterMapByRunName[run.name];
    this.keyMapByRunId[run.id] =
      count === 1 ? run.name : `${run.name}:${count}`;
    const logEntry = {
      id: run.id,
      name: run.name,
      type: run.run_type,
      tags: (_a4 = run.tags) != null ? _a4 : [],
      metadata:
        (_c = (_b = run.extra) == null ? void 0 : _b.metadata) != null
          ? _c
          : {},
      start_time: new Date(run.start_time).toISOString(),
      streamed_output_str: [],
      final_output: void 0,
      end_time: void 0,
    };
    await this.writer.write(
      new RunLogPatch({
        ops: [
          {
            op: "add",
            path: `/logs/${this.keyMapByRunId[run.id]}`,
            value: logEntry,
          },
        ],
      })
    );
  }
  async onRunUpdate(run) {
    try {
      const runName = this.keyMapByRunId[run.id];
      if (runName === void 0) {
        return;
      }
      const ops = [
        {
          op: "add",
          path: `/logs/${runName}/final_output`,
          value: run.outputs,
        },
      ];
      if (run.end_time !== void 0) {
        ops.push({
          op: "add",
          path: `/logs/${runName}/end_time`,
          value: new Date(run.end_time).toISOString(),
        });
      }
      const patch = new RunLogPatch({ ops });
      await this.writer.write(patch);
    } finally {
      if (run.parent_run_id === void 0) {
        const patch = new RunLogPatch({
          ops: [
            {
              op: "replace",
              path: "/final_output",
              value: run.outputs,
            },
          ],
        });
        await this.writer.write(patch);
        if (this.autoClose) {
          await this.writer.close();
        }
      }
    }
  }
  async onLLMNewToken(run, token) {
    const runName = this.keyMapByRunId[run.id];
    if (runName === void 0) {
      return;
    }
    const patch = new RunLogPatch({
      ops: [
        {
          op: "add",
          path: `/logs/${runName}/streamed_output_str/-`,
          value: token,
        },
      ],
    });
    await this.writer.write(patch);
  }
};

// ../../../../../../../../node_modules/langchain/dist/schema/runnable/config.js
async function getCallbackMangerForConfig(config) {
  return CallbackManager.configure(
    config == null ? void 0 : config.callbacks,
    void 0,
    config == null ? void 0 : config.tags,
    void 0,
    config == null ? void 0 : config.metadata
  );
}

// ../../../../../../../../node_modules/langchain/dist/util/async_caller.js
var import_p_retry2 = __toESM(require_p_retry(), 1);
var import_p_queue3 = __toESM(require_dist(), 1);
var STATUS_NO_RETRY2 = [400, 401, 402, 403, 404, 405, 406, 407, 408, 409];
var defaultFailedAttemptHandler = (error) => {
  var _a4, _b, _c;
  if (
    error.message.startsWith("Cancel") ||
    error.message.startsWith("TimeoutError") ||
    error.name === "TimeoutError" ||
    error.message.startsWith("AbortError") ||
    error.name === "AbortError"
  ) {
    throw error;
  }
  if ((error == null ? void 0 : error.code) === "ECONNABORTED") {
    throw error;
  }
  const status =
    (_b =
      (_a4 = error == null ? void 0 : error.response) == null
        ? void 0
        : _a4.status) != null
      ? _b
      : error == null
      ? void 0
      : error.status;
  if (status && STATUS_NO_RETRY2.includes(+status)) {
    throw error;
  }
  if (
    ((_c = error == null ? void 0 : error.error) == null ? void 0 : _c.code) ===
    "insufficient_quota"
  ) {
    const err = new Error(error == null ? void 0 : error.message);
    err.name = "InsufficientQuotaError";
    throw err;
  }
};
var AsyncCaller2 = class {
  constructor(params) {
    var _a4, _b, _c;
    Object.defineProperty(this, "maxConcurrency", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "maxRetries", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "onFailedAttempt", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "queue", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.maxConcurrency =
      (_a4 = params.maxConcurrency) != null ? _a4 : Infinity;
    this.maxRetries = (_b = params.maxRetries) != null ? _b : 6;
    this.onFailedAttempt =
      (_c = params.onFailedAttempt) != null ? _c : defaultFailedAttemptHandler;
    const PQueue =
      "default" in import_p_queue3.default
        ? import_p_queue3.default.default
        : import_p_queue3.default;
    this.queue = new PQueue({ concurrency: this.maxConcurrency });
  }
  call(callable, ...args) {
    return this.queue.add(
      () =>
        (0, import_p_retry2.default)(
          () =>
            callable(...args).catch((error) => {
              if (error instanceof Error) {
                throw error;
              } else {
                throw new Error(error);
              }
            }),
          {
            onFailedAttempt: this.onFailedAttempt,
            retries: this.maxRetries,
            randomize: true,
          }
        ),
      { throwOnTimeout: true }
    );
  }
  callWithOptions(options, callable, ...args) {
    if (options.signal) {
      return Promise.race([
        this.call(callable, ...args),
        new Promise((_, reject) => {
          var _a4;
          (_a4 = options.signal) == null
            ? void 0
            : _a4.addEventListener("abort", () => {
                reject(new Error("AbortError"));
              });
        }),
      ]);
    }
    return this.call(callable, ...args);
  }
  fetch(...args) {
    return this.call(() =>
      fetch(...args).then((res) => (res.ok ? res : Promise.reject(res)))
    );
  }
};

// ../../../../../../../../node_modules/langchain/dist/schema/runnable/base.js
function _coerceToDict2(value, defaultKey) {
  return value && !Array.isArray(value) && typeof value === "object"
    ? value
    : { [defaultKey]: value };
}
var Runnable = class extends Serializable {
  constructor() {
    super(...arguments);
    Object.defineProperty(this, "lc_runnable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
  }
  bind(kwargs) {
    return new RunnableBinding({ bound: this, kwargs, config: {} });
  }
  map() {
    return new RunnableEach({ bound: this });
  }
  withRetry(fields) {
    return new RunnableRetry({
      bound: this,
      kwargs: {},
      config: {},
      maxAttemptNumber: fields == null ? void 0 : fields.stopAfterAttempt,
      ...fields,
    });
  }
  withConfig(config) {
    return new RunnableBinding({
      bound: this,
      config,
      kwargs: {},
    });
  }
  withFallbacks(fields) {
    return new RunnableWithFallbacks({
      runnable: this,
      fallbacks: fields.fallbacks,
    });
  }
  _getOptionsList(options, length = 0) {
    if (Array.isArray(options)) {
      if (options.length !== length) {
        throw new Error(
          `Passed "options" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`
        );
      }
      return options;
    }
    return Array.from({ length }, () => options);
  }
  async batch(inputs, options, batchOptions) {
    const configList = this._getOptionsList(
      options != null ? options : {},
      inputs.length
    );
    const caller = new AsyncCaller2({
      maxConcurrency:
        batchOptions == null ? void 0 : batchOptions.maxConcurrency,
      onFailedAttempt: (e) => {
        throw e;
      },
    });
    const batchCalls = inputs.map((input, i) =>
      caller.call(async () => {
        try {
          const result = await this.invoke(input, configList[i]);
          return result;
        } catch (e) {
          if (batchOptions == null ? void 0 : batchOptions.returnExceptions) {
            return e;
          }
          throw e;
        }
      })
    );
    return Promise.all(batchCalls);
  }
  async *_streamIterator(input, options) {
    yield this.invoke(input, options);
  }
  async stream(input, options) {
    return IterableReadableStream.fromAsyncGenerator(
      this._streamIterator(input, options)
    );
  }
  _separateRunnableConfigFromCallOptions(options = {}) {
    const runnableConfig = {
      callbacks: options.callbacks,
      tags: options.tags,
      metadata: options.metadata,
      runName: options.runName,
    };
    const callOptions = { ...options };
    delete callOptions.callbacks;
    delete callOptions.tags;
    delete callOptions.metadata;
    delete callOptions.runName;
    return [runnableConfig, callOptions];
  }
  async _callWithConfig(func, input, options) {
    const callbackManager_ = await getCallbackMangerForConfig(options);
    const runManager = await (callbackManager_ == null
      ? void 0
      : callbackManager_.handleChainStart(
          this.toJSON(),
          _coerceToDict2(input, "input"),
          void 0,
          options == null ? void 0 : options.runType,
          void 0,
          void 0,
          options == null ? void 0 : options.runName
        ));
    let output;
    try {
      output = await func.bind(this)(input, options, runManager);
    } catch (e) {
      await (runManager == null ? void 0 : runManager.handleChainError(e));
      throw e;
    }
    await (runManager == null
      ? void 0
      : runManager.handleChainEnd(_coerceToDict2(output, "output")));
    return output;
  }
  async _batchWithConfig(func, inputs, options, batchOptions) {
    const optionsList = this._getOptionsList(
      options != null ? options : {},
      inputs.length
    );
    const callbackManagers = await Promise.all(
      optionsList.map(getCallbackMangerForConfig)
    );
    const runManagers = await Promise.all(
      callbackManagers.map((callbackManager, i) =>
        callbackManager == null
          ? void 0
          : callbackManager.handleChainStart(
              this.toJSON(),
              _coerceToDict2(inputs[i], "input"),
              void 0,
              optionsList[i].runType,
              void 0,
              void 0,
              optionsList[i].runName
            )
      )
    );
    let outputs;
    try {
      outputs = await func(inputs, optionsList, runManagers, batchOptions);
    } catch (e) {
      await Promise.all(
        runManagers.map((runManager) =>
          runManager == null ? void 0 : runManager.handleChainError(e)
        )
      );
      throw e;
    }
    await Promise.all(
      runManagers.map((runManager) =>
        runManager == null
          ? void 0
          : runManager.handleChainEnd(_coerceToDict2(outputs, "output"))
      )
    );
    return outputs;
  }
  async *_transformStreamWithConfig(inputGenerator, transformer, options) {
    let finalInput;
    let finalInputSupported = true;
    let finalOutput;
    let finalOutputSupported = true;
    const callbackManager_ = await getCallbackMangerForConfig(options);
    let runManager;
    const serializedRepresentation = this.toJSON();
    async function* wrapInputForTracing() {
      for await (const chunk of inputGenerator) {
        if (!runManager) {
          runManager = await (callbackManager_ == null
            ? void 0
            : callbackManager_.handleChainStart(
                serializedRepresentation,
                { input: "" },
                void 0,
                options == null ? void 0 : options.runType,
                void 0,
                void 0,
                options == null ? void 0 : options.runName
              ));
        }
        if (finalInputSupported) {
          if (finalInput === void 0) {
            finalInput = chunk;
          } else {
            try {
              finalInput = finalInput.concat(chunk);
            } catch (e) {
              finalInput = void 0;
              finalInputSupported = false;
            }
          }
        }
        yield chunk;
      }
    }
    const wrappedInputGenerator = wrapInputForTracing();
    try {
      const outputIterator = transformer(
        wrappedInputGenerator,
        runManager,
        options
      );
      for await (const chunk of outputIterator) {
        yield chunk;
        if (finalOutputSupported) {
          if (finalOutput === void 0) {
            finalOutput = chunk;
          } else {
            try {
              finalOutput = finalOutput.concat(chunk);
            } catch (e) {
              finalOutput = void 0;
              finalOutputSupported = false;
            }
          }
        }
      }
    } catch (e) {
      await (runManager == null
        ? void 0
        : runManager.handleChainError(e, void 0, void 0, void 0, {
            inputs: _coerceToDict2(finalInput, "input"),
          }));
      throw e;
    }
    await (runManager == null
      ? void 0
      : runManager.handleChainEnd(
          finalOutput != null ? finalOutput : {},
          void 0,
          void 0,
          void 0,
          { inputs: _coerceToDict2(finalInput, "input") }
        ));
  }
  _patchConfig(config = {}, callbackManager = void 0) {
    const newConfig = { ...config };
    if (callbackManager !== void 0) {
      delete newConfig.runName;
      return { ...newConfig, callbacks: callbackManager };
    }
    return newConfig;
  }
  pipe(coerceable) {
    return new RunnableSequence({
      first: this,
      last: _coerceToRunnable(coerceable),
    });
  }
  async *transform(generator, options) {
    let finalChunk;
    for await (const chunk of generator) {
      if (finalChunk === void 0) {
        finalChunk = chunk;
      } else {
        finalChunk = finalChunk.concat(chunk);
      }
    }
    yield* this._streamIterator(finalChunk, options);
  }
  async *streamLog(input, options, streamOptions) {
    const stream = new LogStreamCallbackHandler({
      ...streamOptions,
      autoClose: false,
    });
    const config = options != null ? options : {};
    const { callbacks } = config;
    if (callbacks === void 0) {
      config.callbacks = [stream];
    } else if (Array.isArray(callbacks)) {
      config.callbacks = callbacks.concat([stream]);
    } else {
      const copiedCallbacks = callbacks.copy();
      copiedCallbacks.inheritableHandlers.push(stream);
      config.callbacks = copiedCallbacks;
    }
    const runnableStream = await this.stream(input, config);
    async function consumeRunnableStream() {
      try {
        for await (const chunk of runnableStream) {
          const patch = new RunLogPatch({
            ops: [
              {
                op: "add",
                path: "/streamed_output/-",
                value: chunk,
              },
            ],
          });
          await stream.writer.write(patch);
        }
      } finally {
        await stream.writer.close();
      }
    }
    const runnableStreamPromise = consumeRunnableStream();
    try {
      for await (const log of stream) {
        yield log;
      }
    } finally {
      await runnableStreamPromise;
    }
  }
  static isRunnable(thing) {
    return thing ? thing.lc_runnable : false;
  }
};
var RunnableBinding = class extends Runnable {
  static lc_name() {
    return "RunnableBinding";
  }
  constructor(fields) {
    super(fields);
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "schema", "runnable"],
    });
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
    Object.defineProperty(this, "bound", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "kwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.bound = fields.bound;
    this.kwargs = fields.kwargs;
    this.config = fields.config;
  }
  _mergeConfig(options) {
    var _a4, _b, _c;
    const copy = { ...this.config };
    if (options) {
      for (const key of Object.keys(options)) {
        if (key === "metadata") {
          copy[key] = { ...copy[key], ...options[key] };
        } else if (key === "tags") {
          copy[key] = ((_a4 = copy[key]) != null ? _a4 : []).concat(
            (_b = options[key]) != null ? _b : []
          );
        } else {
          copy[key] = (_c = options[key]) != null ? _c : copy[key];
        }
      }
    }
    return copy;
  }
  bind(kwargs) {
    return this.constructor({
      bound: this.bound,
      kwargs: { ...this.kwargs, ...kwargs },
      config: this.config,
    });
  }
  withConfig(config) {
    return this.constructor({
      bound: this.bound,
      kwargs: this.kwargs,
      config: { ...this.config, ...config },
    });
  }
  withRetry(fields) {
    return this.constructor({
      bound: this.bound.withRetry(fields),
      kwargs: this.kwargs,
      config: this.config,
    });
  }
  async invoke(input, options) {
    return this.bound.invoke(
      input,
      this._mergeConfig({ ...options, ...this.kwargs })
    );
  }
  async batch(inputs, options, batchOptions) {
    const mergedOptions = Array.isArray(options)
      ? options.map((individualOption) =>
          this._mergeConfig({
            ...individualOption,
            ...this.kwargs,
          })
        )
      : this._mergeConfig({ ...options, ...this.kwargs });
    return this.bound.batch(inputs, mergedOptions, batchOptions);
  }
  async *_streamIterator(input, options) {
    yield* this.bound._streamIterator(
      input,
      this._mergeConfig({ ...options, ...this.kwargs })
    );
  }
  async stream(input, options) {
    return this.bound.stream(
      input,
      this._mergeConfig({ ...options, ...this.kwargs })
    );
  }
  async *transform(generator, options) {
    yield* this.bound.transform(
      generator,
      this._mergeConfig({ ...options, ...this.kwargs })
    );
  }
  static isRunnableBinding(thing) {
    return thing.bound && Runnable.isRunnable(thing.bound);
  }
};
var RunnableEach = class extends Runnable {
  static lc_name() {
    return "RunnableEach";
  }
  constructor(fields) {
    super(fields);
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "schema", "runnable"],
    });
    Object.defineProperty(this, "bound", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.bound = fields.bound;
  }
  bind(kwargs) {
    return new RunnableEach({
      bound: this.bound.bind(kwargs),
    });
  }
  async invoke(inputs, config) {
    return this._callWithConfig(this._invoke, inputs, config);
  }
  async _invoke(inputs, config, runManager) {
    return this.bound.batch(
      inputs,
      this._patchConfig(
        config,
        runManager == null ? void 0 : runManager.getChild()
      )
    );
  }
};
var RunnableRetry = class extends RunnableBinding {
  static lc_name() {
    return "RunnableRetry";
  }
  constructor(fields) {
    var _a4, _b;
    super(fields);
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "schema", "runnable"],
    });
    Object.defineProperty(this, "maxAttemptNumber", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 3,
    });
    Object.defineProperty(this, "onFailedAttempt", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {},
    });
    this.maxAttemptNumber =
      (_a4 = fields.maxAttemptNumber) != null ? _a4 : this.maxAttemptNumber;
    this.onFailedAttempt =
      (_b = fields.onFailedAttempt) != null ? _b : this.onFailedAttempt;
  }
  _patchConfigForRetry(attempt, config, runManager) {
    const tag = attempt > 1 ? `retry:attempt:${attempt}` : void 0;
    return this._patchConfig(
      config,
      runManager == null ? void 0 : runManager.getChild(tag)
    );
  }
  async _invoke(input, config, runManager) {
    return (0, import_p_retry3.default)(
      (attemptNumber) =>
        super.invoke(
          input,
          this._patchConfigForRetry(attemptNumber, config, runManager)
        ),
      {
        onFailedAttempt: this.onFailedAttempt,
        retries: Math.max(this.maxAttemptNumber - 1, 0),
        randomize: true,
      }
    );
  }
  async invoke(input, config) {
    return this._callWithConfig(this._invoke, input, config);
  }
  async _batch(inputs, configs, runManagers, batchOptions) {
    const resultsMap = {};
    try {
      await (0, import_p_retry3.default)(
        async (attemptNumber) => {
          const remainingIndexes = inputs
            .map((_, i) => i)
            .filter(
              (i) =>
                resultsMap[i.toString()] === void 0 ||
                resultsMap[i.toString()] instanceof Error
            );
          const remainingInputs = remainingIndexes.map((i) => inputs[i]);
          const patchedConfigs = remainingIndexes.map((i) =>
            this._patchConfigForRetry(
              attemptNumber,
              configs == null ? void 0 : configs[i],
              runManagers == null ? void 0 : runManagers[i]
            )
          );
          const results = await super.batch(remainingInputs, patchedConfigs, {
            ...batchOptions,
            returnExceptions: true,
          });
          let firstException;
          for (let i = 0; i < results.length; i += 1) {
            const result = results[i];
            const resultMapIndex = remainingIndexes[i];
            if (result instanceof Error) {
              if (firstException === void 0) {
                firstException = result;
              }
            }
            resultsMap[resultMapIndex.toString()] = result;
          }
          if (firstException) {
            throw firstException;
          }
          return results;
        },
        {
          onFailedAttempt: this.onFailedAttempt,
          retries: Math.max(this.maxAttemptNumber - 1, 0),
          randomize: true,
        }
      );
    } catch (e) {
      if (
        (batchOptions == null ? void 0 : batchOptions.returnExceptions) !== true
      ) {
        throw e;
      }
    }
    return Object.keys(resultsMap)
      .sort((a, b) => parseInt(a, 10) - parseInt(b, 10))
      .map((key) => resultsMap[parseInt(key, 10)]);
  }
  async batch(inputs, options, batchOptions) {
    return this._batchWithConfig(
      this._batch.bind(this),
      inputs,
      options,
      batchOptions
    );
  }
};
var RunnableSequence = class extends Runnable {
  static lc_name() {
    return "RunnableSequence";
  }
  constructor(fields) {
    var _a4;
    super(fields);
    Object.defineProperty(this, "first", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "middle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: [],
    });
    Object.defineProperty(this, "last", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "schema", "runnable"],
    });
    this.first = fields.first;
    this.middle = (_a4 = fields.middle) != null ? _a4 : this.middle;
    this.last = fields.last;
  }
  get steps() {
    return [this.first, ...this.middle, this.last];
  }
  async invoke(input, options) {
    const callbackManager_ = await getCallbackMangerForConfig(options);
    const runManager = await (callbackManager_ == null
      ? void 0
      : callbackManager_.handleChainStart(
          this.toJSON(),
          _coerceToDict2(input, "input"),
          void 0,
          void 0,
          void 0,
          void 0,
          options == null ? void 0 : options.runName
        ));
    let nextStepInput = input;
    let finalOutput;
    try {
      const initialSteps = [this.first, ...this.middle];
      for (let i = 0; i < initialSteps.length; i += 1) {
        const step = initialSteps[i];
        nextStepInput = await step.invoke(
          nextStepInput,
          this._patchConfig(
            options,
            runManager == null
              ? void 0
              : runManager.getChild(`seq:step:${i + 1}`)
          )
        );
      }
      finalOutput = await this.last.invoke(
        nextStepInput,
        this._patchConfig(
          options,
          runManager == null
            ? void 0
            : runManager.getChild(`seq:step:${this.steps.length}`)
        )
      );
    } catch (e) {
      await (runManager == null ? void 0 : runManager.handleChainError(e));
      throw e;
    }
    await (runManager == null
      ? void 0
      : runManager.handleChainEnd(_coerceToDict2(finalOutput, "output")));
    return finalOutput;
  }
  async batch(inputs, options, batchOptions) {
    const configList = this._getOptionsList(
      options != null ? options : {},
      inputs.length
    );
    const callbackManagers = await Promise.all(
      configList.map(getCallbackMangerForConfig)
    );
    const runManagers = await Promise.all(
      callbackManagers.map((callbackManager, i) =>
        callbackManager == null
          ? void 0
          : callbackManager.handleChainStart(
              this.toJSON(),
              _coerceToDict2(inputs[i], "input"),
              void 0,
              void 0,
              void 0,
              void 0,
              configList[i].runName
            )
      )
    );
    let nextStepInputs = inputs;
    let finalOutputs;
    try {
      const initialSteps = [this.first, ...this.middle];
      for (let i = 0; i < initialSteps.length; i += 1) {
        const step = initialSteps[i];
        nextStepInputs = await step.batch(
          nextStepInputs,
          runManagers.map((runManager, j) =>
            this._patchConfig(
              configList[j],
              runManager == null
                ? void 0
                : runManager.getChild(`seq:step:${i + 1}`)
            )
          ),
          batchOptions
        );
      }
      finalOutputs = await this.last.batch(
        nextStepInputs,
        runManagers.map((runManager) =>
          this._patchConfig(
            configList[this.steps.length - 1],
            runManager == null
              ? void 0
              : runManager.getChild(`seq:step:${this.steps.length}`)
          )
        ),
        batchOptions
      );
    } catch (e) {
      await Promise.all(
        runManagers.map((runManager) =>
          runManager == null ? void 0 : runManager.handleChainError(e)
        )
      );
      throw e;
    }
    await Promise.all(
      runManagers.map((runManager, i) =>
        runManager == null
          ? void 0
          : runManager.handleChainEnd(_coerceToDict2(finalOutputs[i], "output"))
      )
    );
    return finalOutputs;
  }
  async *_streamIterator(input, options) {
    const callbackManager_ = await getCallbackMangerForConfig(options);
    const runManager = await (callbackManager_ == null
      ? void 0
      : callbackManager_.handleChainStart(
          this.toJSON(),
          _coerceToDict2(input, "input"),
          void 0,
          void 0,
          void 0,
          void 0,
          options == null ? void 0 : options.runName
        ));
    let nextStepInput = input;
    const steps = [this.first, ...this.middle, this.last];
    const streamingStartStepIndex = Math.min(
      steps.length - 1,
      steps.length -
        [...steps].reverse().findIndex((step) => {
          var _a4;
          const isDefaultImplementation =
            step.transform === Runnable.prototype.transform;
          const boundRunnableIsDefaultImplementation =
            RunnableBinding.isRunnableBinding(step) &&
            ((_a4 = step.bound) == null ? void 0 : _a4.transform) ===
              Runnable.prototype.transform;
          return (
            isDefaultImplementation || boundRunnableIsDefaultImplementation
          );
        }) -
        1
    );
    try {
      const invokeSteps = steps.slice(0, streamingStartStepIndex);
      for (let i = 0; i < invokeSteps.length; i += 1) {
        const step = invokeSteps[i];
        nextStepInput = await step.invoke(
          nextStepInput,
          this._patchConfig(
            options,
            runManager == null
              ? void 0
              : runManager.getChild(`seq:step:${i + 1}`)
          )
        );
      }
    } catch (e) {
      await (runManager == null ? void 0 : runManager.handleChainError(e));
      throw e;
    }
    let concatSupported = true;
    let finalOutput;
    try {
      let finalGenerator = await steps[streamingStartStepIndex]._streamIterator(
        nextStepInput,
        this._patchConfig(
          options,
          runManager == null
            ? void 0
            : runManager.getChild(`seq:step:${streamingStartStepIndex + 1}`)
        )
      );
      const finalSteps = steps.slice(streamingStartStepIndex + 1);
      for (let i = 0; i < finalSteps.length; i += 1) {
        const step = finalSteps[i];
        finalGenerator = await step.transform(
          finalGenerator,
          this._patchConfig(
            options,
            runManager == null
              ? void 0
              : runManager.getChild(
                  `seq:step:${streamingStartStepIndex + i + 2}`
                )
          )
        );
      }
      for await (const chunk of finalGenerator) {
        yield chunk;
        if (concatSupported) {
          if (finalOutput === void 0) {
            finalOutput = chunk;
          } else {
            try {
              finalOutput = finalOutput.concat(chunk);
            } catch (e) {
              finalOutput = void 0;
              concatSupported = false;
            }
          }
        }
      }
    } catch (e) {
      await (runManager == null ? void 0 : runManager.handleChainError(e));
      throw e;
    }
    await (runManager == null
      ? void 0
      : runManager.handleChainEnd(_coerceToDict2(finalOutput, "output")));
  }
  pipe(coerceable) {
    if (RunnableSequence.isRunnableSequence(coerceable)) {
      return new RunnableSequence({
        first: this.first,
        middle: this.middle.concat([
          this.last,
          coerceable.first,
          ...coerceable.middle,
        ]),
        last: coerceable.last,
      });
    } else {
      return new RunnableSequence({
        first: this.first,
        middle: [...this.middle, this.last],
        last: _coerceToRunnable(coerceable),
      });
    }
  }
  static isRunnableSequence(thing) {
    return Array.isArray(thing.middle) && Runnable.isRunnable(thing);
  }
  static from([first, ...runnables]) {
    return new RunnableSequence({
      first: _coerceToRunnable(first),
      middle: runnables.slice(0, -1).map(_coerceToRunnable),
      last: _coerceToRunnable(runnables[runnables.length - 1]),
    });
  }
};
var RunnableMap = class extends Runnable {
  static lc_name() {
    return "RunnableMap";
  }
  getStepsKeys() {
    return Object.keys(this.steps);
  }
  constructor(fields) {
    super(fields);
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "schema", "runnable"],
    });
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
    Object.defineProperty(this, "steps", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.steps = {};
    for (const [key, value] of Object.entries(fields.steps)) {
      this.steps[key] = _coerceToRunnable(value);
    }
  }
  static from(steps) {
    return new RunnableMap({ steps });
  }
  async invoke(input, options) {
    const callbackManager_ = await getCallbackMangerForConfig(options);
    const runManager = await (callbackManager_ == null
      ? void 0
      : callbackManager_.handleChainStart(
          this.toJSON(),
          {
            input,
          },
          void 0,
          void 0,
          void 0,
          void 0,
          options == null ? void 0 : options.runName
        ));
    const output = {};
    try {
      await Promise.all(
        Object.entries(this.steps).map(async ([key, runnable]) => {
          output[key] = await runnable.invoke(
            input,
            this._patchConfig(
              options,
              runManager == null ? void 0 : runManager.getChild(key)
            )
          );
        })
      );
    } catch (e) {
      await (runManager == null ? void 0 : runManager.handleChainError(e));
      throw e;
    }
    await (runManager == null ? void 0 : runManager.handleChainEnd(output));
    return output;
  }
};
var RunnableLambda = class extends Runnable {
  static lc_name() {
    return "RunnableLambda";
  }
  constructor(fields) {
    super(fields);
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "schema", "runnable"],
    });
    Object.defineProperty(this, "func", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.func = fields.func;
  }
  static from(func) {
    return new RunnableLambda({
      func,
    });
  }
  async _invoke(input, config, runManager) {
    let output = await this.func(input);
    if (output && Runnable.isRunnable(output)) {
      output = await output.invoke(
        input,
        this._patchConfig(
          config,
          runManager == null ? void 0 : runManager.getChild()
        )
      );
    }
    return output;
  }
  async invoke(input, options) {
    return this._callWithConfig(this._invoke, input, options);
  }
};
var RunnableWithFallbacks = class extends Runnable {
  static lc_name() {
    return "RunnableWithFallbacks";
  }
  constructor(fields) {
    super(fields);
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "schema", "runnable"],
    });
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
    Object.defineProperty(this, "runnable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "fallbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.runnable = fields.runnable;
    this.fallbacks = fields.fallbacks;
  }
  *runnables() {
    yield this.runnable;
    for (const fallback of this.fallbacks) {
      yield fallback;
    }
  }
  async invoke(input, options) {
    const callbackManager_ = await CallbackManager.configure(
      options == null ? void 0 : options.callbacks,
      void 0,
      options == null ? void 0 : options.tags,
      void 0,
      options == null ? void 0 : options.metadata
    );
    const runManager = await (callbackManager_ == null
      ? void 0
      : callbackManager_.handleChainStart(
          this.toJSON(),
          _coerceToDict2(input, "input"),
          void 0,
          void 0,
          void 0,
          void 0,
          options == null ? void 0 : options.runName
        ));
    let firstError;
    for (const runnable of this.runnables()) {
      try {
        const output = await runnable.invoke(
          input,
          this._patchConfig(
            options,
            runManager == null ? void 0 : runManager.getChild()
          )
        );
        await (runManager == null
          ? void 0
          : runManager.handleChainEnd(_coerceToDict2(output, "output")));
        return output;
      } catch (e) {
        if (firstError === void 0) {
          firstError = e;
        }
      }
    }
    if (firstError === void 0) {
      throw new Error("No error stored at end of fallback.");
    }
    await (runManager == null
      ? void 0
      : runManager.handleChainError(firstError));
    throw firstError;
  }
  async batch(inputs, options, batchOptions) {
    if (batchOptions == null ? void 0 : batchOptions.returnExceptions) {
      throw new Error("Not implemented.");
    }
    const configList = this._getOptionsList(
      options != null ? options : {},
      inputs.length
    );
    const callbackManagers = await Promise.all(
      configList.map((config) =>
        CallbackManager.configure(
          config == null ? void 0 : config.callbacks,
          void 0,
          config == null ? void 0 : config.tags,
          void 0,
          config == null ? void 0 : config.metadata
        )
      )
    );
    const runManagers = await Promise.all(
      callbackManagers.map((callbackManager, i) =>
        callbackManager == null
          ? void 0
          : callbackManager.handleChainStart(
              this.toJSON(),
              _coerceToDict2(inputs[i], "input"),
              void 0,
              void 0,
              void 0,
              void 0,
              configList[i].runName
            )
      )
    );
    let firstError;
    for (const runnable of this.runnables()) {
      try {
        const outputs = await runnable.batch(
          inputs,
          runManagers.map((runManager, j) =>
            this._patchConfig(
              configList[j],
              runManager == null ? void 0 : runManager.getChild()
            )
          ),
          batchOptions
        );
        await Promise.all(
          runManagers.map((runManager, i) =>
            runManager == null
              ? void 0
              : runManager.handleChainEnd(_coerceToDict2(outputs[i], "output"))
          )
        );
        return outputs;
      } catch (e) {
        if (firstError === void 0) {
          firstError = e;
        }
      }
    }
    if (!firstError) {
      throw new Error("No error stored at end of fallbacks.");
    }
    await Promise.all(
      runManagers.map((runManager) =>
        runManager == null ? void 0 : runManager.handleChainError(firstError)
      )
    );
    throw firstError;
  }
};
function _coerceToRunnable(coerceable) {
  if (typeof coerceable === "function") {
    return new RunnableLambda({ func: coerceable });
  } else if (Runnable.isRunnable(coerceable)) {
    return coerceable;
  } else if (!Array.isArray(coerceable) && typeof coerceable === "object") {
    const runnables = {};
    for (const [key, value] of Object.entries(coerceable)) {
      runnables[key] = _coerceToRunnable(value);
    }
    return new RunnableMap({
      steps: runnables,
    });
  } else {
    throw new Error(`Expected a Runnable, function or object.
Instead got an unsupported type.`);
  }
}

// ../../../../../../../../node_modules/langchain/dist/schema/retriever.js
var BaseRetriever = class extends Runnable {
  constructor(fields) {
    var _a4, _b, _c;
    super(fields);
    Object.defineProperty(this, "callbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "tags", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "metadata", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "verbose", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.callbacks = fields == null ? void 0 : fields.callbacks;
    this.tags =
      (_a4 = fields == null ? void 0 : fields.tags) != null ? _a4 : [];
    this.metadata =
      (_b = fields == null ? void 0 : fields.metadata) != null ? _b : {};
    this.verbose =
      (_c = fields == null ? void 0 : fields.verbose) != null ? _c : false;
  }
  _getRelevantDocuments(_query, _callbacks) {
    throw new Error("Not implemented!");
  }
  async invoke(input, options) {
    return this.getRelevantDocuments(input, options);
  }
  async getRelevantDocuments(query, config) {
    const parsedConfig = parseCallbackConfigArg(config);
    const callbackManager_ = await CallbackManager.configure(
      parsedConfig.callbacks,
      this.callbacks,
      parsedConfig.tags,
      this.tags,
      parsedConfig.metadata,
      this.metadata,
      { verbose: this.verbose }
    );
    const runManager = await (callbackManager_ == null
      ? void 0
      : callbackManager_.handleRetrieverStart(
          this.toJSON(),
          query,
          void 0,
          void 0,
          void 0,
          void 0,
          parsedConfig.runName
        ));
    try {
      const results = await this._getRelevantDocuments(query, runManager);
      await (runManager == null
        ? void 0
        : runManager.handleRetrieverEnd(results));
      return results;
    } catch (error) {
      await (runManager == null
        ? void 0
        : runManager.handleRetrieverError(error));
      throw error;
    }
  }
};

// ../../../../../../../../node_modules/langchain/dist/vectorstores/base.js
var VectorStoreRetriever = class extends BaseRetriever {
  static lc_name() {
    return "VectorStoreRetriever";
  }
  get lc_namespace() {
    return ["langchain", "retrievers", "base"];
  }
  _vectorstoreType() {
    return this.vectorStore._vectorstoreType();
  }
  constructor(fields) {
    var _a4, _b;
    super(fields);
    Object.defineProperty(this, "vectorStore", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "k", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4,
    });
    Object.defineProperty(this, "searchType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "similarity",
    });
    Object.defineProperty(this, "searchKwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "filter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.vectorStore = fields.vectorStore;
    this.k = (_a4 = fields.k) != null ? _a4 : this.k;
    this.searchType = (_b = fields.searchType) != null ? _b : this.searchType;
    this.filter = fields.filter;
    if (fields.searchType === "mmr") {
      this.searchKwargs = fields.searchKwargs;
    }
  }
  async _getRelevantDocuments(query, runManager) {
    if (this.searchType === "mmr") {
      if (typeof this.vectorStore.maxMarginalRelevanceSearch !== "function") {
        throw new Error(
          `The vector store backing this retriever, ${this._vectorstoreType()} does not support max marginal relevance search.`
        );
      }
      return this.vectorStore.maxMarginalRelevanceSearch(
        query,
        {
          k: this.k,
          filter: this.filter,
          ...this.searchKwargs,
        },
        runManager == null ? void 0 : runManager.getChild("vectorstore")
      );
    }
    return this.vectorStore.similaritySearch(
      query,
      this.k,
      this.filter,
      runManager == null ? void 0 : runManager.getChild("vectorstore")
    );
  }
  async addDocuments(documents, options) {
    return this.vectorStore.addDocuments(documents, options);
  }
};
var VectorStore = class extends Serializable {
  constructor(embeddings, dbConfig) {
    super(dbConfig);
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain", "vectorstores", this._vectorstoreType()],
    });
    Object.defineProperty(this, "embeddings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.embeddings = embeddings;
  }
  async delete(_params) {
    throw new Error("Not implemented.");
  }
  async similaritySearch(query, k = 4, filter = void 0, _callbacks = void 0) {
    const results = await this.similaritySearchVectorWithScore(
      await this.embeddings.embedQuery(query),
      k,
      filter
    );
    return results.map((result) => result[0]);
  }
  async similaritySearchWithScore(
    query,
    k = 4,
    filter = void 0,
    _callbacks = void 0
  ) {
    return this.similaritySearchVectorWithScore(
      await this.embeddings.embedQuery(query),
      k,
      filter
    );
  }
  static fromTexts(_texts, _metadatas, _embeddings, _dbConfig) {
    throw new Error(
      "the Langchain vectorstore implementation you are using forgot to override this, please report a bug"
    );
  }
  static fromDocuments(_docs, _embeddings, _dbConfig) {
    throw new Error(
      "the Langchain vectorstore implementation you are using forgot to override this, please report a bug"
    );
  }
  asRetriever(kOrFields, filter, callbacks, tags, metadata, verbose) {
    var _a4;
    if (typeof kOrFields === "number") {
      return new VectorStoreRetriever({
        vectorStore: this,
        k: kOrFields,
        filter,
        tags: [...(tags != null ? tags : []), this._vectorstoreType()],
        metadata,
        verbose,
        callbacks,
      });
    } else {
      const params = {
        vectorStore: this,
        k: kOrFields == null ? void 0 : kOrFields.k,
        filter: kOrFields == null ? void 0 : kOrFields.filter,
        tags: [
          ...((_a4 = kOrFields == null ? void 0 : kOrFields.tags) != null
            ? _a4
            : []),
          this._vectorstoreType(),
        ],
        metadata: kOrFields == null ? void 0 : kOrFields.metadata,
        verbose: kOrFields == null ? void 0 : kOrFields.verbose,
        callbacks: kOrFields == null ? void 0 : kOrFields.callbacks,
        searchType: kOrFields == null ? void 0 : kOrFields.searchType,
      };
      if ((kOrFields == null ? void 0 : kOrFields.searchType) === "mmr") {
        return new VectorStoreRetriever({
          ...params,
          searchKwargs: kOrFields.searchKwargs,
        });
      }
      return new VectorStoreRetriever({ ...params });
    }
  }
};

// ../../../../../../../../node_modules/langchain/dist/document.js
var Document = class {
  constructor(fields) {
    var _a4;
    Object.defineProperty(this, "pageContent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "metadata", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.pageContent = fields.pageContent
      ? fields.pageContent.toString()
      : this.pageContent;
    this.metadata = (_a4 = fields.metadata) != null ? _a4 : {};
  }
};

// ../../../../../../../../node_modules/langchain/dist/vectorstores/memory.js
var MemoryVectorStore = class extends VectorStore {
  _vectorstoreType() {
    return "memory";
  }
  constructor(embeddings, { similarity, ...rest } = {}) {
    super(embeddings, rest);
    Object.defineProperty(this, "memoryVectors", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: [],
    });
    Object.defineProperty(this, "similarity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.similarity =
      similarity != null ? similarity : similarities_exports.cosine;
  }
  async addDocuments(documents) {
    const texts = documents.map(({ pageContent }) => pageContent);
    return this.addVectors(
      await this.embeddings.embedDocuments(texts),
      documents
    );
  }
  async addVectors(vectors, documents) {
    const memoryVectors = vectors.map((embedding, idx) => ({
      content: documents[idx].pageContent,
      embedding,
      metadata: documents[idx].metadata,
    }));
    this.memoryVectors = this.memoryVectors.concat(memoryVectors);
  }
  async similaritySearchVectorWithScore(query, k, filter) {
    const filterFunction = (memoryVector) => {
      if (!filter) {
        return true;
      }
      const doc = new Document({
        metadata: memoryVector.metadata,
        pageContent: memoryVector.content,
      });
      return filter(doc);
    };
    const filteredMemoryVectors = this.memoryVectors.filter(filterFunction);
    const searches = filteredMemoryVectors
      .map((vector, index) => ({
        similarity: this.similarity(query, vector.embedding),
        index,
      }))
      .sort((a, b) => (a.similarity > b.similarity ? -1 : 0))
      .slice(0, k);
    const result = searches.map((search) => [
      new Document({
        metadata: filteredMemoryVectors[search.index].metadata,
        pageContent: filteredMemoryVectors[search.index].content,
      }),
      search.similarity,
    ]);
    return result;
  }
  static async fromTexts(texts, metadatas, embeddings, dbConfig) {
    const docs = [];
    for (let i = 0; i < texts.length; i += 1) {
      const metadata = Array.isArray(metadatas) ? metadatas[i] : metadatas;
      const newDoc = new Document({
        pageContent: texts[i],
        metadata,
      });
      docs.push(newDoc);
    }
    return MemoryVectorStore.fromDocuments(docs, embeddings, dbConfig);
  }
  static async fromDocuments(docs, embeddings, dbConfig) {
    const instance = new this(embeddings, dbConfig);
    await instance.addDocuments(docs);
    return instance;
  }
  static async fromExistingIndex(embeddings, dbConfig) {
    const instance = new this(embeddings, dbConfig);
    return instance;
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/version.mjs
var VERSION = "4.19.0";

// ../../../../../../../../node_modules/langchain/node_modules/openai/_shims/registry.mjs
var auto = false;
var kind = void 0;
var fetch2 = void 0;
var Request2 = void 0;
var Response2 = void 0;
var Headers2 = void 0;
var FormData2 = void 0;
var Blob2 = void 0;
var File2 = void 0;
var ReadableStream2 = void 0;
var getMultipartRequestOptions = void 0;
var getDefaultAgent = void 0;
var fileFromPath = void 0;
var isFsReadStream = void 0;
function setShims(shims, options = { auto: false }) {
  if (auto) {
    throw new Error(
      `you must \`import 'openai/shims/${shims.kind}'\` before importing anything else from openai`
    );
  }
  if (kind) {
    throw new Error(
      `can't \`import 'openai/shims/${shims.kind}'\` after \`import 'openai/shims/${kind}'\``
    );
  }
  auto = options.auto;
  kind = shims.kind;
  fetch2 = shims.fetch;
  Request2 = shims.Request;
  Response2 = shims.Response;
  Headers2 = shims.Headers;
  FormData2 = shims.FormData;
  Blob2 = shims.Blob;
  File2 = shims.File;
  ReadableStream2 = shims.ReadableStream;
  getMultipartRequestOptions = shims.getMultipartRequestOptions;
  getDefaultAgent = shims.getDefaultAgent;
  fileFromPath = shims.fileFromPath;
  isFsReadStream = shims.isFsReadStream;
}

// ../../../../../../../../node_modules/langchain/node_modules/openai/_shims/MultipartBody.mjs
var MultipartBody = class {
  constructor(body) {
    this.body = body;
  }
  get [Symbol.toStringTag]() {
    return "MultipartBody";
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/_shims/web-runtime.mjs
function getRuntime({ manuallyImported } = {}) {
  const recommendation = manuallyImported
    ? `You may need to use polyfills`
    : `Add one of these imports before your first \`import \u2026 from 'openai'\`:
- \`import 'openai/shims/node'\` (if you're running on Node)
- \`import 'openai/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(
      `this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`
    );
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData:
      typeof FormData !== "undefined"
        ? FormData
        : class FormData {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`
              );
            }
          },
    Blob:
      typeof Blob !== "undefined"
        ? Blob
        : class Blob {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`
              );
            }
          },
    File:
      typeof File !== "undefined"
        ? File
        : class File {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`
              );
            }
          },
    ReadableStream:
      typeof ReadableStream !== "undefined"
        ? ReadableStream
        : class ReadableStream {
            constructor() {
              throw new Error(
                `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`
              );
            }
          },
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody(form),
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error(
        "The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads"
      );
    },
    isFsReadStream: (value) => false,
  };
}

// ../../../../../../../../node_modules/langchain/node_modules/openai/_shims/index.mjs
if (!kind) setShims(getRuntime(), { auto: true });

// ../../../../../../../../node_modules/langchain/node_modules/openai/error.mjs
var error_exports = {};
__export(error_exports, {
  APIConnectionError: () => APIConnectionError,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError,
  APIError: () => APIError,
  APIUserAbortError: () => APIUserAbortError,
  AuthenticationError: () => AuthenticationError,
  BadRequestError: () => BadRequestError,
  ConflictError: () => ConflictError,
  InternalServerError: () => InternalServerError,
  NotFoundError: () => NotFoundError,
  OpenAIError: () => OpenAIError,
  PermissionDeniedError: () => PermissionDeniedError,
  RateLimitError: () => RateLimitError,
  UnprocessableEntityError: () => UnprocessableEntityError,
});
var OpenAIError = class extends Error {};
var APIError = class extends OpenAIError {
  constructor(status, error, message, headers) {
    super(`${APIError.makeMessage(status, error, message)}`);
    this.status = status;
    this.headers = headers;
    const data = error;
    this.error = data;
    this.code = data == null ? void 0 : data["code"];
    this.param = data == null ? void 0 : data["param"];
    this.type = data == null ? void 0 : data["type"];
  }
  static makeMessage(status, error, message) {
    const msg = (error == null ? void 0 : error.message)
      ? typeof error.message === "string"
        ? error.message
        : JSON.stringify(error.message)
      : error
      ? JSON.stringify(error)
      : message;
    if (status && msg) {
      return `${status} ${msg}`;
    }
    if (status) {
      return `${status} status code (no body)`;
    }
    if (msg) {
      return msg;
    }
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status) {
      return new APIConnectionError({ cause: castToError(errorResponse) });
    }
    const error = errorResponse == null ? void 0 : errorResponse["error"];
    if (status === 400) {
      return new BadRequestError(status, error, message, headers);
    }
    if (status === 401) {
      return new AuthenticationError(status, error, message, headers);
    }
    if (status === 403) {
      return new PermissionDeniedError(status, error, message, headers);
    }
    if (status === 404) {
      return new NotFoundError(status, error, message, headers);
    }
    if (status === 409) {
      return new ConflictError(status, error, message, headers);
    }
    if (status === 422) {
      return new UnprocessableEntityError(status, error, message, headers);
    }
    if (status === 429) {
      return new RateLimitError(status, error, message, headers);
    }
    if (status >= 500) {
      return new InternalServerError(status, error, message, headers);
    }
    return new APIError(status, error, message, headers);
  }
};
var APIUserAbortError = class extends APIError {
  constructor({ message } = {}) {
    super(void 0, void 0, message || "Request was aborted.", void 0);
    this.status = void 0;
  }
};
var APIConnectionError = class extends APIError {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    this.status = void 0;
    if (cause) this.cause = cause;
  }
};
var APIConnectionTimeoutError = class extends APIConnectionError {
  constructor({ message } = {}) {
    super({ message: message != null ? message : "Request timed out." });
  }
};
var BadRequestError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 400;
  }
};
var AuthenticationError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 401;
  }
};
var PermissionDeniedError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 403;
  }
};
var NotFoundError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 404;
  }
};
var ConflictError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 409;
  }
};
var UnprocessableEntityError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 422;
  }
};
var RateLimitError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 429;
  }
};
var InternalServerError = class extends APIError {};

// ../../../../../../../../node_modules/langchain/node_modules/openai/streaming.mjs
var Stream = class {
  constructor(iterator, controller) {
    this.iterator = iterator;
    this.controller = controller;
  }
  static fromSSEResponse(response, controller) {
    let consumed = false;
    const decoder = new SSEDecoder();
    async function* iterMessages() {
      if (!response.body) {
        controller.abort();
        throw new OpenAIError(
          `Attempted to iterate over a response with no body`
        );
      }
      const lineDecoder = new LineDecoder();
      const iter = readableStreamAsyncIterable(response.body);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          const sse = decoder.decode(line);
          if (sse) yield sse;
        }
      }
      for (const line of lineDecoder.flush()) {
        const sse = decoder.decode(line);
        if (sse) yield sse;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const sse of iterMessages()) {
          if (done) continue;
          if (sse.data.startsWith("[DONE]")) {
            done = true;
            continue;
          }
          if (sse.event === null) {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (data && data.error) {
              throw new APIError(void 0, data.error, void 0, void 0);
            }
            yield data;
          }
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  static fromReadableStream(readableStream, controller) {
    let consumed = false;
    async function* iterLines() {
      const lineDecoder = new LineDecoder();
      const iter = readableStreamAsyncIterable(readableStream);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          yield line;
        }
      }
      for (const line of lineDecoder.flush()) {
        yield line;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const line of iterLines()) {
          if (done) continue;
          if (line) yield JSON.parse(line);
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  [Symbol.asyncIterator]() {
    return this.iterator();
  }
  tee() {
    const left = [];
    const right = [];
    const iterator = this.iterator();
    const teeIterator = (queue2) => {
      return {
        next: () => {
          if (queue2.length === 0) {
            const result = iterator.next();
            left.push(result);
            right.push(result);
          }
          return queue2.shift();
        },
      };
    };
    return [
      new Stream(() => teeIterator(left), this.controller),
      new Stream(() => teeIterator(right), this.controller),
    ];
  }
  toReadableStream() {
    const self = this;
    let iter;
    const encoder = new TextEncoder();
    return new ReadableStream2({
      async start() {
        iter = self[Symbol.asyncIterator]();
      },
      async pull(ctrl) {
        try {
          const { value, done } = await iter.next();
          if (done) return ctrl.close();
          const bytes = encoder.encode(JSON.stringify(value) + "\n");
          ctrl.enqueue(bytes);
        } catch (err) {
          ctrl.error(err);
        }
      },
      async cancel() {
        var _a4;
        await ((_a4 = iter.return) == null ? void 0 : _a4.call(iter));
      },
    });
  }
};
var SSEDecoder = class {
  constructor() {
    this.event = null;
    this.data = [];
    this.chunks = [];
  }
  decode(line) {
    if (line.endsWith("\r")) {
      line = line.substring(0, line.length - 1);
    }
    if (!line) {
      if (!this.event && !this.data.length) return null;
      const sse = {
        event: this.event,
        data: this.data.join("\n"),
        raw: this.chunks,
      };
      this.event = null;
      this.data = [];
      this.chunks = [];
      return sse;
    }
    this.chunks.push(line);
    if (line.startsWith(":")) {
      return null;
    }
    let [fieldname, _, value] = partition(line, ":");
    if (value.startsWith(" ")) {
      value = value.substring(1);
    }
    if (fieldname === "event") {
      this.event = value;
    } else if (fieldname === "data") {
      this.data.push(value);
    }
    return null;
  }
};
var LineDecoder = class {
  constructor() {
    this.buffer = [];
    this.trailingCR = false;
  }
  decode(chunk) {
    let text = this.decodeText(chunk);
    if (this.trailingCR) {
      text = "\r" + text;
      this.trailingCR = false;
    }
    if (text.endsWith("\r")) {
      this.trailingCR = true;
      text = text.slice(0, -1);
    }
    if (!text) {
      return [];
    }
    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(
      text[text.length - 1] || ""
    );
    let lines = text.split(LineDecoder.NEWLINE_REGEXP);
    if (lines.length === 1 && !trailingNewline) {
      this.buffer.push(lines[0]);
      return [];
    }
    if (this.buffer.length > 0) {
      lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
      this.buffer = [];
    }
    if (!trailingNewline) {
      this.buffer = [lines.pop() || ""];
    }
    return lines;
  }
  decodeText(bytes) {
    var _a4;
    if (bytes == null) return "";
    if (typeof bytes === "string") return bytes;
    if (typeof Buffer !== "undefined") {
      if (bytes instanceof Buffer) {
        return bytes.toString();
      }
      if (bytes instanceof Uint8Array) {
        return Buffer.from(bytes).toString();
      }
      throw new OpenAIError(
        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`
      );
    }
    if (typeof TextDecoder !== "undefined") {
      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
        (_a4 = this.textDecoder) != null
          ? _a4
          : (this.textDecoder = new TextDecoder("utf8"));
        return this.textDecoder.decode(bytes);
      }
      throw new OpenAIError(
        `Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`
      );
    }
    throw new OpenAIError(
      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`
    );
  }
  flush() {
    if (!this.buffer.length && !this.trailingCR) {
      return [];
    }
    const lines = [this.buffer.join("")];
    this.buffer = [];
    this.trailingCR = false;
    return lines;
  }
};
LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set([
  "\n",
  "\r",
  "\v",
  "\f",
  "",
  "",
  "",
  "\x85",
  "\u2028",
  "\u2029",
]);
LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;
function partition(str3, delimiter) {
  const index = str3.indexOf(delimiter);
  if (index !== -1) {
    return [
      str3.substring(0, index),
      delimiter,
      str3.substring(index + delimiter.length),
    ];
  }
  return [str3, "", ""];
}
function readableStreamAsyncIterable(stream) {
  if (stream[Symbol.asyncIterator]) return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done) reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    },
  };
}

// ../../../../../../../../node_modules/langchain/node_modules/openai/uploads.mjs
var isResponseLike = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.url === "string" &&
  typeof value.blob === "function";
var isFileLike = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.name === "string" &&
  typeof value.lastModified === "number" &&
  isBlobLike(value);
var isBlobLike = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.size === "number" &&
  typeof value.type === "string" &&
  typeof value.text === "function" &&
  typeof value.slice === "function" &&
  typeof value.arrayBuffer === "function";
var isUploadable = (value) => {
  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);
};
async function toFile(value, name, options = {}) {
  var _a4, _b, _c;
  value = await value;
  if (isResponseLike(value)) {
    const blob = await value.blob();
    name ||
      (name =
        (_a4 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null
          ? _a4
          : "unknown_file");
    return new File2([blob], name, options);
  }
  const bits = await getBytes(value);
  name || (name = (_b = getName(value)) != null ? _b : "unknown_file");
  if (!options.type) {
    const type = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File2(bits, name, options);
}
async function getBytes(value) {
  var _a4;
  let parts = [];
  if (
    typeof value === "string" ||
    ArrayBuffer.isView(value) ||
    value instanceof ArrayBuffer
  ) {
    parts.push(value);
  } else if (isBlobLike(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(
      `Unexpected data type: ${typeof value}; constructor: ${
        (_a4 = value == null ? void 0 : value.constructor) == null
          ? void 0
          : _a4.name
      }; props: ${propsForError(value)}`
    );
  }
  return parts;
}
function propsForError(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName(value) {
  var _a4;
  return (
    getStringFromMaybeBuffer(value.name) ||
    getStringFromMaybeBuffer(value.filename) ||
    ((_a4 = getStringFromMaybeBuffer(value.path)) == null
      ? void 0
      : _a4.split(/[\\/]/).pop())
  );
}
var getStringFromMaybeBuffer = (x) => {
  if (typeof x === "string") return x;
  if (typeof Buffer !== "undefined" && x instanceof Buffer) return String(x);
  return void 0;
};
var isAsyncIterableIterator = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value[Symbol.asyncIterator] === "function";
var isMultipartBody = (body) =>
  body &&
  typeof body === "object" &&
  body.body &&
  body[Symbol.toStringTag] === "MultipartBody";
var multipartFormRequestOptions = async (opts) => {
  const form = await createForm(opts.body);
  return getMultipartRequestOptions(form, opts);
};
var createForm = async (body) => {
  const form = new FormData2();
  await Promise.all(
    Object.entries(body || {}).map(([key, value]) =>
      addFormValue(form, key, value)
    )
  );
  return form;
};
var addFormValue = async (form, key, value) => {
  if (value === void 0) return;
  if (value == null) {
    throw new TypeError(
      `Received null for "${key}"; to pass null in FormData, you must use the string 'null'`
    );
  }
  if (
    typeof value === "string" ||
    typeof value === "number" ||
    typeof value === "boolean"
  ) {
    form.append(key, String(value));
  } else if (isUploadable(value)) {
    const file = await toFile(value);
    form.append(key, file);
  } else if (Array.isArray(value)) {
    await Promise.all(
      value.map((entry) => addFormValue(form, key + "[]", entry))
    );
  } else if (typeof value === "object") {
    await Promise.all(
      Object.entries(value).map(([name, prop]) =>
        addFormValue(form, `${key}[${name}]`, prop)
      )
    );
  } else {
    throw new TypeError(
      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`
    );
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/core.mjs
var __classPrivateFieldSet = function (receiver, state, value, kind4, f) {
  if (kind4 === "m") throw new TypeError("Private method is not writable");
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind4 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet = function (receiver, state, kind4, f) {
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind4 === "m"
    ? f
    : kind4 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractPage_client;
async function defaultParseResponse(props) {
  const { response } = props;
  if (props.options.stream) {
    debug(
      "response",
      response.status,
      response.url,
      response.headers,
      response.body
    );
    return Stream.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  if (contentType == null ? void 0 : contentType.includes("application/json")) {
    const json = await response.json();
    debug("response", response.status, response.url, response.headers, json);
    return json;
  }
  const text = await response.text();
  debug("response", response.status, response.url, response.headers, text);
  return text;
}
var APIPromise = class extends Promise {
  constructor(responsePromise, parseResponse = defaultParseResponse) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
    this.parseResponse = parseResponse;
  }
  _thenUnwrap(transform) {
    return new APIPromise(this.responsePromise, async (props) =>
      transform(await this.parseResponse(props))
    );
  }
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  async withResponse() {
    const [data, response] = await Promise.all([
      this.parse(),
      this.asResponse(),
    ]);
    return { data, response };
  }
  parse() {
    if (!this.parsedPromise) {
      this.parsedPromise = this.responsePromise.then(this.parseResponse);
    }
    return this.parsedPromise;
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
};
var APIClient = class {
  constructor({
    baseURL,
    maxRetries = 2,
    timeout = 6e5,
    httpAgent,
    fetch: overridenFetch,
  }) {
    this.baseURL = baseURL;
    this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
    this.timeout = validatePositiveInteger("timeout", timeout);
    this.httpAgent = httpAgent;
    this.fetch = overridenFetch != null ? overridenFetch : fetch2;
  }
  authHeaders(opts) {
    return {};
  }
  defaultHeaders(opts) {
    return {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": this.getUserAgent(),
      ...getPlatformHeaders(),
      ...this.authHeaders(opts),
    };
  }
  validateHeaders(headers, customHeaders) {}
  defaultIdempotencyKey() {
    return `stainless-node-retry-${uuid4()}`;
  }
  get(path, opts) {
    return this.methodRequest("get", path, opts);
  }
  post(path, opts) {
    return this.methodRequest("post", path, opts);
  }
  patch(path, opts) {
    return this.methodRequest("patch", path, opts);
  }
  put(path, opts) {
    return this.methodRequest("put", path, opts);
  }
  delete(path, opts) {
    return this.methodRequest("delete", path, opts);
  }
  methodRequest(method, path, opts) {
    return this.request(
      Promise.resolve(opts).then((opts2) => ({ method, path, ...opts2 }))
    );
  }
  getAPIList(path, Page3, opts) {
    return this.requestAPIList(Page3, { method: "get", path, ...opts });
  }
  calculateContentLength(body) {
    if (typeof body === "string") {
      if (typeof Buffer !== "undefined") {
        return Buffer.byteLength(body, "utf8").toString();
      }
      if (typeof TextEncoder !== "undefined") {
        const encoder = new TextEncoder();
        const encoded = encoder.encode(body);
        return encoded.length.toString();
      }
    }
    return null;
  }
  buildRequest(options) {
    var _a4, _b, _c, _d, _e, _f;
    const { method, path, query, headers = {} } = options;
    const body = isMultipartBody(options.body)
      ? options.body.body
      : options.body
      ? JSON.stringify(options.body, null, 2)
      : null;
    const contentLength = this.calculateContentLength(body);
    const url = this.buildURL(path, query);
    if ("timeout" in options)
      validatePositiveInteger("timeout", options.timeout);
    const timeout = (_a4 = options.timeout) != null ? _a4 : this.timeout;
    const httpAgent =
      (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null
        ? _c
        : getDefaultAgent(url);
    const minAgentTimeout = timeout + 1e3;
    if (
      typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null
        ? void 0
        : _d.timeout) === "number" &&
      minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)
    ) {
      httpAgent.options.timeout = minAgentTimeout;
    }
    if (this.idempotencyHeader && method !== "get") {
      if (!options.idempotencyKey)
        options.idempotencyKey = this.defaultIdempotencyKey();
      headers[this.idempotencyHeader] = options.idempotencyKey;
    }
    const reqHeaders = {
      ...(contentLength && { "Content-Length": contentLength }),
      ...this.defaultHeaders(options),
      ...headers,
    };
    if (isMultipartBody(options.body) && kind !== "node") {
      delete reqHeaders["Content-Type"];
    }
    Object.keys(reqHeaders).forEach(
      (key) => reqHeaders[key] === null && delete reqHeaders[key]
    );
    const req = {
      method,
      ...(body && { body }),
      headers: reqHeaders,
      ...(httpAgent && { agent: httpAgent }),
      signal: (_f = options.signal) != null ? _f : null,
    };
    this.validateHeaders(reqHeaders, headers);
    return { req, url, timeout };
  }
  async prepareRequest(request4, { url, options }) {}
  parseHeaders(headers) {
    return !headers
      ? {}
      : Symbol.iterator in headers
      ? Object.fromEntries(Array.from(headers).map((header) => [...header]))
      : { ...headers };
  }
  makeStatusError(status, error, message, headers) {
    return APIError.generate(status, error, message, headers);
  }
  request(options, remainingRetries = null) {
    return new APIPromise(this.makeRequest(options, remainingRetries));
  }
  async makeRequest(optionsInput, retriesRemaining) {
    var _a4, _b, _c;
    const options = await optionsInput;
    if (retriesRemaining == null) {
      retriesRemaining =
        (_a4 = options.maxRetries) != null ? _a4 : this.maxRetries;
    }
    const { req, url, timeout } = this.buildRequest(options);
    await this.prepareRequest(req, { url, options });
    debug("request", url, options, req.headers);
    if ((_b = options.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError();
    }
    const controller = new AbortController();
    const response = await this.fetchWithTimeout(
      url,
      req,
      timeout,
      controller
    ).catch(castToError);
    if (response instanceof Error) {
      if ((_c = options.signal) == null ? void 0 : _c.aborted) {
        throw new APIUserAbortError();
      }
      if (retriesRemaining) {
        return this.retryRequest(options, retriesRemaining);
      }
      if (response.name === "AbortError") {
        throw new APIConnectionTimeoutError();
      }
      throw new APIConnectionError({ cause: response });
    }
    const responseHeaders = createResponseHeaders(response.headers);
    if (!response.ok) {
      if (retriesRemaining && this.shouldRetry(response)) {
        return this.retryRequest(options, retriesRemaining, responseHeaders);
      }
      const errText = await response
        .text()
        .catch((e) => castToError(e).message);
      const errJSON = safeJSON(errText);
      const errMessage = errJSON ? void 0 : errText;
      debug("response", response.status, url, responseHeaders, errMessage);
      const err = this.makeStatusError(
        response.status,
        errJSON,
        errMessage,
        responseHeaders
      );
      throw err;
    }
    return { response, options, controller };
  }
  requestAPIList(Page3, options) {
    const request4 = this.makeRequest(options, null);
    return new PagePromise(this, request4, Page3);
  }
  buildURL(path, query) {
    const url = isAbsoluteURL(path)
      ? new URL(path)
      : new URL(
          this.baseURL +
            (this.baseURL.endsWith("/") && path.startsWith("/")
              ? path.slice(1)
              : path)
        );
    const defaultQuery = this.defaultQuery();
    if (!isEmptyObj(defaultQuery)) {
      query = { ...defaultQuery, ...query };
    }
    if (query) {
      url.search = this.stringifyQuery(query);
    }
    return url.toString();
  }
  stringifyQuery(query) {
    return Object.entries(query)
      .filter(([_, value]) => typeof value !== "undefined")
      .map(([key, value]) => {
        if (
          typeof value === "string" ||
          typeof value === "number" ||
          typeof value === "boolean"
        ) {
          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
        }
        if (value === null) {
          return `${encodeURIComponent(key)}=`;
        }
        throw new OpenAIError(
          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`
        );
      })
      .join("&");
  }
  async fetchWithTimeout(url, init, ms, controller) {
    const { signal, ...options } = init || {};
    if (signal) signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    return this.getRequestClient()
      .fetch.call(void 0, url, { signal: controller.signal, ...options })
      .finally(() => {
        clearTimeout(timeout);
      });
  }
  getRequestClient() {
    return { fetch: this.fetch };
  }
  shouldRetry(response) {
    const shouldRetryHeader = response.headers.get("x-should-retry");
    if (shouldRetryHeader === "true") return true;
    if (shouldRetryHeader === "false") return false;
    if (response.status === 408) return true;
    if (response.status === 409) return true;
    if (response.status === 429) return true;
    if (response.status >= 500) return true;
    return false;
  }
  async retryRequest(options, retriesRemaining, responseHeaders) {
    var _a4;
    let timeoutMillis;
    const retryAfterHeader =
      responseHeaders == null ? void 0 : responseHeaders["retry-after"];
    if (retryAfterHeader) {
      const timeoutSeconds = parseInt(retryAfterHeader);
      if (!Number.isNaN(timeoutSeconds)) {
        timeoutMillis = timeoutSeconds * 1e3;
      } else {
        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
      }
    }
    if (
      !timeoutMillis ||
      !Number.isInteger(timeoutMillis) ||
      timeoutMillis <= 0 ||
      timeoutMillis > 60 * 1e3
    ) {
      const maxRetries =
        (_a4 = options.maxRetries) != null ? _a4 : this.maxRetries;
      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(
        retriesRemaining,
        maxRetries
      );
    }
    await sleep(timeoutMillis);
    return this.makeRequest(options, retriesRemaining - 1);
  }
  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
    const initialRetryDelay = 0.5;
    const maxRetryDelay = 8;
    const numRetries = maxRetries - retriesRemaining;
    const sleepSeconds = Math.min(
      initialRetryDelay * Math.pow(2, numRetries),
      maxRetryDelay
    );
    const jitter = 1 - Math.random() * 0.25;
    return sleepSeconds * jitter * 1e3;
  }
  getUserAgent() {
    return `${this.constructor.name}/JS ${VERSION}`;
  }
};
var AbstractPage = class {
  constructor(client, response, body, options) {
    _AbstractPage_client.set(this, void 0);
    __classPrivateFieldSet(this, _AbstractPage_client, client, "f");
    this.options = options;
    this.response = response;
    this.body = body;
  }
  hasNextPage() {
    const items = this.getPaginatedItems();
    if (!items.length) return false;
    return this.nextPageInfo() != null;
  }
  async getNextPage() {
    const nextInfo = this.nextPageInfo();
    if (!nextInfo) {
      throw new OpenAIError(
        "No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`."
      );
    }
    const nextOptions = { ...this.options };
    if ("params" in nextInfo) {
      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
    } else if ("url" in nextInfo) {
      const params = [
        ...Object.entries(nextOptions.query || {}),
        ...nextInfo.url.searchParams.entries(),
      ];
      for (const [key, value] of params) {
        nextInfo.url.searchParams.set(key, value);
      }
      nextOptions.query = void 0;
      nextOptions.path = nextInfo.url.toString();
    }
    return await __classPrivateFieldGet(
      this,
      _AbstractPage_client,
      "f"
    ).requestAPIList(this.constructor, nextOptions);
  }
  async *iterPages() {
    let page = this;
    yield page;
    while (page.hasNextPage()) {
      page = await page.getNextPage();
      yield page;
    }
  }
  async *[((_AbstractPage_client = /* @__PURE__ */ new WeakMap()),
  Symbol.asyncIterator)]() {
    for await (const page of this.iterPages()) {
      for (const item of page.getPaginatedItems()) {
        yield item;
      }
    }
  }
};
var PagePromise = class extends APIPromise {
  constructor(client, request4, Page3) {
    super(
      request4,
      async (props) =>
        new Page3(
          client,
          props.response,
          await defaultParseResponse(props),
          props.options
        )
    );
  }
  async *[Symbol.asyncIterator]() {
    const page = await this;
    for await (const item of page) {
      yield item;
    }
  }
};
var createResponseHeaders = (headers) => {
  return new Proxy(Object.fromEntries(headers.entries()), {
    get(target, name) {
      const key = name.toString();
      return target[key.toLowerCase()] || target[key];
    },
  });
};
var requestOptionsKeys = {
  method: true,
  path: true,
  query: true,
  body: true,
  headers: true,
  maxRetries: true,
  stream: true,
  timeout: true,
  httpAgent: true,
  signal: true,
  idempotencyKey: true,
  __binaryResponse: true,
};
var isRequestOptions = (obj) => {
  return (
    typeof obj === "object" &&
    obj !== null &&
    !isEmptyObj(obj) &&
    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))
  );
};
var getPlatformProperties = () => {
  if (typeof Deno !== "undefined" && Deno.build != null) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(Deno.build.os),
      "X-Stainless-Arch": normalizeArch(Deno.build.arch),
      "X-Stainless-Runtime": "deno",
      "X-Stainless-Runtime-Version": Deno.version,
    };
  }
  if (typeof EdgeRuntime !== "undefined") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": `other:${EdgeRuntime}`,
      "X-Stainless-Runtime": "edge",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  if (
    Object.prototype.toString.call(
      typeof process !== "undefined" ? process : 0
    ) === "[object process]"
  ) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(process.platform),
      "X-Stainless-Arch": normalizeArch(process.arch),
      "X-Stainless-Runtime": "node",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  const browserInfo = getBrowserInfo();
  if (browserInfo) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": "unknown",
      "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
      "X-Stainless-Runtime-Version": browserInfo.version,
    };
  }
  return {
    "X-Stainless-Lang": "js",
    "X-Stainless-Package-Version": VERSION,
    "X-Stainless-OS": "Unknown",
    "X-Stainless-Arch": "unknown",
    "X-Stainless-Runtime": "unknown",
    "X-Stainless-Runtime-Version": "unknown",
  };
};
function getBrowserInfo() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    {
      key: "safari",
      pattern:
        /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/,
    },
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
var normalizeArch = (arch) => {
  if (arch === "x32") return "x32";
  if (arch === "x86_64" || arch === "x64") return "x64";
  if (arch === "arm") return "arm";
  if (arch === "aarch64" || arch === "arm64") return "arm64";
  if (arch) return `other:${arch}`;
  return "unknown";
};
var normalizePlatform = (platform) => {
  platform = platform.toLowerCase();
  if (platform.includes("ios")) return "iOS";
  if (platform === "android") return "Android";
  if (platform === "darwin") return "MacOS";
  if (platform === "win32") return "Windows";
  if (platform === "freebsd") return "FreeBSD";
  if (platform === "openbsd") return "OpenBSD";
  if (platform === "linux") return "Linux";
  if (platform) return `Other:${platform}`;
  return "Unknown";
};
var _platformHeaders;
var getPlatformHeaders = () => {
  return _platformHeaders != null
    ? _platformHeaders
    : (_platformHeaders = getPlatformProperties());
};
var safeJSON = (text) => {
  try {
    return JSON.parse(text);
  } catch (err) {
    return void 0;
  }
};
var startsWithSchemeRegexp = new RegExp("^(?:[a-z]+:)?//", "i");
var isAbsoluteURL = (url) => {
  return startsWithSchemeRegexp.test(url);
};
var sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
var validatePositiveInteger = (name, n) => {
  if (typeof n !== "number" || !Number.isInteger(n)) {
    throw new OpenAIError(`${name} must be an integer`);
  }
  if (n < 0) {
    throw new OpenAIError(`${name} must be a positive integer`);
  }
  return n;
};
var castToError = (err) => {
  if (err instanceof Error) return err;
  return new Error(err);
};
var readEnv = (env) => {
  var _a4, _b, _c, _d;
  if (typeof process !== "undefined") {
    return (_b = (_a4 = process.env) == null ? void 0 : _a4[env]) != null
      ? _b
      : void 0;
  }
  if (typeof Deno !== "undefined") {
    return (_d = (_c = Deno.env) == null ? void 0 : _c.get) == null
      ? void 0
      : _d.call(_c, env);
  }
  return void 0;
};
function isEmptyObj(obj) {
  if (!obj) return true;
  for (const _k in obj) return false;
  return true;
}
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function debug(action, ...args) {
  if (typeof process !== "undefined" && process.env["DEBUG"] === "true") {
    console.log(`OpenAI:DEBUG:${action}`, ...args);
  }
}
var uuid4 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 3) | 8;
    return v.toString(16);
  });
};
var isRunningInBrowser = () => {
  return (
    typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof navigator !== "undefined"
  );
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/pagination.mjs
var Page = class extends AbstractPage {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data;
    this.object = body.object;
  }
  getPaginatedItems() {
    return this.data;
  }
  nextPageParams() {
    return null;
  }
  nextPageInfo() {
    return null;
  }
};
var CursorPage = class extends AbstractPage {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data;
  }
  getPaginatedItems() {
    return this.data;
  }
  nextPageParams() {
    const info = this.nextPageInfo();
    if (!info) return null;
    if ("params" in info) return info.params;
    const params = Object.fromEntries(info.url.searchParams);
    if (!Object.keys(params).length) return null;
    return params;
  }
  nextPageInfo() {
    var _a4, _b;
    if (!((_a4 = this.data) == null ? void 0 : _a4.length)) {
      return null;
    }
    const next =
      (_b = this.data[this.data.length - 1]) == null ? void 0 : _b.id;
    if (!next) return null;
    return { params: { after: next } };
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/resource.mjs
var APIResource = class {
  constructor(client) {
    this._client = client;
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/chat/completions.mjs
var Completions = class extends APIResource {
  create(body, options) {
    var _a4;
    return this._client.post("/chat/completions", {
      body,
      ...options,
      stream: (_a4 = body.stream) != null ? _a4 : false,
    });
  }
};
(function (Completions8) {})(Completions || (Completions = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/chat/chat.mjs
var Chat = class extends APIResource {
  constructor() {
    super(...arguments);
    this.completions = new Completions(this._client);
  }
};
(function (Chat6) {
  Chat6.Completions = Completions;
})(Chat || (Chat = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/audio/speech.mjs
var Speech = class extends APIResource {
  create(body, options) {
    return this._client.post("/audio/speech", {
      body,
      ...options,
      __binaryResponse: true,
    });
  }
};
(function (Speech3) {})(Speech || (Speech = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/audio/transcriptions.mjs
var Transcriptions = class extends APIResource {
  create(body, options) {
    return this._client.post(
      "/audio/transcriptions",
      multipartFormRequestOptions({ body, ...options })
    );
  }
};
(function (Transcriptions4) {})(Transcriptions || (Transcriptions = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/audio/translations.mjs
var Translations = class extends APIResource {
  create(body, options) {
    return this._client.post(
      "/audio/translations",
      multipartFormRequestOptions({ body, ...options })
    );
  }
};
(function (Translations4) {})(Translations || (Translations = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/audio/audio.mjs
var Audio = class extends APIResource {
  constructor() {
    super(...arguments);
    this.transcriptions = new Transcriptions(this._client);
    this.translations = new Translations(this._client);
    this.speech = new Speech(this._client);
  }
};
(function (Audio4) {
  Audio4.Transcriptions = Transcriptions;
  Audio4.Translations = Translations;
  Audio4.Speech = Speech;
})(Audio || (Audio = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/assistants/files.mjs
var Files = class extends APIResource {
  create(assistantId, body, options) {
    return this._client.post(`/assistants/${assistantId}/files`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(assistantId, fileId, options) {
    return this._client.get(`/assistants/${assistantId}/files/${fileId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(assistantId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(assistantId, {}, query);
    }
    return this._client.getAPIList(
      `/assistants/${assistantId}/files`,
      AssistantFilesPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  del(assistantId, fileId, options) {
    return this._client.delete(`/assistants/${assistantId}/files/${fileId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
var AssistantFilesPage = class extends CursorPage {};
(function (Files7) {
  Files7.AssistantFilesPage = AssistantFilesPage;
})(Files || (Files = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/assistants/assistants.mjs
var Assistants = class extends APIResource {
  constructor() {
    super(...arguments);
    this.files = new Files(this._client);
  }
  create(body, options) {
    return this._client.post("/assistants", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(assistantId, options) {
    return this._client.get(`/assistants/${assistantId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(assistantId, body, options) {
    return this._client.post(`/assistants/${assistantId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/assistants", AssistantsPage, {
      query,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  del(assistantId, options) {
    return this._client.delete(`/assistants/${assistantId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
var AssistantsPage = class extends CursorPage {};
(function (Assistants3) {
  Assistants3.AssistantsPage = AssistantsPage;
  Assistants3.Files = Files;
  Assistants3.AssistantFilesPage = AssistantFilesPage;
})(Assistants || (Assistants = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/lib/RunnableFunction.mjs
function isRunnableFunctionWithParse(fn) {
  return typeof fn.parse === "function";
}

// ../../../../../../../../node_modules/langchain/node_modules/openai/lib/chatCompletionUtils.mjs
var isAssistantMessage = (message) => {
  return (message == null ? void 0 : message.role) === "assistant";
};
var isFunctionMessage = (message) => {
  return (message == null ? void 0 : message.role) === "function";
};
var isToolMessage = (message) => {
  return (message == null ? void 0 : message.role) === "tool";
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/lib/AbstractChatCompletionRunner.mjs
var __classPrivateFieldSet2 = function (receiver, state, value, kind4, f) {
  if (kind4 === "m") throw new TypeError("Private method is not writable");
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind4 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet2 = function (receiver, state, kind4, f) {
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind4 === "m"
    ? f
    : kind4 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractChatCompletionRunner_instances;
var _AbstractChatCompletionRunner_connectedPromise;
var _AbstractChatCompletionRunner_resolveConnectedPromise;
var _AbstractChatCompletionRunner_rejectConnectedPromise;
var _AbstractChatCompletionRunner_endPromise;
var _AbstractChatCompletionRunner_resolveEndPromise;
var _AbstractChatCompletionRunner_rejectEndPromise;
var _AbstractChatCompletionRunner_listeners;
var _AbstractChatCompletionRunner_ended;
var _AbstractChatCompletionRunner_errored;
var _AbstractChatCompletionRunner_aborted;
var _AbstractChatCompletionRunner_catchingPromiseCreated;
var _AbstractChatCompletionRunner_getFinalContent;
var _AbstractChatCompletionRunner_getFinalMessage;
var _AbstractChatCompletionRunner_getFinalFunctionCall;
var _AbstractChatCompletionRunner_getFinalFunctionCallResult;
var _AbstractChatCompletionRunner_calculateTotalUsage;
var _AbstractChatCompletionRunner_handleError;
var _AbstractChatCompletionRunner_validateParams;
var _AbstractChatCompletionRunner_stringifyFunctionCallResult;
var DEFAULT_MAX_CHAT_COMPLETIONS = 10;
var AbstractChatCompletionRunner = class {
  constructor() {
    _AbstractChatCompletionRunner_instances.add(this);
    this.controller = new AbortController();
    _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);
    _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, () => {});
    _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, () => {});
    _AbstractChatCompletionRunner_endPromise.set(this, void 0);
    _AbstractChatCompletionRunner_resolveEndPromise.set(this, () => {});
    _AbstractChatCompletionRunner_rejectEndPromise.set(this, () => {});
    _AbstractChatCompletionRunner_listeners.set(this, {});
    this._chatCompletions = [];
    this.messages = [];
    _AbstractChatCompletionRunner_ended.set(this, false);
    _AbstractChatCompletionRunner_errored.set(this, false);
    _AbstractChatCompletionRunner_aborted.set(this, false);
    _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);
    _AbstractChatCompletionRunner_handleError.set(this, (error) => {
      __classPrivateFieldSet2(
        this,
        _AbstractChatCompletionRunner_errored,
        true,
        "f"
      );
      if (error instanceof Error && error.name === "AbortError") {
        error = new APIUserAbortError();
      }
      if (error instanceof APIUserAbortError) {
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_aborted,
          true,
          "f"
        );
        return this._emit("abort", error);
      }
      if (error instanceof OpenAIError) {
        return this._emit("error", error);
      }
      if (error instanceof Error) {
        const openAIError = new OpenAIError(error.message);
        openAIError.cause = error;
        return this._emit("error", openAIError);
      }
      return this._emit("error", new OpenAIError(String(error)));
    });
    __classPrivateFieldSet2(
      this,
      _AbstractChatCompletionRunner_connectedPromise,
      new Promise((resolve, reject) => {
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_resolveConnectedPromise,
          resolve,
          "f"
        );
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_rejectConnectedPromise,
          reject,
          "f"
        );
      }),
      "f"
    );
    __classPrivateFieldSet2(
      this,
      _AbstractChatCompletionRunner_endPromise,
      new Promise((resolve, reject) => {
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_resolveEndPromise,
          resolve,
          "f"
        );
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_rejectEndPromise,
          reject,
          "f"
        );
      }),
      "f"
    );
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_connectedPromise,
      "f"
    ).catch(() => {});
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_endPromise,
      "f"
    ).catch(() => {});
  }
  _run(executor) {
    setTimeout(() => {
      executor().then(() => {
        this._emitFinal();
        this._emit("end");
      }, __classPrivateFieldGet2(this, _AbstractChatCompletionRunner_handleError, "f"));
    }, 0);
  }
  _addChatCompletion(chatCompletion) {
    var _a4;
    this._chatCompletions.push(chatCompletion);
    this._emit("chatCompletion", chatCompletion);
    const message =
      (_a4 = chatCompletion.choices[0]) == null ? void 0 : _a4.message;
    if (message) this._addMessage(message);
    return chatCompletion;
  }
  _addMessage(message, emit = true) {
    this.messages.push(message);
    if (emit) {
      this._emit("message", message);
      if (
        (isFunctionMessage(message) || isToolMessage(message)) &&
        message.content
      ) {
        this._emit("functionCallResult", message.content);
      } else if (isAssistantMessage(message) && message.function_call) {
        this._emit("functionCall", message.function_call);
      } else if (isAssistantMessage(message) && message.tool_calls) {
        for (const tool_call of message.tool_calls) {
          if (tool_call.type === "function") {
            this._emit("functionCall", tool_call.function);
          }
        }
      }
    }
  }
  _connected() {
    if (this.ended) return;
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_resolveConnectedPromise,
      "f"
    ).call(this);
    this._emit("connect");
  }
  get ended() {
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_ended,
      "f"
    );
  }
  get errored() {
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_errored,
      "f"
    );
  }
  get aborted() {
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_aborted,
      "f"
    );
  }
  abort() {
    this.controller.abort();
  }
  on(event, listener) {
    const listeners =
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] ||
      (__classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] = []);
    listeners.push({ listener });
    return this;
  }
  off(event, listener) {
    const listeners = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_listeners,
      "f"
    )[event];
    if (!listeners) return this;
    const index = listeners.findIndex((l) => l.listener === listener);
    if (index >= 0) listeners.splice(index, 1);
    return this;
  }
  once(event, listener) {
    const listeners =
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] ||
      (__classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] = []);
    listeners.push({ listener, once: true });
    return this;
  }
  emitted(event) {
    return new Promise((resolve, reject) => {
      __classPrivateFieldSet2(
        this,
        _AbstractChatCompletionRunner_catchingPromiseCreated,
        true,
        "f"
      );
      if (event !== "error") this.once("error", reject);
      this.once(event, resolve);
    });
  }
  async done() {
    __classPrivateFieldSet2(
      this,
      _AbstractChatCompletionRunner_catchingPromiseCreated,
      true,
      "f"
    );
    await __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_endPromise,
      "f"
    );
  }
  async finalChatCompletion() {
    await this.done();
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (!completion)
      throw new OpenAIError("stream ended without producing a ChatCompletion");
    return completion;
  }
  async finalContent() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalContent
    ).call(this);
  }
  async finalMessage() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalMessage
    ).call(this);
  }
  async finalFunctionCall() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCall
    ).call(this);
  }
  async finalFunctionCallResult() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCallResult
    ).call(this);
  }
  async totalUsage() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_calculateTotalUsage
    ).call(this);
  }
  allChatCompletions() {
    return [...this._chatCompletions];
  }
  _emit(event, ...args) {
    if (__classPrivateFieldGet2(this, _AbstractChatCompletionRunner_ended, "f"))
      return;
    if (event === "end") {
      __classPrivateFieldSet2(
        this,
        _AbstractChatCompletionRunner_ended,
        true,
        "f"
      );
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_resolveEndPromise,
        "f"
      ).call(this);
    }
    const listeners = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_listeners,
      "f"
    )[event];
    if (listeners) {
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] = listeners.filter((l) => !l.once);
      listeners.forEach(({ listener }) => listener(...args));
    }
    if (event === "abort") {
      const error = args[0];
      if (
        !__classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_catchingPromiseCreated,
          "f"
        ) &&
        !(listeners == null ? void 0 : listeners.length)
      ) {
        Promise.reject(error);
      }
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectConnectedPromise,
        "f"
      ).call(this, error);
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectEndPromise,
        "f"
      ).call(this, error);
      this._emit("end");
      return;
    }
    if (event === "error") {
      const error = args[0];
      if (
        !__classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_catchingPromiseCreated,
          "f"
        ) &&
        !(listeners == null ? void 0 : listeners.length)
      ) {
        Promise.reject(error);
      }
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectConnectedPromise,
        "f"
      ).call(this, error);
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectEndPromise,
        "f"
      ).call(this, error);
      this._emit("end");
    }
  }
  _emitFinal() {
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (completion) this._emit("finalChatCompletion", completion);
    const finalMessage = this.messages[this.messages.length - 1];
    if (finalMessage) this._emit("finalMessage", finalMessage);
    const finalContent = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalContent
    ).call(this);
    if (finalContent) this._emit("finalContent", finalContent);
    const finalFunctionCall = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCall
    ).call(this);
    if (finalFunctionCall) this._emit("finalFunctionCall", finalFunctionCall);
    const finalFunctionCallResult = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCallResult
    ).call(this);
    if (finalFunctionCallResult != null)
      this._emit("finalFunctionCallResult", finalFunctionCallResult);
    if (this._chatCompletions.some((c) => c.usage)) {
      this._emit(
        "totalUsage",
        __classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_instances,
          "m",
          _AbstractChatCompletionRunner_calculateTotalUsage
        ).call(this)
      );
    }
  }
  async _createChatCompletion(completions, params, options) {
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_validateParams
    ).call(this, params);
    const chatCompletion = await completions.create(
      { ...params, stream: false },
      { ...options, signal: this.controller.signal }
    );
    this._connected();
    return this._addChatCompletion(chatCompletion);
  }
  async _runChatCompletion(completions, params, options) {
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    return await this._createChatCompletion(completions, params, options);
  }
  async _runFunctions(completions, params, options) {
    var _a4;
    const role = "function";
    const { function_call = "auto", stream, ...restParams } = params;
    const singleFunctionToCall =
      typeof function_call !== "string" &&
      (function_call == null ? void 0 : function_call.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
    const functionsByName = {};
    for (const f of params.functions) {
      functionsByName[f.name || f.function.name] = f;
    }
    const functions = params.functions.map((f) => ({
      name: f.name || f.function.name,
      parameters: f.parameters,
      description: f.description,
    }));
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(
        completions,
        {
          ...restParams,
          function_call,
          functions,
          messages: [...this.messages],
        },
        options
      );
      const message =
        (_a4 = chatCompletion.choices[0]) == null ? void 0 : _a4.message;
      if (!message) {
        throw new OpenAIError(`missing message in ChatCompletion response`);
      }
      if (!message.function_call) return;
      const { name, arguments: args } = message.function_call;
      const fn = functionsByName[name];
      if (!fn) {
        const content2 = `Invalid function_call: ${JSON.stringify(
          name
        )}. Available options are: ${functions
          .map((f) => JSON.stringify(f.name))
          .join(", ")}. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      } else if (singleFunctionToCall && singleFunctionToCall !== name) {
        const content2 = `Invalid function_call: ${JSON.stringify(
          name
        )}. ${JSON.stringify(
          singleFunctionToCall
        )} requested. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      }
      let parsed;
      try {
        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
      } catch (error) {
        this._addMessage({
          role,
          name,
          content: error instanceof Error ? error.message : String(error),
        });
        continue;
      }
      const rawContent = await fn.function(parsed, this);
      const content = __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_instances,
        "m",
        _AbstractChatCompletionRunner_stringifyFunctionCallResult
      ).call(this, rawContent);
      this._addMessage({ role, name, content });
      if (singleFunctionToCall) return;
    }
  }
  async _runTools(completions, params, options) {
    var _a4, _b;
    const role = "tool";
    const { tool_choice = "auto", stream, ...restParams } = params;
    const singleFunctionToCall =
      typeof tool_choice !== "string" &&
      ((_a4 = tool_choice == null ? void 0 : tool_choice.function) == null
        ? void 0
        : _a4.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
    const functionsByName = {};
    for (const f of params.tools) {
      if (f.type === "function") {
        functionsByName[f.function.name || f.function.function.name] =
          f.function;
      }
    }
    const tools =
      "tools" in params
        ? params.tools.map((t) =>
            t.type === "function"
              ? {
                  type: "function",
                  function: {
                    name: t.function.name || t.function.function.name,
                    parameters: t.function.parameters,
                    description: t.function.description,
                  },
                }
              : t
          )
        : void 0;
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(
        completions,
        {
          ...restParams,
          tool_choice,
          tools,
          messages: [...this.messages],
        },
        options
      );
      const message =
        (_b = chatCompletion.choices[0]) == null ? void 0 : _b.message;
      if (!message) {
        throw new OpenAIError(`missing message in ChatCompletion response`);
      }
      if (!message.tool_calls) return;
      for (const tool_call of message.tool_calls) {
        if (tool_call.type !== "function") continue;
        const tool_call_id = tool_call.id;
        const { name, arguments: args } = tool_call.function;
        const fn = functionsByName[name];
        if (!fn) {
          const content2 = `Invalid tool_call: ${JSON.stringify(
            name
          )}. Available options are: ${tools
            .map((f) => JSON.stringify(f.function.name))
            .join(", ")}. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        } else if (singleFunctionToCall && singleFunctionToCall !== name) {
          const content2 = `Invalid tool_call: ${JSON.stringify(
            name
          )}. ${JSON.stringify(
            singleFunctionToCall
          )} requested. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        let parsed;
        try {
          parsed = isRunnableFunctionWithParse(fn)
            ? await fn.parse(args)
            : args;
        } catch (error) {
          const content2 =
            error instanceof Error ? error.message : String(error);
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        const rawContent = await fn.function(parsed, this);
        const content = __classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_instances,
          "m",
          _AbstractChatCompletionRunner_stringifyFunctionCallResult
        ).call(this, rawContent);
        this._addMessage({ role, tool_call_id, content });
        if (singleFunctionToCall) return;
      }
    }
  }
};
(_AbstractChatCompletionRunner_connectedPromise =
  /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_resolveConnectedPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_rejectConnectedPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_endPromise = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_resolveEndPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_rejectEndPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_listeners = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_ended = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_errored = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_aborted = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_catchingPromiseCreated =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_handleError = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_instances = /* @__PURE__ */ new WeakSet()),
  (_AbstractChatCompletionRunner_getFinalContent =
    function _AbstractChatCompletionRunner_getFinalContent2() {
      return __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_instances,
        "m",
        _AbstractChatCompletionRunner_getFinalMessage
      ).call(this).content;
    }),
  (_AbstractChatCompletionRunner_getFinalMessage =
    function _AbstractChatCompletionRunner_getFinalMessage2() {
      let i = this.messages.length;
      while (i-- > 0) {
        const message = this.messages[i];
        if (isAssistantMessage(message)) {
          return message;
        }
      }
      throw new OpenAIError(
        "stream ended without producing a ChatCompletionMessage with role=assistant"
      );
    }),
  (_AbstractChatCompletionRunner_getFinalFunctionCall =
    function _AbstractChatCompletionRunner_getFinalFunctionCall2() {
      for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (
          isAssistantMessage(message) &&
          (message == null ? void 0 : message.function_call)
        ) {
          return message.function_call;
        }
      }
      return;
    }),
  (_AbstractChatCompletionRunner_getFinalFunctionCallResult =
    function _AbstractChatCompletionRunner_getFinalFunctionCallResult2() {
      for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (isFunctionMessage(message) && message.content != null) {
          return message.content;
        }
      }
      return;
    }),
  (_AbstractChatCompletionRunner_calculateTotalUsage =
    function _AbstractChatCompletionRunner_calculateTotalUsage2() {
      const total = {
        completion_tokens: 0,
        prompt_tokens: 0,
        total_tokens: 0,
      };
      for (const { usage } of this._chatCompletions) {
        if (usage) {
          total.completion_tokens += usage.completion_tokens;
          total.prompt_tokens += usage.prompt_tokens;
          total.total_tokens += usage.total_tokens;
        }
      }
      return total;
    }),
  (_AbstractChatCompletionRunner_validateParams =
    function _AbstractChatCompletionRunner_validateParams2(params) {
      if (params.n != null && params.n > 1) {
        throw new OpenAIError(
          "ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly."
        );
      }
    }),
  (_AbstractChatCompletionRunner_stringifyFunctionCallResult =
    function _AbstractChatCompletionRunner_stringifyFunctionCallResult2(
      rawContent
    ) {
      return typeof rawContent === "string"
        ? rawContent
        : rawContent === void 0
        ? "undefined"
        : JSON.stringify(rawContent);
    });

// ../../../../../../../../node_modules/langchain/node_modules/openai/lib/ChatCompletionRunner.mjs
var ChatCompletionRunner = class extends AbstractChatCompletionRunner {
  static runFunctions(completions, params, options) {
    const runner = new ChatCompletionRunner();
    runner._run(() => runner._runFunctions(completions, params, options));
    return runner;
  }
  static runTools(completions, params, options) {
    const runner = new ChatCompletionRunner();
    runner._run(() => runner._runTools(completions, params, options));
    return runner;
  }
  _addMessage(message) {
    super._addMessage(message);
    if (isAssistantMessage(message) && message.content) {
      this._emit("content", message.content);
    }
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/lib/ChatCompletionStream.mjs
var __classPrivateFieldGet3 = function (receiver, state, kind4, f) {
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind4 === "m"
    ? f
    : kind4 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var __classPrivateFieldSet3 = function (receiver, state, value, kind4, f) {
  if (kind4 === "m") throw new TypeError("Private method is not writable");
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind4 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var _ChatCompletionStream_instances;
var _ChatCompletionStream_currentChatCompletionSnapshot;
var _ChatCompletionStream_beginRequest;
var _ChatCompletionStream_addChunk;
var _ChatCompletionStream_endRequest;
var _ChatCompletionStream_accumulateChatCompletion;
var ChatCompletionStream = class extends AbstractChatCompletionRunner {
  constructor() {
    super(...arguments);
    _ChatCompletionStream_instances.add(this);
    _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);
  }
  get currentChatCompletionSnapshot() {
    return __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_currentChatCompletionSnapshot,
      "f"
    );
  }
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStream();
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  static createChatCompletion(completions, params, options) {
    const runner = new ChatCompletionStream();
    runner._run(() =>
      runner._runChatCompletion(
        completions,
        { ...params, stream: true },
        {
          ...options,
          headers: {
            ...(options == null ? void 0 : options.headers),
            "X-Stainless-Helper-Method": "stream",
          },
        }
      )
    );
    return runner;
  }
  async _createChatCompletion(completions, params, options) {
    var _a4;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_instances,
      "m",
      _ChatCompletionStream_beginRequest
    ).call(this);
    const stream = await completions.create(
      { ...params, stream: true },
      { ...options, signal: this.controller.signal }
    );
    this._connected();
    for await (const chunk of stream) {
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_addChunk
      ).call(this, chunk);
    }
    if ((_a4 = stream.controller.signal) == null ? void 0 : _a4.aborted) {
      throw new APIUserAbortError();
    }
    return this._addChatCompletion(
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_endRequest
      ).call(this)
    );
  }
  async _fromReadableStream(readableStream, options) {
    var _a4;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_instances,
      "m",
      _ChatCompletionStream_beginRequest
    ).call(this);
    this._connected();
    const stream = Stream.fromReadableStream(readableStream, this.controller);
    let chatId;
    for await (const chunk of stream) {
      if (chatId && chatId !== chunk.id) {
        this._addChatCompletion(
          __classPrivateFieldGet3(
            this,
            _ChatCompletionStream_instances,
            "m",
            _ChatCompletionStream_endRequest
          ).call(this)
        );
      }
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_addChunk
      ).call(this, chunk);
      chatId = chunk.id;
    }
    if ((_a4 = stream.controller.signal) == null ? void 0 : _a4.aborted) {
      throw new APIUserAbortError();
    }
    return this._addChatCompletion(
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_endRequest
      ).call(this)
    );
  }
  [((_ChatCompletionStream_currentChatCompletionSnapshot =
    /* @__PURE__ */ new WeakMap()),
  (_ChatCompletionStream_instances = /* @__PURE__ */ new WeakSet()),
  (_ChatCompletionStream_beginRequest =
    function _ChatCompletionStream_beginRequest3() {
      if (this.ended) return;
      __classPrivateFieldSet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        void 0,
        "f"
      );
    }),
  (_ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk3(
    chunk
  ) {
    var _a4, _b, _c;
    if (this.ended) return;
    const completion = __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_instances,
      "m",
      _ChatCompletionStream_accumulateChatCompletion
    ).call(this, chunk);
    this._emit("chunk", chunk, completion);
    const delta =
      (_b = (_a4 = chunk.choices[0]) == null ? void 0 : _a4.delta) == null
        ? void 0
        : _b.content;
    const snapshot = (_c = completion.choices[0]) == null ? void 0 : _c.message;
    if (
      delta != null &&
      (snapshot == null ? void 0 : snapshot.role) === "assistant" &&
      (snapshot == null ? void 0 : snapshot.content)
    ) {
      this._emit("content", delta, snapshot.content);
    }
  }),
  (_ChatCompletionStream_endRequest =
    function _ChatCompletionStream_endRequest3() {
      if (this.ended) {
        throw new OpenAIError(`stream has ended, this shouldn't happen`);
      }
      const snapshot = __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        "f"
      );
      if (!snapshot) {
        throw new OpenAIError(`request ended without sending any chunks`);
      }
      __classPrivateFieldSet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        void 0,
        "f"
      );
      return finalizeChatCompletion(snapshot);
    }),
  (_ChatCompletionStream_accumulateChatCompletion =
    function _ChatCompletionStream_accumulateChatCompletion3(chunk) {
      var _a5, _b2, _c;
      var _a4, _b;
      let snapshot = __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        "f"
      );
      const { choices, ...rest } = chunk;
      if (!snapshot) {
        snapshot = __classPrivateFieldSet3(
          this,
          _ChatCompletionStream_currentChatCompletionSnapshot,
          {
            ...rest,
            choices: [],
          },
          "f"
        );
      } else {
        Object.assign(snapshot, rest);
      }
      for (const { delta, finish_reason, index, ...other } of chunk.choices) {
        let choice = snapshot.choices[index];
        if (!choice) {
          snapshot.choices[index] = {
            finish_reason,
            index,
            message: delta,
            ...other,
          };
          continue;
        }
        if (finish_reason) choice.finish_reason = finish_reason;
        Object.assign(choice, other);
        if (!delta) continue;
        const { content, function_call, role, tool_calls } = delta;
        if (content)
          choice.message.content = (choice.message.content || "") + content;
        if (role) choice.message.role = role;
        if (function_call) {
          if (!choice.message.function_call) {
            choice.message.function_call = function_call;
          } else {
            if (function_call.name)
              choice.message.function_call.name = function_call.name;
            if (function_call.arguments) {
              (_a5 = (_a4 = choice.message.function_call).arguments) != null
                ? _a5
                : (_a4.arguments = "");
              choice.message.function_call.arguments += function_call.arguments;
            }
          }
        }
        if (tool_calls) {
          if (!choice.message.tool_calls) choice.message.tool_calls = [];
          for (const { index: index2, id, type, function: fn } of tool_calls) {
            const tool_call =
              (_b2 = (_b = choice.message.tool_calls)[index2]) != null
                ? _b2
                : (_b[index2] = {});
            if (id) tool_call.id = id;
            if (type) tool_call.type = type;
            if (fn)
              (_c = tool_call.function) != null
                ? _c
                : (tool_call.function = { arguments: "" });
            if (fn == null ? void 0 : fn.name)
              tool_call.function.name = fn.name;
            if (fn == null ? void 0 : fn.arguments)
              tool_call.function.arguments += fn.arguments;
          }
        }
      }
      return snapshot;
    }),
  Symbol.asyncIterator)]() {
    const pushQueue = [];
    const readQueue = [];
    let done = false;
    this.on("chunk", (chunk) => {
      const reader = readQueue.shift();
      if (reader) {
        reader(chunk);
      } else {
        pushQueue.push(chunk);
      }
    });
    this.on("end", () => {
      done = true;
      for (const reader of readQueue) {
        reader(void 0);
      }
      readQueue.length = 0;
    });
    return {
      next: async () => {
        if (!pushQueue.length) {
          if (done) {
            return { value: void 0, done: true };
          }
          return new Promise((resolve) => readQueue.push(resolve)).then(
            (chunk2) =>
              chunk2
                ? { value: chunk2, done: false }
                : { value: void 0, done: true }
          );
        }
        const chunk = pushQueue.shift();
        return { value: chunk, done: false };
      },
    };
  }
  toReadableStream() {
    const stream = new Stream(
      this[Symbol.asyncIterator].bind(this),
      this.controller
    );
    return stream.toReadableStream();
  }
};
function finalizeChatCompletion(snapshot) {
  const { id, choices, created, model } = snapshot;
  return {
    id,
    choices: choices.map(({ message, finish_reason, index }) => {
      if (!finish_reason)
        throw new OpenAIError(`missing finish_reason for choice ${index}`);
      const { content = null, function_call, tool_calls } = message;
      const role = message.role;
      if (!role) throw new OpenAIError(`missing role for choice ${index}`);
      if (function_call) {
        const { arguments: args, name } = function_call;
        if (args == null)
          throw new OpenAIError(
            `missing function_call.arguments for choice ${index}`
          );
        if (!name)
          throw new OpenAIError(
            `missing function_call.name for choice ${index}`
          );
        return {
          message: { content, function_call: { arguments: args, name }, role },
          finish_reason,
          index,
        };
      }
      if (tool_calls) {
        return {
          index,
          finish_reason,
          message: {
            role,
            content,
            tool_calls: tool_calls.map((tool_call, i) => {
              const { function: fn, type, id: id2 } = tool_call;
              const { arguments: args, name } = fn || {};
              if (id2 == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id
${str(snapshot)}`);
              if (type == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type
${str(snapshot)}`);
              if (name == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name
${str(snapshot)}`);
              if (args == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments
${str(snapshot)}`);
              return { id: id2, type, function: { name, arguments: args } };
            }),
          },
        };
      }
      return { message: { content, role }, finish_reason, index };
    }),
    created,
    model,
    object: "chat.completion",
  };
}
function str(x) {
  return JSON.stringify(x);
}

// ../../../../../../../../node_modules/langchain/node_modules/openai/lib/ChatCompletionStreamingRunner.mjs
var ChatCompletionStreamingRunner = class extends ChatCompletionStream {
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStreamingRunner();
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  static runFunctions(completions, params, options) {
    const runner = new ChatCompletionStreamingRunner();
    runner._run(() =>
      runner._runFunctions(completions, params, {
        ...options,
        headers: {
          ...(options == null ? void 0 : options.headers),
          "X-Stainless-Helper-Method": "runFunctions",
        },
      })
    );
    return runner;
  }
  static runTools(completions, params, options) {
    const runner = new ChatCompletionStreamingRunner();
    runner._run(() =>
      runner._runTools(completions, params, {
        ...options,
        headers: {
          ...(options == null ? void 0 : options.headers),
          "X-Stainless-Helper-Method": "runTools",
        },
      })
    );
    return runner;
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/chat/completions.mjs
var Completions2 = class extends APIResource {
  runFunctions(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner.runFunctions(
        this._client.chat.completions,
        body,
        options
      );
    }
    return ChatCompletionRunner.runFunctions(
      this._client.chat.completions,
      body,
      options
    );
  }
  runTools(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner.runTools(
        this._client.chat.completions,
        body,
        options
      );
    }
    return ChatCompletionRunner.runTools(
      this._client.chat.completions,
      body,
      options
    );
  }
  stream(body, options) {
    return ChatCompletionStream.createChatCompletion(
      this._client.chat.completions,
      body,
      options
    );
  }
};

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/chat/chat.mjs
var Chat2 = class extends APIResource {
  constructor() {
    super(...arguments);
    this.completions = new Completions2(this._client);
  }
};
(function (Chat6) {
  Chat6.Completions = Completions2;
})(Chat2 || (Chat2 = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/threads/messages/files.mjs
var Files2 = class extends APIResource {
  retrieve(threadId, messageId, fileId, options) {
    return this._client.get(
      `/threads/${threadId}/messages/${messageId}/files/${fileId}`,
      {
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  list(threadId, messageId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, messageId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/messages/${messageId}/files`,
      MessageFilesPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var MessageFilesPage = class extends CursorPage {};
(function (Files7) {
  Files7.MessageFilesPage = MessageFilesPage;
})(Files2 || (Files2 = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/threads/messages/messages.mjs
var Messages = class extends APIResource {
  constructor() {
    super(...arguments);
    this.files = new Files2(this._client);
  }
  create(threadId, body, options) {
    return this._client.post(`/threads/${threadId}/messages`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, messageId, options) {
    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, messageId, body, options) {
    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/messages`,
      ThreadMessagesPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var ThreadMessagesPage = class extends CursorPage {};
(function (Messages3) {
  Messages3.ThreadMessagesPage = ThreadMessagesPage;
  Messages3.Files = Files2;
  Messages3.MessageFilesPage = MessageFilesPage;
})(Messages || (Messages = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/threads/runs/steps.mjs
var Steps = class extends APIResource {
  retrieve(threadId, runId, stepId, options) {
    return this._client.get(
      `/threads/${threadId}/runs/${runId}/steps/${stepId}`,
      {
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  list(threadId, runId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, runId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/runs/${runId}/steps`,
      RunStepsPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var RunStepsPage = class extends CursorPage {};
(function (Steps3) {
  Steps3.RunStepsPage = RunStepsPage;
})(Steps || (Steps = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/threads/runs/runs.mjs
var Runs = class extends APIResource {
  constructor() {
    super(...arguments);
    this.steps = new Steps(this._client);
  }
  create(threadId, body, options) {
    return this._client.post(`/threads/${threadId}/runs`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, runId, options) {
    return this._client.get(`/threads/${threadId}/runs/${runId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, runId, body, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {
      query,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  cancel(threadId, runId, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  submitToolOutputs(threadId, runId, body, options) {
    return this._client.post(
      `/threads/${threadId}/runs/${runId}/submit_tool_outputs`,
      {
        body,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var RunsPage = class extends CursorPage {};
(function (Runs3) {
  Runs3.RunsPage = RunsPage;
  Runs3.Steps = Steps;
  Runs3.RunStepsPage = RunStepsPage;
})(Runs || (Runs = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/threads/threads.mjs
var Threads = class extends APIResource {
  constructor() {
    super(...arguments);
    this.runs = new Runs(this._client);
    this.messages = new Messages(this._client);
  }
  create(body = {}, options) {
    if (isRequestOptions(body)) {
      return this.create({}, body);
    }
    return this._client.post("/threads", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, options) {
    return this._client.get(`/threads/${threadId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, body, options) {
    return this._client.post(`/threads/${threadId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  del(threadId, options) {
    return this._client.delete(`/threads/${threadId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  createAndRun(body, options) {
    return this._client.post("/threads/runs", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
(function (Threads3) {
  Threads3.Runs = Runs;
  Threads3.RunsPage = RunsPage;
  Threads3.Messages = Messages;
  Threads3.ThreadMessagesPage = ThreadMessagesPage;
})(Threads || (Threads = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/beta/beta.mjs
var Beta = class extends APIResource {
  constructor() {
    super(...arguments);
    this.chat = new Chat2(this._client);
    this.assistants = new Assistants(this._client);
    this.threads = new Threads(this._client);
  }
};
(function (Beta3) {
  Beta3.Chat = Chat2;
  Beta3.Assistants = Assistants;
  Beta3.AssistantsPage = AssistantsPage;
  Beta3.Threads = Threads;
})(Beta || (Beta = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/completions.mjs
var Completions3 = class extends APIResource {
  create(body, options) {
    var _a4;
    return this._client.post("/completions", {
      body,
      ...options,
      stream: (_a4 = body.stream) != null ? _a4 : false,
    });
  }
};
(function (Completions8) {})(Completions3 || (Completions3 = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/embeddings.mjs
var Embeddings = class extends APIResource {
  create(body, options) {
    return this._client.post("/embeddings", { body, ...options });
  }
};
(function (Embeddings4) {})(Embeddings || (Embeddings = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/edits.mjs
var Edits = class extends APIResource {
  create(body, options) {
    return this._client.post("/edits", { body, ...options });
  }
};
(function (Edits3) {})(Edits || (Edits = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/files.mjs
var Files3 = class extends APIResource {
  create(body, options) {
    return this._client.post(
      "/files",
      multipartFormRequestOptions({ body, ...options })
    );
  }
  retrieve(fileId, options) {
    return this._client.get(`/files/${fileId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/files", FileObjectsPage, {
      query,
      ...options,
    });
  }
  del(fileId, options) {
    return this._client.delete(`/files/${fileId}`, options);
  }
  content(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, {
      ...options,
      __binaryResponse: true,
    });
  }
  retrieveContent(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, {
      ...options,
      headers: {
        Accept: "application/json",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  async waitForProcessing(
    id,
    { pollInterval = 5e3, maxWait = 30 * 60 * 1e3 } = {}
  ) {
    const TERMINAL_STATES = /* @__PURE__ */ new Set([
      "processed",
      "error",
      "deleted",
    ]);
    const start = Date.now();
    let file = await this.retrieve(id);
    while (!file.status || !TERMINAL_STATES.has(file.status)) {
      await sleep(pollInterval);
      file = await this.retrieve(id);
      if (Date.now() - start > maxWait) {
        throw new APIConnectionTimeoutError({
          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,
        });
      }
    }
    return file;
  }
};
var FileObjectsPage = class extends Page {};
(function (Files7) {
  Files7.FileObjectsPage = FileObjectsPage;
})(Files3 || (Files3 = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/fine-tunes.mjs
var FineTunes = class extends APIResource {
  create(body, options) {
    return this._client.post("/fine-tunes", { body, ...options });
  }
  retrieve(fineTuneId, options) {
    return this._client.get(`/fine-tunes/${fineTuneId}`, options);
  }
  list(options) {
    return this._client.getAPIList("/fine-tunes", FineTunesPage, options);
  }
  cancel(fineTuneId, options) {
    return this._client.post(`/fine-tunes/${fineTuneId}/cancel`, options);
  }
  listEvents(fineTuneId, query, options) {
    var _a4;
    return this._client.get(`/fine-tunes/${fineTuneId}/events`, {
      query,
      timeout: 864e5,
      ...options,
      stream:
        (_a4 = query == null ? void 0 : query.stream) != null ? _a4 : false,
    });
  }
};
var FineTunesPage = class extends Page {};
(function (FineTunes3) {
  FineTunes3.FineTunesPage = FineTunesPage;
})(FineTunes || (FineTunes = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/fine-tuning/jobs.mjs
var Jobs = class extends APIResource {
  create(body, options) {
    return this._client.post("/fine_tuning/jobs", { body, ...options });
  }
  retrieve(fineTuningJobId, options) {
    return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/fine_tuning/jobs", FineTuningJobsPage, {
      query,
      ...options,
    });
  }
  cancel(fineTuningJobId, options) {
    return this._client.post(
      `/fine_tuning/jobs/${fineTuningJobId}/cancel`,
      options
    );
  }
  listEvents(fineTuningJobId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.listEvents(fineTuningJobId, {}, query);
    }
    return this._client.getAPIList(
      `/fine_tuning/jobs/${fineTuningJobId}/events`,
      FineTuningJobEventsPage,
      {
        query,
        ...options,
      }
    );
  }
};
var FineTuningJobsPage = class extends CursorPage {};
var FineTuningJobEventsPage = class extends CursorPage {};
(function (Jobs3) {
  Jobs3.FineTuningJobsPage = FineTuningJobsPage;
  Jobs3.FineTuningJobEventsPage = FineTuningJobEventsPage;
})(Jobs || (Jobs = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/fine-tuning/fine-tuning.mjs
var FineTuning = class extends APIResource {
  constructor() {
    super(...arguments);
    this.jobs = new Jobs(this._client);
  }
};
(function (FineTuning3) {
  FineTuning3.Jobs = Jobs;
  FineTuning3.FineTuningJobsPage = FineTuningJobsPage;
  FineTuning3.FineTuningJobEventsPage = FineTuningJobEventsPage;
})(FineTuning || (FineTuning = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/images.mjs
var Images = class extends APIResource {
  createVariation(body, options) {
    return this._client.post(
      "/images/variations",
      multipartFormRequestOptions({ body, ...options })
    );
  }
  edit(body, options) {
    return this._client.post(
      "/images/edits",
      multipartFormRequestOptions({ body, ...options })
    );
  }
  generate(body, options) {
    return this._client.post("/images/generations", { body, ...options });
  }
};
(function (Images3) {})(Images || (Images = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/models.mjs
var Models = class extends APIResource {
  retrieve(model, options) {
    return this._client.get(`/models/${model}`, options);
  }
  list(options) {
    return this._client.getAPIList("/models", ModelsPage, options);
  }
  del(model, options) {
    return this._client.delete(`/models/${model}`, options);
  }
};
var ModelsPage = class extends Page {};
(function (Models4) {
  Models4.ModelsPage = ModelsPage;
})(Models || (Models = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/resources/moderations.mjs
var Moderations = class extends APIResource {
  create(body, options) {
    return this._client.post("/moderations", { body, ...options });
  }
};
(function (Moderations3) {})(Moderations || (Moderations = {}));

// ../../../../../../../../node_modules/langchain/node_modules/openai/index.mjs
var _a;
var OpenAI = class extends APIClient {
  constructor({
    apiKey = readEnv("OPENAI_API_KEY"),
    organization = ((_a4) =>
      (_a4 = readEnv("OPENAI_ORG_ID")) != null ? _a4 : null)(),
    ...opts
  } = {}) {
    var _a5, _b;
    if (apiKey === void 0) {
      throw new OpenAIError(
        "The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' })."
      );
    }
    const options = {
      apiKey,
      organization,
      ...opts,
      baseURL: (_a5 = opts.baseURL) != null ? _a5 : `https://api.openai.com/v1`,
    };
    if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
      throw new OpenAIError(
        "It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n"
      );
    }
    super({
      baseURL: options.baseURL,
      timeout: (_b = options.timeout) != null ? _b : 6e5,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch,
    });
    this.completions = new Completions3(this);
    this.chat = new Chat(this);
    this.edits = new Edits(this);
    this.embeddings = new Embeddings(this);
    this.files = new Files3(this);
    this.images = new Images(this);
    this.audio = new Audio(this);
    this.moderations = new Moderations(this);
    this.models = new Models(this);
    this.fineTuning = new FineTuning(this);
    this.fineTunes = new FineTunes(this);
    this.beta = new Beta(this);
    this._options = options;
    this.apiKey = apiKey;
    this.organization = organization;
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders(opts) {
    return {
      ...super.defaultHeaders(opts),
      "OpenAI-Organization": this.organization,
      ...this._options.defaultHeaders,
    };
  }
  authHeaders(opts) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
};
_a = OpenAI;
OpenAI.OpenAI = _a;
OpenAI.OpenAIError = OpenAIError;
OpenAI.APIError = APIError;
OpenAI.APIConnectionError = APIConnectionError;
OpenAI.APIConnectionTimeoutError = APIConnectionTimeoutError;
OpenAI.APIUserAbortError = APIUserAbortError;
OpenAI.NotFoundError = NotFoundError;
OpenAI.ConflictError = ConflictError;
OpenAI.RateLimitError = RateLimitError;
OpenAI.BadRequestError = BadRequestError;
OpenAI.AuthenticationError = AuthenticationError;
OpenAI.InternalServerError = InternalServerError;
OpenAI.PermissionDeniedError = PermissionDeniedError;
OpenAI.UnprocessableEntityError = UnprocessableEntityError;
var {
  OpenAIError: OpenAIError2,
  APIError: APIError2,
  APIConnectionError: APIConnectionError2,
  APIConnectionTimeoutError: APIConnectionTimeoutError2,
  APIUserAbortError: APIUserAbortError2,
  NotFoundError: NotFoundError2,
  ConflictError: ConflictError2,
  RateLimitError: RateLimitError2,
  BadRequestError: BadRequestError2,
  AuthenticationError: AuthenticationError2,
  InternalServerError: InternalServerError2,
  PermissionDeniedError: PermissionDeniedError2,
  UnprocessableEntityError: UnprocessableEntityError2,
} = error_exports;
(function (OpenAI3) {
  OpenAI3.toFile = toFile;
  OpenAI3.fileFromPath = fileFromPath;
  OpenAI3.Page = Page;
  OpenAI3.CursorPage = CursorPage;
  OpenAI3.Completions = Completions3;
  OpenAI3.Chat = Chat;
  OpenAI3.Edits = Edits;
  OpenAI3.Embeddings = Embeddings;
  OpenAI3.Files = Files3;
  OpenAI3.FileObjectsPage = FileObjectsPage;
  OpenAI3.Images = Images;
  OpenAI3.Audio = Audio;
  OpenAI3.Moderations = Moderations;
  OpenAI3.Models = Models;
  OpenAI3.ModelsPage = ModelsPage;
  OpenAI3.FineTuning = FineTuning;
  OpenAI3.FineTunes = FineTunes;
  OpenAI3.FineTunesPage = FineTunesPage;
  OpenAI3.Beta = Beta;
})(OpenAI || (OpenAI = {}));

// ../../../../../../../../node_modules/langchain/dist/util/chunk.js
var chunkArray = (arr, chunkSize) =>
  arr.reduce((chunks, elem, index) => {
    const chunkIndex = Math.floor(index / chunkSize);
    const chunk = chunks[chunkIndex] || [];
    chunks[chunkIndex] = chunk.concat([elem]);
    return chunks;
  }, []);

// ../../../../../../../../node_modules/langchain/dist/embeddings/base.js
var Embeddings2 = class {
  constructor(params) {
    Object.defineProperty(this, "caller", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    this.caller = new AsyncCaller2(params != null ? params : {});
  }
};

// ../../../../../../../../node_modules/langchain/dist/util/azure.js
function getEndpoint(config) {
  const {
    azureOpenAIApiDeploymentName,
    azureOpenAIApiInstanceName,
    azureOpenAIApiKey,
    azureOpenAIBasePath,
    baseURL,
  } = config;
  if (
    azureOpenAIApiKey &&
    azureOpenAIBasePath &&
    azureOpenAIApiDeploymentName
  ) {
    return `${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`;
  }
  if (azureOpenAIApiKey) {
    if (!azureOpenAIApiInstanceName) {
      throw new Error(
        "azureOpenAIApiInstanceName is required when using azureOpenAIApiKey"
      );
    }
    if (!azureOpenAIApiDeploymentName) {
      throw new Error(
        "azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey"
      );
    }
    return `https://${azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${azureOpenAIApiDeploymentName}`;
  }
  return baseURL;
}

// ../../../../../../../../node_modules/langchain/dist/util/openai.js
function wrapOpenAIClientError(e) {
  let error;
  if (e.constructor.name === APIConnectionTimeoutError2.name) {
    error = new Error(e.message);
    error.name = "TimeoutError";
  } else if (e.constructor.name === APIUserAbortError2.name) {
    error = new Error(e.message);
    error.name = "AbortError";
  } else {
    error = e;
  }
  return error;
}

// ../../../../../../../../node_modules/langchain/dist/embeddings/openai.js
var OpenAIEmbeddings = class extends Embeddings2 {
  constructor(fields, configuration) {
    var _a4, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
    const fieldsWithDefaults = { maxConcurrency: 2, ...fields };
    super(fieldsWithDefaults);
    Object.defineProperty(this, "modelName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "text-embedding-ada-002",
    });
    Object.defineProperty(this, "batchSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 512,
    });
    Object.defineProperty(this, "stripNewLines", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true,
    });
    Object.defineProperty(this, "timeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "azureOpenAIApiVersion", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "azureOpenAIApiKey", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "azureOpenAIApiInstanceName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "azureOpenAIApiDeploymentName", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "azureOpenAIBasePath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "organization", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "client", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    Object.defineProperty(this, "clientConfig", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0,
    });
    let apiKey =
      (_a4 =
        fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.openAIApiKey) != null
        ? _a4
        : getEnvironmentVariable2("OPENAI_API_KEY");
    const azureApiKey =
      (_b =
        fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.azureOpenAIApiKey) != null
        ? _b
        : getEnvironmentVariable2("AZURE_OPENAI_API_KEY");
    if (!azureApiKey && !apiKey) {
      throw new Error("OpenAI or Azure OpenAI API key not found");
    }
    const azureApiInstanceName =
      (_c =
        fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.azureOpenAIApiInstanceName) != null
        ? _c
        : getEnvironmentVariable2("AZURE_OPENAI_API_INSTANCE_NAME");
    const azureApiDeploymentName =
      (_d =
        (fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.azureOpenAIApiEmbeddingsDeploymentName) ||
        (fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.azureOpenAIApiDeploymentName)) != null
        ? _d
        : getEnvironmentVariable2(
            "AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME"
          ) || getEnvironmentVariable2("AZURE_OPENAI_API_DEPLOYMENT_NAME");
    const azureApiVersion =
      (_e =
        fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.azureOpenAIApiVersion) != null
        ? _e
        : getEnvironmentVariable2("AZURE_OPENAI_API_VERSION");
    this.azureOpenAIBasePath =
      (_f =
        fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.azureOpenAIBasePath) != null
        ? _f
        : getEnvironmentVariable2("AZURE_OPENAI_BASE_PATH");
    this.organization =
      (_h =
        (_g =
          fieldsWithDefaults == null
            ? void 0
            : fieldsWithDefaults.configuration) == null
          ? void 0
          : _g.organization) != null
        ? _h
        : getEnvironmentVariable2("OPENAI_ORGANIZATION");
    this.modelName =
      (_i =
        fieldsWithDefaults == null ? void 0 : fieldsWithDefaults.modelName) !=
      null
        ? _i
        : this.modelName;
    this.batchSize =
      (_j =
        fieldsWithDefaults == null ? void 0 : fieldsWithDefaults.batchSize) !=
      null
        ? _j
        : azureApiKey
        ? 1
        : this.batchSize;
    this.stripNewLines =
      (_k =
        fieldsWithDefaults == null
          ? void 0
          : fieldsWithDefaults.stripNewLines) != null
        ? _k
        : this.stripNewLines;
    this.timeout =
      fieldsWithDefaults == null ? void 0 : fieldsWithDefaults.timeout;
    this.azureOpenAIApiVersion = azureApiVersion;
    this.azureOpenAIApiKey = azureApiKey;
    this.azureOpenAIApiInstanceName = azureApiInstanceName;
    this.azureOpenAIApiDeploymentName = azureApiDeploymentName;
    if (this.azureOpenAIApiKey) {
      if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {
        throw new Error("Azure OpenAI API instance name not found");
      }
      if (!this.azureOpenAIApiDeploymentName) {
        throw new Error("Azure OpenAI API deployment name not found");
      }
      if (!this.azureOpenAIApiVersion) {
        throw new Error("Azure OpenAI API version not found");
      }
      apiKey = apiKey != null ? apiKey : "";
    }
    this.clientConfig = {
      apiKey,
      organization: this.organization,
      baseURL: configuration == null ? void 0 : configuration.basePath,
      dangerouslyAllowBrowser: true,
      defaultHeaders:
        (_l = configuration == null ? void 0 : configuration.baseOptions) ==
        null
          ? void 0
          : _l.headers,
      defaultQuery:
        (_m = configuration == null ? void 0 : configuration.baseOptions) ==
        null
          ? void 0
          : _m.params,
      ...configuration,
      ...(fields == null ? void 0 : fields.configuration),
    };
  }
  async embedDocuments(texts) {
    const batches = chunkArray(
      this.stripNewLines ? texts.map((t) => t.replace(/\n/g, " ")) : texts,
      this.batchSize
    );
    const batchRequests = batches.map((batch) =>
      this.embeddingWithRetry({
        model: this.modelName,
        input: batch,
      })
    );
    const batchResponses = await Promise.all(batchRequests);
    const embeddings = [];
    for (let i = 0; i < batchResponses.length; i += 1) {
      const batch = batches[i];
      const { data: batchResponse } = batchResponses[i];
      for (let j = 0; j < batch.length; j += 1) {
        embeddings.push(batchResponse[j].embedding);
      }
    }
    return embeddings;
  }
  async embedQuery(text) {
    const { data } = await this.embeddingWithRetry({
      model: this.modelName,
      input: this.stripNewLines ? text.replace(/\n/g, " ") : text,
    });
    return data[0].embedding;
  }
  async embeddingWithRetry(request4) {
    if (!this.client) {
      const openAIEndpointConfig = {
        azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,
        azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,
        azureOpenAIApiKey: this.azureOpenAIApiKey,
        azureOpenAIBasePath: this.azureOpenAIBasePath,
        baseURL: this.clientConfig.baseURL,
      };
      const endpoint = getEndpoint(openAIEndpointConfig);
      const params = {
        ...this.clientConfig,
        baseURL: endpoint,
        timeout: this.timeout,
        maxRetries: 0,
      };
      if (!params.baseURL) {
        delete params.baseURL;
      }
      this.client = new OpenAI(params);
    }
    const requestOptions = {};
    if (this.azureOpenAIApiKey) {
      requestOptions.headers = {
        "api-key": this.azureOpenAIApiKey,
        ...requestOptions.headers,
      };
      requestOptions.query = {
        "api-version": this.azureOpenAIApiVersion,
        ...requestOptions.query,
      };
    }
    return this.caller.call(async () => {
      try {
        const res = await this.client.embeddings.create(
          request4,
          requestOptions
        );
        return res;
      } catch (e) {
        const error = wrapOpenAIClientError(e);
        throw error;
      }
    });
  }
};

// src/utils.ts
var import_obsidian = require("obsidian");

// node_modules/openai/version.mjs
var VERSION2 = "4.20.0";

// node_modules/openai/_shims/registry.mjs
var auto2 = false;
var kind2 = void 0;
var fetch3 = void 0;
var Request3 = void 0;
var Response3 = void 0;
var Headers3 = void 0;
var FormData3 = void 0;
var Blob3 = void 0;
var File3 = void 0;
var ReadableStream3 = void 0;
var getMultipartRequestOptions2 = void 0;
var getDefaultAgent2 = void 0;
var fileFromPath2 = void 0;
var isFsReadStream2 = void 0;
function setShims2(shims, options = { auto: false }) {
  if (auto2) {
    throw new Error(
      `you must \`import 'openai/shims/${shims.kind}'\` before importing anything else from openai`
    );
  }
  if (kind2) {
    throw new Error(
      `can't \`import 'openai/shims/${shims.kind}'\` after \`import 'openai/shims/${kind2}'\``
    );
  }
  auto2 = options.auto;
  kind2 = shims.kind;
  fetch3 = shims.fetch;
  Request3 = shims.Request;
  Response3 = shims.Response;
  Headers3 = shims.Headers;
  FormData3 = shims.FormData;
  Blob3 = shims.Blob;
  File3 = shims.File;
  ReadableStream3 = shims.ReadableStream;
  getMultipartRequestOptions2 = shims.getMultipartRequestOptions;
  getDefaultAgent2 = shims.getDefaultAgent;
  fileFromPath2 = shims.fileFromPath;
  isFsReadStream2 = shims.isFsReadStream;
}

// node_modules/openai/_shims/MultipartBody.mjs
var MultipartBody2 = class {
  constructor(body) {
    this.body = body;
  }
  get [Symbol.toStringTag]() {
    return "MultipartBody";
  }
};

// node_modules/openai/_shims/web-runtime.mjs
function getRuntime2({ manuallyImported } = {}) {
  const recommendation = manuallyImported
    ? `You may need to use polyfills`
    : `Add one of these imports before your first \`import \u2026 from 'openai'\`:
- \`import 'openai/shims/node'\` (if you're running on Node)
- \`import 'openai/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(
      `this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`
    );
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData:
      typeof FormData !== "undefined"
        ? FormData
        : class FormData {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`
              );
            }
          },
    Blob:
      typeof Blob !== "undefined"
        ? Blob
        : class Blob {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`
              );
            }
          },
    File:
      typeof File !== "undefined"
        ? File
        : class File {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`
              );
            }
          },
    ReadableStream:
      typeof ReadableStream !== "undefined"
        ? ReadableStream
        : class ReadableStream {
            constructor() {
              throw new Error(
                `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`
              );
            }
          },
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody2(form),
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error(
        "The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads"
      );
    },
    isFsReadStream: (value) => false,
  };
}

// node_modules/openai/_shims/index.mjs
if (!kind2) setShims2(getRuntime2(), { auto: true });

// node_modules/openai/error.mjs
var error_exports2 = {};
__export(error_exports2, {
  APIConnectionError: () => APIConnectionError3,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError3,
  APIError: () => APIError3,
  APIUserAbortError: () => APIUserAbortError3,
  AuthenticationError: () => AuthenticationError3,
  BadRequestError: () => BadRequestError3,
  ConflictError: () => ConflictError3,
  InternalServerError: () => InternalServerError3,
  NotFoundError: () => NotFoundError3,
  OpenAIError: () => OpenAIError3,
  PermissionDeniedError: () => PermissionDeniedError3,
  RateLimitError: () => RateLimitError3,
  UnprocessableEntityError: () => UnprocessableEntityError3,
});
var OpenAIError3 = class extends Error {};
var APIError3 = class extends OpenAIError3 {
  constructor(status, error, message, headers) {
    super(`${APIError3.makeMessage(status, error, message)}`);
    this.status = status;
    this.headers = headers;
    const data = error;
    this.error = data;
    this.code = data == null ? void 0 : data["code"];
    this.param = data == null ? void 0 : data["param"];
    this.type = data == null ? void 0 : data["type"];
  }
  static makeMessage(status, error, message) {
    const msg = (error == null ? void 0 : error.message)
      ? typeof error.message === "string"
        ? error.message
        : JSON.stringify(error.message)
      : error
      ? JSON.stringify(error)
      : message;
    if (status && msg) {
      return `${status} ${msg}`;
    }
    if (status) {
      return `${status} status code (no body)`;
    }
    if (msg) {
      return msg;
    }
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status) {
      return new APIConnectionError3({ cause: castToError2(errorResponse) });
    }
    const error = errorResponse == null ? void 0 : errorResponse["error"];
    if (status === 400) {
      return new BadRequestError3(status, error, message, headers);
    }
    if (status === 401) {
      return new AuthenticationError3(status, error, message, headers);
    }
    if (status === 403) {
      return new PermissionDeniedError3(status, error, message, headers);
    }
    if (status === 404) {
      return new NotFoundError3(status, error, message, headers);
    }
    if (status === 409) {
      return new ConflictError3(status, error, message, headers);
    }
    if (status === 422) {
      return new UnprocessableEntityError3(status, error, message, headers);
    }
    if (status === 429) {
      return new RateLimitError3(status, error, message, headers);
    }
    if (status >= 500) {
      return new InternalServerError3(status, error, message, headers);
    }
    return new APIError3(status, error, message, headers);
  }
};
var APIUserAbortError3 = class extends APIError3 {
  constructor({ message } = {}) {
    super(void 0, void 0, message || "Request was aborted.", void 0);
    this.status = void 0;
  }
};
var APIConnectionError3 = class extends APIError3 {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    this.status = void 0;
    if (cause) this.cause = cause;
  }
};
var APIConnectionTimeoutError3 = class extends APIConnectionError3 {
  constructor({ message } = {}) {
    super({ message: message != null ? message : "Request timed out." });
  }
};
var BadRequestError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 400;
  }
};
var AuthenticationError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 401;
  }
};
var PermissionDeniedError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 403;
  }
};
var NotFoundError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 404;
  }
};
var ConflictError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 409;
  }
};
var UnprocessableEntityError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 422;
  }
};
var RateLimitError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 429;
  }
};
var InternalServerError3 = class extends APIError3 {};

// node_modules/openai/streaming.mjs
var Stream2 = class {
  constructor(iterator, controller) {
    this.iterator = iterator;
    this.controller = controller;
  }
  static fromSSEResponse(response, controller) {
    let consumed = false;
    const decoder = new SSEDecoder2();
    async function* iterMessages() {
      if (!response.body) {
        controller.abort();
        throw new OpenAIError3(
          `Attempted to iterate over a response with no body`
        );
      }
      const lineDecoder = new LineDecoder2();
      const iter = readableStreamAsyncIterable2(response.body);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          const sse = decoder.decode(line);
          if (sse) yield sse;
        }
      }
      for (const line of lineDecoder.flush()) {
        const sse = decoder.decode(line);
        if (sse) yield sse;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const sse of iterMessages()) {
          if (done) continue;
          if (sse.data.startsWith("[DONE]")) {
            done = true;
            continue;
          }
          if (sse.event === null) {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (data && data.error) {
              throw new APIError3(void 0, data.error, void 0, void 0);
            }
            yield data;
          }
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream2(iterator, controller);
  }
  static fromReadableStream(readableStream, controller) {
    let consumed = false;
    async function* iterLines() {
      const lineDecoder = new LineDecoder2();
      const iter = readableStreamAsyncIterable2(readableStream);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          yield line;
        }
      }
      for (const line of lineDecoder.flush()) {
        yield line;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const line of iterLines()) {
          if (done) continue;
          if (line) yield JSON.parse(line);
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream2(iterator, controller);
  }
  [Symbol.asyncIterator]() {
    return this.iterator();
  }
  tee() {
    const left = [];
    const right = [];
    const iterator = this.iterator();
    const teeIterator = (queue2) => {
      return {
        next: () => {
          if (queue2.length === 0) {
            const result = iterator.next();
            left.push(result);
            right.push(result);
          }
          return queue2.shift();
        },
      };
    };
    return [
      new Stream2(() => teeIterator(left), this.controller),
      new Stream2(() => teeIterator(right), this.controller),
    ];
  }
  toReadableStream() {
    const self = this;
    let iter;
    const encoder = new TextEncoder();
    return new ReadableStream3({
      async start() {
        iter = self[Symbol.asyncIterator]();
      },
      async pull(ctrl) {
        try {
          const { value, done } = await iter.next();
          if (done) return ctrl.close();
          const bytes = encoder.encode(JSON.stringify(value) + "\n");
          ctrl.enqueue(bytes);
        } catch (err) {
          ctrl.error(err);
        }
      },
      async cancel() {
        var _a4;
        await ((_a4 = iter.return) == null ? void 0 : _a4.call(iter));
      },
    });
  }
};
var SSEDecoder2 = class {
  constructor() {
    this.event = null;
    this.data = [];
    this.chunks = [];
  }
  decode(line) {
    if (line.endsWith("\r")) {
      line = line.substring(0, line.length - 1);
    }
    if (!line) {
      if (!this.event && !this.data.length) return null;
      const sse = {
        event: this.event,
        data: this.data.join("\n"),
        raw: this.chunks,
      };
      this.event = null;
      this.data = [];
      this.chunks = [];
      return sse;
    }
    this.chunks.push(line);
    if (line.startsWith(":")) {
      return null;
    }
    let [fieldname, _, value] = partition2(line, ":");
    if (value.startsWith(" ")) {
      value = value.substring(1);
    }
    if (fieldname === "event") {
      this.event = value;
    } else if (fieldname === "data") {
      this.data.push(value);
    }
    return null;
  }
};
var LineDecoder2 = class {
  constructor() {
    this.buffer = [];
    this.trailingCR = false;
  }
  decode(chunk) {
    let text = this.decodeText(chunk);
    if (this.trailingCR) {
      text = "\r" + text;
      this.trailingCR = false;
    }
    if (text.endsWith("\r")) {
      this.trailingCR = true;
      text = text.slice(0, -1);
    }
    if (!text) {
      return [];
    }
    const trailingNewline = LineDecoder2.NEWLINE_CHARS.has(
      text[text.length - 1] || ""
    );
    let lines = text.split(LineDecoder2.NEWLINE_REGEXP);
    if (lines.length === 1 && !trailingNewline) {
      this.buffer.push(lines[0]);
      return [];
    }
    if (this.buffer.length > 0) {
      lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
      this.buffer = [];
    }
    if (!trailingNewline) {
      this.buffer = [lines.pop() || ""];
    }
    return lines;
  }
  decodeText(bytes) {
    var _a4;
    if (bytes == null) return "";
    if (typeof bytes === "string") return bytes;
    if (typeof Buffer !== "undefined") {
      if (bytes instanceof Buffer) {
        return bytes.toString();
      }
      if (bytes instanceof Uint8Array) {
        return Buffer.from(bytes).toString();
      }
      throw new OpenAIError3(
        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`
      );
    }
    if (typeof TextDecoder !== "undefined") {
      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
        (_a4 = this.textDecoder) != null
          ? _a4
          : (this.textDecoder = new TextDecoder("utf8"));
        return this.textDecoder.decode(bytes);
      }
      throw new OpenAIError3(
        `Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`
      );
    }
    throw new OpenAIError3(
      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`
    );
  }
  flush() {
    if (!this.buffer.length && !this.trailingCR) {
      return [];
    }
    const lines = [this.buffer.join("")];
    this.buffer = [];
    this.trailingCR = false;
    return lines;
  }
};
LineDecoder2.NEWLINE_CHARS = /* @__PURE__ */ new Set([
  "\n",
  "\r",
  "\v",
  "\f",
  "",
  "",
  "",
  "\x85",
  "\u2028",
  "\u2029",
]);
LineDecoder2.NEWLINE_REGEXP =
  /\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;
function partition2(str3, delimiter) {
  const index = str3.indexOf(delimiter);
  if (index !== -1) {
    return [
      str3.substring(0, index),
      delimiter,
      str3.substring(index + delimiter.length),
    ];
  }
  return [str3, "", ""];
}
function readableStreamAsyncIterable2(stream) {
  if (stream[Symbol.asyncIterator]) return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done) reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    },
  };
}

// node_modules/openai/uploads.mjs
var isResponseLike2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.url === "string" &&
  typeof value.blob === "function";
var isFileLike2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.name === "string" &&
  typeof value.lastModified === "number" &&
  isBlobLike2(value);
var isBlobLike2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.size === "number" &&
  typeof value.type === "string" &&
  typeof value.text === "function" &&
  typeof value.slice === "function" &&
  typeof value.arrayBuffer === "function";
var isUploadable2 = (value) => {
  return isFileLike2(value) || isResponseLike2(value) || isFsReadStream2(value);
};
async function toFile2(value, name, options = {}) {
  var _a4, _b, _c;
  value = await value;
  if (isResponseLike2(value)) {
    const blob = await value.blob();
    name ||
      (name =
        (_a4 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null
          ? _a4
          : "unknown_file");
    return new File3([blob], name, options);
  }
  const bits = await getBytes2(value);
  name || (name = (_b = getName2(value)) != null ? _b : "unknown_file");
  if (!options.type) {
    const type = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File3(bits, name, options);
}
async function getBytes2(value) {
  var _a4;
  let parts = [];
  if (
    typeof value === "string" ||
    ArrayBuffer.isView(value) ||
    value instanceof ArrayBuffer
  ) {
    parts.push(value);
  } else if (isBlobLike2(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator2(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(
      `Unexpected data type: ${typeof value}; constructor: ${
        (_a4 = value == null ? void 0 : value.constructor) == null
          ? void 0
          : _a4.name
      }; props: ${propsForError2(value)}`
    );
  }
  return parts;
}
function propsForError2(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName2(value) {
  var _a4;
  return (
    getStringFromMaybeBuffer2(value.name) ||
    getStringFromMaybeBuffer2(value.filename) ||
    ((_a4 = getStringFromMaybeBuffer2(value.path)) == null
      ? void 0
      : _a4.split(/[\\/]/).pop())
  );
}
var getStringFromMaybeBuffer2 = (x) => {
  if (typeof x === "string") return x;
  if (typeof Buffer !== "undefined" && x instanceof Buffer) return String(x);
  return void 0;
};
var isAsyncIterableIterator2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value[Symbol.asyncIterator] === "function";
var isMultipartBody2 = (body) =>
  body &&
  typeof body === "object" &&
  body.body &&
  body[Symbol.toStringTag] === "MultipartBody";
var multipartFormRequestOptions2 = async (opts) => {
  const form = await createForm2(opts.body);
  return getMultipartRequestOptions2(form, opts);
};
var createForm2 = async (body) => {
  const form = new FormData3();
  await Promise.all(
    Object.entries(body || {}).map(([key, value]) =>
      addFormValue2(form, key, value)
    )
  );
  return form;
};
var addFormValue2 = async (form, key, value) => {
  if (value === void 0) return;
  if (value == null) {
    throw new TypeError(
      `Received null for "${key}"; to pass null in FormData, you must use the string 'null'`
    );
  }
  if (
    typeof value === "string" ||
    typeof value === "number" ||
    typeof value === "boolean"
  ) {
    form.append(key, String(value));
  } else if (isUploadable2(value)) {
    const file = await toFile2(value);
    form.append(key, file);
  } else if (Array.isArray(value)) {
    await Promise.all(
      value.map((entry) => addFormValue2(form, key + "[]", entry))
    );
  } else if (typeof value === "object") {
    await Promise.all(
      Object.entries(value).map(([name, prop]) =>
        addFormValue2(form, `${key}[${name}]`, prop)
      )
    );
  } else {
    throw new TypeError(
      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`
    );
  }
};

// node_modules/openai/core.mjs
var __classPrivateFieldSet4 = function (receiver, state, value, kind4, f) {
  if (kind4 === "m") throw new TypeError("Private method is not writable");
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind4 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet4 = function (receiver, state, kind4, f) {
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind4 === "m"
    ? f
    : kind4 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractPage_client2;
async function defaultParseResponse2(props) {
  const { response } = props;
  if (props.options.stream) {
    debug2(
      "response",
      response.status,
      response.url,
      response.headers,
      response.body
    );
    return Stream2.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  if (contentType == null ? void 0 : contentType.includes("application/json")) {
    const json = await response.json();
    debug2("response", response.status, response.url, response.headers, json);
    return json;
  }
  const text = await response.text();
  debug2("response", response.status, response.url, response.headers, text);
  return text;
}
var APIPromise2 = class extends Promise {
  constructor(responsePromise, parseResponse = defaultParseResponse2) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
    this.parseResponse = parseResponse;
  }
  _thenUnwrap(transform) {
    return new APIPromise2(this.responsePromise, async (props) =>
      transform(await this.parseResponse(props))
    );
  }
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  async withResponse() {
    const [data, response] = await Promise.all([
      this.parse(),
      this.asResponse(),
    ]);
    return { data, response };
  }
  parse() {
    if (!this.parsedPromise) {
      this.parsedPromise = this.responsePromise.then(this.parseResponse);
    }
    return this.parsedPromise;
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
};
var APIClient2 = class {
  constructor({
    baseURL,
    maxRetries = 2,
    timeout = 6e5,
    httpAgent,
    fetch: overridenFetch,
  }) {
    this.baseURL = baseURL;
    this.maxRetries = validatePositiveInteger2("maxRetries", maxRetries);
    this.timeout = validatePositiveInteger2("timeout", timeout);
    this.httpAgent = httpAgent;
    this.fetch = overridenFetch != null ? overridenFetch : fetch3;
  }
  authHeaders(opts) {
    return {};
  }
  defaultHeaders(opts) {
    return {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": this.getUserAgent(),
      ...getPlatformHeaders2(),
      ...this.authHeaders(opts),
    };
  }
  validateHeaders(headers, customHeaders) {}
  defaultIdempotencyKey() {
    return `stainless-node-retry-${uuid42()}`;
  }
  get(path, opts) {
    return this.methodRequest("get", path, opts);
  }
  post(path, opts) {
    return this.methodRequest("post", path, opts);
  }
  patch(path, opts) {
    return this.methodRequest("patch", path, opts);
  }
  put(path, opts) {
    return this.methodRequest("put", path, opts);
  }
  delete(path, opts) {
    return this.methodRequest("delete", path, opts);
  }
  methodRequest(method, path, opts) {
    return this.request(
      Promise.resolve(opts).then((opts2) => ({ method, path, ...opts2 }))
    );
  }
  getAPIList(path, Page3, opts) {
    return this.requestAPIList(Page3, { method: "get", path, ...opts });
  }
  calculateContentLength(body) {
    if (typeof body === "string") {
      if (typeof Buffer !== "undefined") {
        return Buffer.byteLength(body, "utf8").toString();
      }
      if (typeof TextEncoder !== "undefined") {
        const encoder = new TextEncoder();
        const encoded = encoder.encode(body);
        return encoded.length.toString();
      }
    }
    return null;
  }
  buildRequest(options) {
    var _a4, _b, _c, _d, _e, _f;
    const { method, path, query, headers = {} } = options;
    const body = isMultipartBody2(options.body)
      ? options.body.body
      : options.body
      ? JSON.stringify(options.body, null, 2)
      : null;
    const contentLength = this.calculateContentLength(body);
    const url = this.buildURL(path, query);
    if ("timeout" in options)
      validatePositiveInteger2("timeout", options.timeout);
    const timeout = (_a4 = options.timeout) != null ? _a4 : this.timeout;
    const httpAgent =
      (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null
        ? _c
        : getDefaultAgent2(url);
    const minAgentTimeout = timeout + 1e3;
    if (
      typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null
        ? void 0
        : _d.timeout) === "number" &&
      minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)
    ) {
      httpAgent.options.timeout = minAgentTimeout;
    }
    if (this.idempotencyHeader && method !== "get") {
      if (!options.idempotencyKey)
        options.idempotencyKey = this.defaultIdempotencyKey();
      headers[this.idempotencyHeader] = options.idempotencyKey;
    }
    const reqHeaders = {
      ...(contentLength && { "Content-Length": contentLength }),
      ...this.defaultHeaders(options),
      ...headers,
    };
    if (isMultipartBody2(options.body) && kind2 !== "node") {
      delete reqHeaders["Content-Type"];
    }
    Object.keys(reqHeaders).forEach(
      (key) => reqHeaders[key] === null && delete reqHeaders[key]
    );
    const req = {
      method,
      ...(body && { body }),
      headers: reqHeaders,
      ...(httpAgent && { agent: httpAgent }),
      signal: (_f = options.signal) != null ? _f : null,
    };
    this.validateHeaders(reqHeaders, headers);
    return { req, url, timeout };
  }
  async prepareRequest(request4, { url, options }) {}
  parseHeaders(headers) {
    return !headers
      ? {}
      : Symbol.iterator in headers
      ? Object.fromEntries(Array.from(headers).map((header) => [...header]))
      : { ...headers };
  }
  makeStatusError(status, error, message, headers) {
    return APIError3.generate(status, error, message, headers);
  }
  request(options, remainingRetries = null) {
    return new APIPromise2(this.makeRequest(options, remainingRetries));
  }
  async makeRequest(optionsInput, retriesRemaining) {
    var _a4, _b, _c;
    const options = await optionsInput;
    if (retriesRemaining == null) {
      retriesRemaining =
        (_a4 = options.maxRetries) != null ? _a4 : this.maxRetries;
    }
    const { req, url, timeout } = this.buildRequest(options);
    await this.prepareRequest(req, { url, options });
    debug2("request", url, options, req.headers);
    if ((_b = options.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError3();
    }
    const controller = new AbortController();
    const response = await this.fetchWithTimeout(
      url,
      req,
      timeout,
      controller
    ).catch(castToError2);
    if (response instanceof Error) {
      if ((_c = options.signal) == null ? void 0 : _c.aborted) {
        throw new APIUserAbortError3();
      }
      if (retriesRemaining) {
        return this.retryRequest(options, retriesRemaining);
      }
      if (response.name === "AbortError") {
        throw new APIConnectionTimeoutError3();
      }
      throw new APIConnectionError3({ cause: response });
    }
    const responseHeaders = createResponseHeaders2(response.headers);
    if (!response.ok) {
      if (retriesRemaining && this.shouldRetry(response)) {
        return this.retryRequest(options, retriesRemaining, responseHeaders);
      }
      const errText = await response
        .text()
        .catch((e) => castToError2(e).message);
      const errJSON = safeJSON2(errText);
      const errMessage = errJSON ? void 0 : errText;
      debug2("response", response.status, url, responseHeaders, errMessage);
      const err = this.makeStatusError(
        response.status,
        errJSON,
        errMessage,
        responseHeaders
      );
      throw err;
    }
    return { response, options, controller };
  }
  requestAPIList(Page3, options) {
    const request4 = this.makeRequest(options, null);
    return new PagePromise2(this, request4, Page3);
  }
  buildURL(path, query) {
    const url = isAbsoluteURL2(path)
      ? new URL(path)
      : new URL(
          this.baseURL +
            (this.baseURL.endsWith("/") && path.startsWith("/")
              ? path.slice(1)
              : path)
        );
    const defaultQuery = this.defaultQuery();
    if (!isEmptyObj2(defaultQuery)) {
      query = { ...defaultQuery, ...query };
    }
    if (query) {
      url.search = this.stringifyQuery(query);
    }
    return url.toString();
  }
  stringifyQuery(query) {
    return Object.entries(query)
      .filter(([_, value]) => typeof value !== "undefined")
      .map(([key, value]) => {
        if (
          typeof value === "string" ||
          typeof value === "number" ||
          typeof value === "boolean"
        ) {
          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
        }
        if (value === null) {
          return `${encodeURIComponent(key)}=`;
        }
        throw new OpenAIError3(
          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`
        );
      })
      .join("&");
  }
  async fetchWithTimeout(url, init, ms, controller) {
    const { signal, ...options } = init || {};
    if (signal) signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    return this.getRequestClient()
      .fetch.call(void 0, url, { signal: controller.signal, ...options })
      .finally(() => {
        clearTimeout(timeout);
      });
  }
  getRequestClient() {
    return { fetch: this.fetch };
  }
  shouldRetry(response) {
    const shouldRetryHeader = response.headers.get("x-should-retry");
    if (shouldRetryHeader === "true") return true;
    if (shouldRetryHeader === "false") return false;
    if (response.status === 408) return true;
    if (response.status === 409) return true;
    if (response.status === 429) return true;
    if (response.status >= 500) return true;
    return false;
  }
  async retryRequest(options, retriesRemaining, responseHeaders) {
    var _a4;
    let timeoutMillis;
    const retryAfterHeader =
      responseHeaders == null ? void 0 : responseHeaders["retry-after"];
    if (retryAfterHeader) {
      const timeoutSeconds = parseInt(retryAfterHeader);
      if (!Number.isNaN(timeoutSeconds)) {
        timeoutMillis = timeoutSeconds * 1e3;
      } else {
        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
      }
    }
    if (
      !timeoutMillis ||
      !Number.isInteger(timeoutMillis) ||
      timeoutMillis <= 0 ||
      timeoutMillis > 60 * 1e3
    ) {
      const maxRetries =
        (_a4 = options.maxRetries) != null ? _a4 : this.maxRetries;
      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(
        retriesRemaining,
        maxRetries
      );
    }
    await sleep2(timeoutMillis);
    return this.makeRequest(options, retriesRemaining - 1);
  }
  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
    const initialRetryDelay = 0.5;
    const maxRetryDelay = 8;
    const numRetries = maxRetries - retriesRemaining;
    const sleepSeconds = Math.min(
      initialRetryDelay * Math.pow(2, numRetries),
      maxRetryDelay
    );
    const jitter = 1 - Math.random() * 0.25;
    return sleepSeconds * jitter * 1e3;
  }
  getUserAgent() {
    return `${this.constructor.name}/JS ${VERSION2}`;
  }
};
var AbstractPage2 = class {
  constructor(client, response, body, options) {
    _AbstractPage_client2.set(this, void 0);
    __classPrivateFieldSet4(this, _AbstractPage_client2, client, "f");
    this.options = options;
    this.response = response;
    this.body = body;
  }
  hasNextPage() {
    const items = this.getPaginatedItems();
    if (!items.length) return false;
    return this.nextPageInfo() != null;
  }
  async getNextPage() {
    const nextInfo = this.nextPageInfo();
    if (!nextInfo) {
      throw new OpenAIError3(
        "No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`."
      );
    }
    const nextOptions = { ...this.options };
    if ("params" in nextInfo) {
      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
    } else if ("url" in nextInfo) {
      const params = [
        ...Object.entries(nextOptions.query || {}),
        ...nextInfo.url.searchParams.entries(),
      ];
      for (const [key, value] of params) {
        nextInfo.url.searchParams.set(key, value);
      }
      nextOptions.query = void 0;
      nextOptions.path = nextInfo.url.toString();
    }
    return await __classPrivateFieldGet4(
      this,
      _AbstractPage_client2,
      "f"
    ).requestAPIList(this.constructor, nextOptions);
  }
  async *iterPages() {
    let page = this;
    yield page;
    while (page.hasNextPage()) {
      page = await page.getNextPage();
      yield page;
    }
  }
  async *[((_AbstractPage_client2 = /* @__PURE__ */ new WeakMap()),
  Symbol.asyncIterator)]() {
    for await (const page of this.iterPages()) {
      for (const item of page.getPaginatedItems()) {
        yield item;
      }
    }
  }
};
var PagePromise2 = class extends APIPromise2 {
  constructor(client, request4, Page3) {
    super(
      request4,
      async (props) =>
        new Page3(
          client,
          props.response,
          await defaultParseResponse2(props),
          props.options
        )
    );
  }
  async *[Symbol.asyncIterator]() {
    const page = await this;
    for await (const item of page) {
      yield item;
    }
  }
};
var createResponseHeaders2 = (headers) => {
  return new Proxy(Object.fromEntries(headers.entries()), {
    get(target, name) {
      const key = name.toString();
      return target[key.toLowerCase()] || target[key];
    },
  });
};
var requestOptionsKeys2 = {
  method: true,
  path: true,
  query: true,
  body: true,
  headers: true,
  maxRetries: true,
  stream: true,
  timeout: true,
  httpAgent: true,
  signal: true,
  idempotencyKey: true,
  __binaryResponse: true,
};
var isRequestOptions2 = (obj) => {
  return (
    typeof obj === "object" &&
    obj !== null &&
    !isEmptyObj2(obj) &&
    Object.keys(obj).every((k) => hasOwn2(requestOptionsKeys2, k))
  );
};
var getPlatformProperties2 = () => {
  if (typeof Deno !== "undefined" && Deno.build != null) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": normalizePlatform2(Deno.build.os),
      "X-Stainless-Arch": normalizeArch2(Deno.build.arch),
      "X-Stainless-Runtime": "deno",
      "X-Stainless-Runtime-Version": Deno.version,
    };
  }
  if (typeof EdgeRuntime !== "undefined") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": `other:${EdgeRuntime}`,
      "X-Stainless-Runtime": "edge",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  if (
    Object.prototype.toString.call(
      typeof process !== "undefined" ? process : 0
    ) === "[object process]"
  ) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": normalizePlatform2(process.platform),
      "X-Stainless-Arch": normalizeArch2(process.arch),
      "X-Stainless-Runtime": "node",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  const browserInfo = getBrowserInfo2();
  if (browserInfo) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": "unknown",
      "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
      "X-Stainless-Runtime-Version": browserInfo.version,
    };
  }
  return {
    "X-Stainless-Lang": "js",
    "X-Stainless-Package-Version": VERSION2,
    "X-Stainless-OS": "Unknown",
    "X-Stainless-Arch": "unknown",
    "X-Stainless-Runtime": "unknown",
    "X-Stainless-Runtime-Version": "unknown",
  };
};
function getBrowserInfo2() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    {
      key: "safari",
      pattern:
        /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/,
    },
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
var normalizeArch2 = (arch) => {
  if (arch === "x32") return "x32";
  if (arch === "x86_64" || arch === "x64") return "x64";
  if (arch === "arm") return "arm";
  if (arch === "aarch64" || arch === "arm64") return "arm64";
  if (arch) return `other:${arch}`;
  return "unknown";
};
var normalizePlatform2 = (platform) => {
  platform = platform.toLowerCase();
  if (platform.includes("ios")) return "iOS";
  if (platform === "android") return "Android";
  if (platform === "darwin") return "MacOS";
  if (platform === "win32") return "Windows";
  if (platform === "freebsd") return "FreeBSD";
  if (platform === "openbsd") return "OpenBSD";
  if (platform === "linux") return "Linux";
  if (platform) return `Other:${platform}`;
  return "Unknown";
};
var _platformHeaders2;
var getPlatformHeaders2 = () => {
  return _platformHeaders2 != null
    ? _platformHeaders2
    : (_platformHeaders2 = getPlatformProperties2());
};
var safeJSON2 = (text) => {
  try {
    return JSON.parse(text);
  } catch (err) {
    return void 0;
  }
};
var startsWithSchemeRegexp2 = new RegExp("^(?:[a-z]+:)?//", "i");
var isAbsoluteURL2 = (url) => {
  return startsWithSchemeRegexp2.test(url);
};
var sleep2 = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
var validatePositiveInteger2 = (name, n) => {
  if (typeof n !== "number" || !Number.isInteger(n)) {
    throw new OpenAIError3(`${name} must be an integer`);
  }
  if (n < 0) {
    throw new OpenAIError3(`${name} must be a positive integer`);
  }
  return n;
};
var castToError2 = (err) => {
  if (err instanceof Error) return err;
  return new Error(err);
};
var readEnv2 = (env) => {
  var _a4, _b, _c, _d;
  if (typeof process !== "undefined") {
    return (_b = (_a4 = process.env) == null ? void 0 : _a4[env]) != null
      ? _b
      : void 0;
  }
  if (typeof Deno !== "undefined") {
    return (_d = (_c = Deno.env) == null ? void 0 : _c.get) == null
      ? void 0
      : _d.call(_c, env);
  }
  return void 0;
};
function isEmptyObj2(obj) {
  if (!obj) return true;
  for (const _k in obj) return false;
  return true;
}
function hasOwn2(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function debug2(action, ...args) {
  if (typeof process !== "undefined" && process.env["DEBUG"] === "true") {
    console.log(`OpenAI:DEBUG:${action}`, ...args);
  }
}
var uuid42 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 3) | 8;
    return v.toString(16);
  });
};
var isRunningInBrowser2 = () => {
  return (
    typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof navigator !== "undefined"
  );
};

// node_modules/openai/pagination.mjs
var Page2 = class extends AbstractPage2 {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data;
    this.object = body.object;
  }
  getPaginatedItems() {
    return this.data;
  }
  nextPageParams() {
    return null;
  }
  nextPageInfo() {
    return null;
  }
};
var CursorPage2 = class extends AbstractPage2 {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data;
  }
  getPaginatedItems() {
    return this.data;
  }
  nextPageParams() {
    const info = this.nextPageInfo();
    if (!info) return null;
    if ("params" in info) return info.params;
    const params = Object.fromEntries(info.url.searchParams);
    if (!Object.keys(params).length) return null;
    return params;
  }
  nextPageInfo() {
    var _a4, _b;
    if (!((_a4 = this.data) == null ? void 0 : _a4.length)) {
      return null;
    }
    const next =
      (_b = this.data[this.data.length - 1]) == null ? void 0 : _b.id;
    if (!next) return null;
    return { params: { after: next } };
  }
};

// node_modules/openai/resource.mjs
var APIResource2 = class {
  constructor(client) {
    this._client = client;
  }
};

// node_modules/openai/resources/chat/completions.mjs
var Completions4 = class extends APIResource2 {
  create(body, options) {
    var _a4;
    return this._client.post("/chat/completions", {
      body,
      ...options,
      stream: (_a4 = body.stream) != null ? _a4 : false,
    });
  }
};
(function (Completions8) {})(Completions4 || (Completions4 = {}));

// node_modules/openai/resources/chat/chat.mjs
var Chat3 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.completions = new Completions4(this._client);
  }
};
(function (Chat6) {
  Chat6.Completions = Completions4;
})(Chat3 || (Chat3 = {}));

// node_modules/openai/resources/audio/speech.mjs
var Speech2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post("/audio/speech", {
      body,
      ...options,
      __binaryResponse: true,
    });
  }
};
(function (Speech3) {})(Speech2 || (Speech2 = {}));

// node_modules/openai/resources/audio/transcriptions.mjs
var Transcriptions2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post(
      "/audio/transcriptions",
      multipartFormRequestOptions2({ body, ...options })
    );
  }
};
(function (Transcriptions4) {})(Transcriptions2 || (Transcriptions2 = {}));

// node_modules/openai/resources/audio/translations.mjs
var Translations2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post(
      "/audio/translations",
      multipartFormRequestOptions2({ body, ...options })
    );
  }
};
(function (Translations4) {})(Translations2 || (Translations2 = {}));

// node_modules/openai/resources/audio/audio.mjs
var Audio2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.transcriptions = new Transcriptions2(this._client);
    this.translations = new Translations2(this._client);
    this.speech = new Speech2(this._client);
  }
};
(function (Audio4) {
  Audio4.Transcriptions = Transcriptions2;
  Audio4.Translations = Translations2;
  Audio4.Speech = Speech2;
})(Audio2 || (Audio2 = {}));

// node_modules/openai/resources/beta/assistants/files.mjs
var Files4 = class extends APIResource2 {
  create(assistantId, body, options) {
    return this._client.post(`/assistants/${assistantId}/files`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(assistantId, fileId, options) {
    return this._client.get(`/assistants/${assistantId}/files/${fileId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(assistantId, query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list(assistantId, {}, query);
    }
    return this._client.getAPIList(
      `/assistants/${assistantId}/files`,
      AssistantFilesPage2,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  del(assistantId, fileId, options) {
    return this._client.delete(`/assistants/${assistantId}/files/${fileId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
var AssistantFilesPage2 = class extends CursorPage2 {};
(function (Files7) {
  Files7.AssistantFilesPage = AssistantFilesPage2;
})(Files4 || (Files4 = {}));

// node_modules/openai/resources/beta/assistants/assistants.mjs
var Assistants2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.files = new Files4(this._client);
  }
  create(body, options) {
    return this._client.post("/assistants", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(assistantId, options) {
    return this._client.get(`/assistants/${assistantId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(assistantId, body, options) {
    return this._client.post(`/assistants/${assistantId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/assistants", AssistantsPage2, {
      query,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  del(assistantId, options) {
    return this._client.delete(`/assistants/${assistantId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
var AssistantsPage2 = class extends CursorPage2 {};
(function (Assistants3) {
  Assistants3.AssistantsPage = AssistantsPage2;
  Assistants3.Files = Files4;
  Assistants3.AssistantFilesPage = AssistantFilesPage2;
})(Assistants2 || (Assistants2 = {}));

// node_modules/openai/lib/RunnableFunction.mjs
function isRunnableFunctionWithParse2(fn) {
  return typeof fn.parse === "function";
}

// node_modules/openai/lib/chatCompletionUtils.mjs
var isAssistantMessage2 = (message) => {
  return (message == null ? void 0 : message.role) === "assistant";
};
var isFunctionMessage2 = (message) => {
  return (message == null ? void 0 : message.role) === "function";
};
var isToolMessage2 = (message) => {
  return (message == null ? void 0 : message.role) === "tool";
};

// node_modules/openai/lib/AbstractChatCompletionRunner.mjs
var __classPrivateFieldSet5 = function (receiver, state, value, kind4, f) {
  if (kind4 === "m") throw new TypeError("Private method is not writable");
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind4 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet5 = function (receiver, state, kind4, f) {
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind4 === "m"
    ? f
    : kind4 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractChatCompletionRunner_instances2;
var _AbstractChatCompletionRunner_connectedPromise2;
var _AbstractChatCompletionRunner_resolveConnectedPromise2;
var _AbstractChatCompletionRunner_rejectConnectedPromise2;
var _AbstractChatCompletionRunner_endPromise2;
var _AbstractChatCompletionRunner_resolveEndPromise2;
var _AbstractChatCompletionRunner_rejectEndPromise2;
var _AbstractChatCompletionRunner_listeners2;
var _AbstractChatCompletionRunner_ended2;
var _AbstractChatCompletionRunner_errored2;
var _AbstractChatCompletionRunner_aborted2;
var _AbstractChatCompletionRunner_catchingPromiseCreated2;
var _AbstractChatCompletionRunner_getFinalContent3;
var _AbstractChatCompletionRunner_getFinalMessage3;
var _AbstractChatCompletionRunner_getFinalFunctionCall3;
var _AbstractChatCompletionRunner_getFinalFunctionCallResult3;
var _AbstractChatCompletionRunner_calculateTotalUsage3;
var _AbstractChatCompletionRunner_handleError2;
var _AbstractChatCompletionRunner_validateParams3;
var _AbstractChatCompletionRunner_stringifyFunctionCallResult3;
var DEFAULT_MAX_CHAT_COMPLETIONS2 = 10;
var AbstractChatCompletionRunner2 = class {
  constructor() {
    _AbstractChatCompletionRunner_instances2.add(this);
    this.controller = new AbortController();
    _AbstractChatCompletionRunner_connectedPromise2.set(this, void 0);
    _AbstractChatCompletionRunner_resolveConnectedPromise2.set(this, () => {});
    _AbstractChatCompletionRunner_rejectConnectedPromise2.set(this, () => {});
    _AbstractChatCompletionRunner_endPromise2.set(this, void 0);
    _AbstractChatCompletionRunner_resolveEndPromise2.set(this, () => {});
    _AbstractChatCompletionRunner_rejectEndPromise2.set(this, () => {});
    _AbstractChatCompletionRunner_listeners2.set(this, {});
    this._chatCompletions = [];
    this.messages = [];
    _AbstractChatCompletionRunner_ended2.set(this, false);
    _AbstractChatCompletionRunner_errored2.set(this, false);
    _AbstractChatCompletionRunner_aborted2.set(this, false);
    _AbstractChatCompletionRunner_catchingPromiseCreated2.set(this, false);
    _AbstractChatCompletionRunner_handleError2.set(this, (error) => {
      __classPrivateFieldSet5(
        this,
        _AbstractChatCompletionRunner_errored2,
        true,
        "f"
      );
      if (error instanceof Error && error.name === "AbortError") {
        error = new APIUserAbortError3();
      }
      if (error instanceof APIUserAbortError3) {
        __classPrivateFieldSet5(
          this,
          _AbstractChatCompletionRunner_aborted2,
          true,
          "f"
        );
        return this._emit("abort", error);
      }
      if (error instanceof OpenAIError3) {
        return this._emit("error", error);
      }
      if (error instanceof Error) {
        const openAIError = new OpenAIError3(error.message);
        openAIError.cause = error;
        return this._emit("error", openAIError);
      }
      return this._emit("error", new OpenAIError3(String(error)));
    });
    __classPrivateFieldSet5(
      this,
      _AbstractChatCompletionRunner_connectedPromise2,
      new Promise((resolve, reject) => {
        __classPrivateFieldSet5(
          this,
          _AbstractChatCompletionRunner_resolveConnectedPromise2,
          resolve,
          "f"
        );
        __classPrivateFieldSet5(
          this,
          _AbstractChatCompletionRunner_rejectConnectedPromise2,
          reject,
          "f"
        );
      }),
      "f"
    );
    __classPrivateFieldSet5(
      this,
      _AbstractChatCompletionRunner_endPromise2,
      new Promise((resolve, reject) => {
        __classPrivateFieldSet5(
          this,
          _AbstractChatCompletionRunner_resolveEndPromise2,
          resolve,
          "f"
        );
        __classPrivateFieldSet5(
          this,
          _AbstractChatCompletionRunner_rejectEndPromise2,
          reject,
          "f"
        );
      }),
      "f"
    );
    __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_connectedPromise2,
      "f"
    ).catch(() => {});
    __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_endPromise2,
      "f"
    ).catch(() => {});
  }
  _run(executor) {
    setTimeout(() => {
      executor().then(() => {
        this._emitFinal();
        this._emit("end");
      }, __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_handleError2, "f"));
    }, 0);
  }
  _addChatCompletion(chatCompletion) {
    var _a4;
    this._chatCompletions.push(chatCompletion);
    this._emit("chatCompletion", chatCompletion);
    const message =
      (_a4 = chatCompletion.choices[0]) == null ? void 0 : _a4.message;
    if (message) this._addMessage(message);
    return chatCompletion;
  }
  _addMessage(message, emit = true) {
    this.messages.push(message);
    if (emit) {
      this._emit("message", message);
      if (
        (isFunctionMessage2(message) || isToolMessage2(message)) &&
        message.content
      ) {
        this._emit("functionCallResult", message.content);
      } else if (isAssistantMessage2(message) && message.function_call) {
        this._emit("functionCall", message.function_call);
      } else if (isAssistantMessage2(message) && message.tool_calls) {
        for (const tool_call of message.tool_calls) {
          if (tool_call.type === "function") {
            this._emit("functionCall", tool_call.function);
          }
        }
      }
    }
  }
  _connected() {
    if (this.ended) return;
    __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_resolveConnectedPromise2,
      "f"
    ).call(this);
    this._emit("connect");
  }
  get ended() {
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_ended2,
      "f"
    );
  }
  get errored() {
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_errored2,
      "f"
    );
  }
  get aborted() {
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_aborted2,
      "f"
    );
  }
  abort() {
    this.controller.abort();
  }
  on(event, listener) {
    const listeners =
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_listeners2,
        "f"
      )[event] ||
      (__classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_listeners2,
        "f"
      )[event] = []);
    listeners.push({ listener });
    return this;
  }
  off(event, listener) {
    const listeners = __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_listeners2,
      "f"
    )[event];
    if (!listeners) return this;
    const index = listeners.findIndex((l) => l.listener === listener);
    if (index >= 0) listeners.splice(index, 1);
    return this;
  }
  once(event, listener) {
    const listeners =
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_listeners2,
        "f"
      )[event] ||
      (__classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_listeners2,
        "f"
      )[event] = []);
    listeners.push({ listener, once: true });
    return this;
  }
  emitted(event) {
    return new Promise((resolve, reject) => {
      __classPrivateFieldSet5(
        this,
        _AbstractChatCompletionRunner_catchingPromiseCreated2,
        true,
        "f"
      );
      if (event !== "error") this.once("error", reject);
      this.once(event, resolve);
    });
  }
  async done() {
    __classPrivateFieldSet5(
      this,
      _AbstractChatCompletionRunner_catchingPromiseCreated2,
      true,
      "f"
    );
    await __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_endPromise2,
      "f"
    );
  }
  async finalChatCompletion() {
    await this.done();
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (!completion)
      throw new OpenAIError3("stream ended without producing a ChatCompletion");
    return completion;
  }
  async finalContent() {
    await this.done();
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_getFinalContent3
    ).call(this);
  }
  async finalMessage() {
    await this.done();
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_getFinalMessage3
    ).call(this);
  }
  async finalFunctionCall() {
    await this.done();
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCall3
    ).call(this);
  }
  async finalFunctionCallResult() {
    await this.done();
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCallResult3
    ).call(this);
  }
  async totalUsage() {
    await this.done();
    return __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_calculateTotalUsage3
    ).call(this);
  }
  allChatCompletions() {
    return [...this._chatCompletions];
  }
  _emit(event, ...args) {
    if (
      __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_ended2, "f")
    )
      return;
    if (event === "end") {
      __classPrivateFieldSet5(
        this,
        _AbstractChatCompletionRunner_ended2,
        true,
        "f"
      );
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_resolveEndPromise2,
        "f"
      ).call(this);
    }
    const listeners = __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_listeners2,
      "f"
    )[event];
    if (listeners) {
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_listeners2,
        "f"
      )[event] = listeners.filter((l) => !l.once);
      listeners.forEach(({ listener }) => listener(...args));
    }
    if (event === "abort") {
      const error = args[0];
      if (
        !__classPrivateFieldGet5(
          this,
          _AbstractChatCompletionRunner_catchingPromiseCreated2,
          "f"
        ) &&
        !(listeners == null ? void 0 : listeners.length)
      ) {
        Promise.reject(error);
      }
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_rejectConnectedPromise2,
        "f"
      ).call(this, error);
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_rejectEndPromise2,
        "f"
      ).call(this, error);
      this._emit("end");
      return;
    }
    if (event === "error") {
      const error = args[0];
      if (
        !__classPrivateFieldGet5(
          this,
          _AbstractChatCompletionRunner_catchingPromiseCreated2,
          "f"
        ) &&
        !(listeners == null ? void 0 : listeners.length)
      ) {
        Promise.reject(error);
      }
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_rejectConnectedPromise2,
        "f"
      ).call(this, error);
      __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_rejectEndPromise2,
        "f"
      ).call(this, error);
      this._emit("end");
    }
  }
  _emitFinal() {
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (completion) this._emit("finalChatCompletion", completion);
    const finalMessage = this.messages[this.messages.length - 1];
    if (finalMessage) this._emit("finalMessage", finalMessage);
    const finalContent = __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_getFinalContent3
    ).call(this);
    if (finalContent) this._emit("finalContent", finalContent);
    const finalFunctionCall = __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCall3
    ).call(this);
    if (finalFunctionCall) this._emit("finalFunctionCall", finalFunctionCall);
    const finalFunctionCallResult = __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCallResult3
    ).call(this);
    if (finalFunctionCallResult != null)
      this._emit("finalFunctionCallResult", finalFunctionCallResult);
    if (this._chatCompletions.some((c) => c.usage)) {
      this._emit(
        "totalUsage",
        __classPrivateFieldGet5(
          this,
          _AbstractChatCompletionRunner_instances2,
          "m",
          _AbstractChatCompletionRunner_calculateTotalUsage3
        ).call(this)
      );
    }
  }
  async _createChatCompletion(completions, params, options) {
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet5(
      this,
      _AbstractChatCompletionRunner_instances2,
      "m",
      _AbstractChatCompletionRunner_validateParams3
    ).call(this, params);
    const chatCompletion = await completions.create(
      { ...params, stream: false },
      { ...options, signal: this.controller.signal }
    );
    this._connected();
    return this._addChatCompletion(chatCompletion);
  }
  async _runChatCompletion(completions, params, options) {
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    return await this._createChatCompletion(completions, params, options);
  }
  async _runFunctions(completions, params, options) {
    var _a4;
    const role = "function";
    const { function_call = "auto", stream, ...restParams } = params;
    const singleFunctionToCall =
      typeof function_call !== "string" &&
      (function_call == null ? void 0 : function_call.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS2 } =
      options || {};
    const functionsByName = {};
    for (const f of params.functions) {
      functionsByName[f.name || f.function.name] = f;
    }
    const functions = params.functions.map((f) => ({
      name: f.name || f.function.name,
      parameters: f.parameters,
      description: f.description,
    }));
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(
        completions,
        {
          ...restParams,
          function_call,
          functions,
          messages: [...this.messages],
        },
        options
      );
      const message =
        (_a4 = chatCompletion.choices[0]) == null ? void 0 : _a4.message;
      if (!message) {
        throw new OpenAIError3(`missing message in ChatCompletion response`);
      }
      if (!message.function_call) return;
      const { name, arguments: args } = message.function_call;
      const fn = functionsByName[name];
      if (!fn) {
        const content2 = `Invalid function_call: ${JSON.stringify(
          name
        )}. Available options are: ${functions
          .map((f) => JSON.stringify(f.name))
          .join(", ")}. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      } else if (singleFunctionToCall && singleFunctionToCall !== name) {
        const content2 = `Invalid function_call: ${JSON.stringify(
          name
        )}. ${JSON.stringify(
          singleFunctionToCall
        )} requested. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      }
      let parsed;
      try {
        parsed = isRunnableFunctionWithParse2(fn) ? await fn.parse(args) : args;
      } catch (error) {
        this._addMessage({
          role,
          name,
          content: error instanceof Error ? error.message : String(error),
        });
        continue;
      }
      const rawContent = await fn.function(parsed, this);
      const content = __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_instances2,
        "m",
        _AbstractChatCompletionRunner_stringifyFunctionCallResult3
      ).call(this, rawContent);
      this._addMessage({ role, name, content });
      if (singleFunctionToCall) return;
    }
  }
  async _runTools(completions, params, options) {
    var _a4, _b;
    const role = "tool";
    const { tool_choice = "auto", stream, ...restParams } = params;
    const singleFunctionToCall =
      typeof tool_choice !== "string" &&
      ((_a4 = tool_choice == null ? void 0 : tool_choice.function) == null
        ? void 0
        : _a4.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS2 } =
      options || {};
    const functionsByName = {};
    for (const f of params.tools) {
      if (f.type === "function") {
        functionsByName[f.function.name || f.function.function.name] =
          f.function;
      }
    }
    const tools =
      "tools" in params
        ? params.tools.map((t) =>
            t.type === "function"
              ? {
                  type: "function",
                  function: {
                    name: t.function.name || t.function.function.name,
                    parameters: t.function.parameters,
                    description: t.function.description,
                  },
                }
              : t
          )
        : void 0;
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(
        completions,
        {
          ...restParams,
          tool_choice,
          tools,
          messages: [...this.messages],
        },
        options
      );
      const message =
        (_b = chatCompletion.choices[0]) == null ? void 0 : _b.message;
      if (!message) {
        throw new OpenAIError3(`missing message in ChatCompletion response`);
      }
      if (!message.tool_calls) return;
      for (const tool_call of message.tool_calls) {
        if (tool_call.type !== "function") continue;
        const tool_call_id = tool_call.id;
        const { name, arguments: args } = tool_call.function;
        const fn = functionsByName[name];
        if (!fn) {
          const content2 = `Invalid tool_call: ${JSON.stringify(
            name
          )}. Available options are: ${tools
            .map((f) => JSON.stringify(f.function.name))
            .join(", ")}. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        } else if (singleFunctionToCall && singleFunctionToCall !== name) {
          const content2 = `Invalid tool_call: ${JSON.stringify(
            name
          )}. ${JSON.stringify(
            singleFunctionToCall
          )} requested. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        let parsed;
        try {
          parsed = isRunnableFunctionWithParse2(fn)
            ? await fn.parse(args)
            : args;
        } catch (error) {
          const content2 =
            error instanceof Error ? error.message : String(error);
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        const rawContent = await fn.function(parsed, this);
        const content = __classPrivateFieldGet5(
          this,
          _AbstractChatCompletionRunner_instances2,
          "m",
          _AbstractChatCompletionRunner_stringifyFunctionCallResult3
        ).call(this, rawContent);
        this._addMessage({ role, tool_call_id, content });
        if (singleFunctionToCall) return;
      }
    }
  }
};
(_AbstractChatCompletionRunner_connectedPromise2 =
  /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_resolveConnectedPromise2 =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_rejectConnectedPromise2 =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_endPromise2 = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_resolveEndPromise2 =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_rejectEndPromise2 =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_listeners2 = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_ended2 = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_errored2 = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_aborted2 = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_catchingPromiseCreated2 =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_handleError2 = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_instances2 = /* @__PURE__ */ new WeakSet()),
  (_AbstractChatCompletionRunner_getFinalContent3 =
    function _AbstractChatCompletionRunner_getFinalContent4() {
      return __classPrivateFieldGet5(
        this,
        _AbstractChatCompletionRunner_instances2,
        "m",
        _AbstractChatCompletionRunner_getFinalMessage3
      ).call(this).content;
    }),
  (_AbstractChatCompletionRunner_getFinalMessage3 =
    function _AbstractChatCompletionRunner_getFinalMessage4() {
      let i = this.messages.length;
      while (i-- > 0) {
        const message = this.messages[i];
        if (isAssistantMessage2(message)) {
          return message;
        }
      }
      throw new OpenAIError3(
        "stream ended without producing a ChatCompletionMessage with role=assistant"
      );
    }),
  (_AbstractChatCompletionRunner_getFinalFunctionCall3 =
    function _AbstractChatCompletionRunner_getFinalFunctionCall4() {
      for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (
          isAssistantMessage2(message) &&
          (message == null ? void 0 : message.function_call)
        ) {
          return message.function_call;
        }
      }
      return;
    }),
  (_AbstractChatCompletionRunner_getFinalFunctionCallResult3 =
    function _AbstractChatCompletionRunner_getFinalFunctionCallResult4() {
      for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (isFunctionMessage2(message) && message.content != null) {
          return message.content;
        }
      }
      return;
    }),
  (_AbstractChatCompletionRunner_calculateTotalUsage3 =
    function _AbstractChatCompletionRunner_calculateTotalUsage4() {
      const total = {
        completion_tokens: 0,
        prompt_tokens: 0,
        total_tokens: 0,
      };
      for (const { usage } of this._chatCompletions) {
        if (usage) {
          total.completion_tokens += usage.completion_tokens;
          total.prompt_tokens += usage.prompt_tokens;
          total.total_tokens += usage.total_tokens;
        }
      }
      return total;
    }),
  (_AbstractChatCompletionRunner_validateParams3 =
    function _AbstractChatCompletionRunner_validateParams4(params) {
      if (params.n != null && params.n > 1) {
        throw new OpenAIError3(
          "ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly."
        );
      }
    }),
  (_AbstractChatCompletionRunner_stringifyFunctionCallResult3 =
    function _AbstractChatCompletionRunner_stringifyFunctionCallResult4(
      rawContent
    ) {
      return typeof rawContent === "string"
        ? rawContent
        : rawContent === void 0
        ? "undefined"
        : JSON.stringify(rawContent);
    });

// node_modules/openai/lib/ChatCompletionRunner.mjs
var ChatCompletionRunner2 = class extends AbstractChatCompletionRunner2 {
  static runFunctions(completions, params, options) {
    const runner = new ChatCompletionRunner2();
    runner._run(() => runner._runFunctions(completions, params, options));
    return runner;
  }
  static runTools(completions, params, options) {
    const runner = new ChatCompletionRunner2();
    runner._run(() => runner._runTools(completions, params, options));
    return runner;
  }
  _addMessage(message) {
    super._addMessage(message);
    if (isAssistantMessage2(message) && message.content) {
      this._emit("content", message.content);
    }
  }
};

// node_modules/openai/lib/ChatCompletionStream.mjs
var __classPrivateFieldGet6 = function (receiver, state, kind4, f) {
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind4 === "m"
    ? f
    : kind4 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var __classPrivateFieldSet6 = function (receiver, state, value, kind4, f) {
  if (kind4 === "m") throw new TypeError("Private method is not writable");
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind4 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var _ChatCompletionStream_instances2;
var _ChatCompletionStream_currentChatCompletionSnapshot2;
var _ChatCompletionStream_beginRequest2;
var _ChatCompletionStream_addChunk2;
var _ChatCompletionStream_endRequest2;
var _ChatCompletionStream_accumulateChatCompletion2;
var ChatCompletionStream2 = class extends AbstractChatCompletionRunner2 {
  constructor() {
    super(...arguments);
    _ChatCompletionStream_instances2.add(this);
    _ChatCompletionStream_currentChatCompletionSnapshot2.set(this, void 0);
  }
  get currentChatCompletionSnapshot() {
    return __classPrivateFieldGet6(
      this,
      _ChatCompletionStream_currentChatCompletionSnapshot2,
      "f"
    );
  }
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStream2();
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  static createChatCompletion(completions, params, options) {
    const runner = new ChatCompletionStream2();
    runner._run(() =>
      runner._runChatCompletion(
        completions,
        { ...params, stream: true },
        {
          ...options,
          headers: {
            ...(options == null ? void 0 : options.headers),
            "X-Stainless-Helper-Method": "stream",
          },
        }
      )
    );
    return runner;
  }
  async _createChatCompletion(completions, params, options) {
    var _a4;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet6(
      this,
      _ChatCompletionStream_instances2,
      "m",
      _ChatCompletionStream_beginRequest2
    ).call(this);
    const stream = await completions.create(
      { ...params, stream: true },
      { ...options, signal: this.controller.signal }
    );
    this._connected();
    for await (const chunk of stream) {
      __classPrivateFieldGet6(
        this,
        _ChatCompletionStream_instances2,
        "m",
        _ChatCompletionStream_addChunk2
      ).call(this, chunk);
    }
    if ((_a4 = stream.controller.signal) == null ? void 0 : _a4.aborted) {
      throw new APIUserAbortError3();
    }
    return this._addChatCompletion(
      __classPrivateFieldGet6(
        this,
        _ChatCompletionStream_instances2,
        "m",
        _ChatCompletionStream_endRequest2
      ).call(this)
    );
  }
  async _fromReadableStream(readableStream, options) {
    var _a4;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet6(
      this,
      _ChatCompletionStream_instances2,
      "m",
      _ChatCompletionStream_beginRequest2
    ).call(this);
    this._connected();
    const stream = Stream2.fromReadableStream(readableStream, this.controller);
    let chatId;
    for await (const chunk of stream) {
      if (chatId && chatId !== chunk.id) {
        this._addChatCompletion(
          __classPrivateFieldGet6(
            this,
            _ChatCompletionStream_instances2,
            "m",
            _ChatCompletionStream_endRequest2
          ).call(this)
        );
      }
      __classPrivateFieldGet6(
        this,
        _ChatCompletionStream_instances2,
        "m",
        _ChatCompletionStream_addChunk2
      ).call(this, chunk);
      chatId = chunk.id;
    }
    if ((_a4 = stream.controller.signal) == null ? void 0 : _a4.aborted) {
      throw new APIUserAbortError3();
    }
    return this._addChatCompletion(
      __classPrivateFieldGet6(
        this,
        _ChatCompletionStream_instances2,
        "m",
        _ChatCompletionStream_endRequest2
      ).call(this)
    );
  }
  [((_ChatCompletionStream_currentChatCompletionSnapshot2 =
    /* @__PURE__ */ new WeakMap()),
  (_ChatCompletionStream_instances2 = /* @__PURE__ */ new WeakSet()),
  (_ChatCompletionStream_beginRequest2 =
    function _ChatCompletionStream_beginRequest3() {
      if (this.ended) return;
      __classPrivateFieldSet6(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot2,
        void 0,
        "f"
      );
    }),
  (_ChatCompletionStream_addChunk2 = function _ChatCompletionStream_addChunk3(
    chunk
  ) {
    var _a4, _b, _c;
    if (this.ended) return;
    const completion = __classPrivateFieldGet6(
      this,
      _ChatCompletionStream_instances2,
      "m",
      _ChatCompletionStream_accumulateChatCompletion2
    ).call(this, chunk);
    this._emit("chunk", chunk, completion);
    const delta =
      (_b = (_a4 = chunk.choices[0]) == null ? void 0 : _a4.delta) == null
        ? void 0
        : _b.content;
    const snapshot = (_c = completion.choices[0]) == null ? void 0 : _c.message;
    if (
      delta != null &&
      (snapshot == null ? void 0 : snapshot.role) === "assistant" &&
      (snapshot == null ? void 0 : snapshot.content)
    ) {
      this._emit("content", delta, snapshot.content);
    }
  }),
  (_ChatCompletionStream_endRequest2 =
    function _ChatCompletionStream_endRequest3() {
      if (this.ended) {
        throw new OpenAIError3(`stream has ended, this shouldn't happen`);
      }
      const snapshot = __classPrivateFieldGet6(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot2,
        "f"
      );
      if (!snapshot) {
        throw new OpenAIError3(`request ended without sending any chunks`);
      }
      __classPrivateFieldSet6(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot2,
        void 0,
        "f"
      );
      return finalizeChatCompletion2(snapshot);
    }),
  (_ChatCompletionStream_accumulateChatCompletion2 =
    function _ChatCompletionStream_accumulateChatCompletion3(chunk) {
      var _a5, _b2, _c;
      var _a4, _b;
      let snapshot = __classPrivateFieldGet6(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot2,
        "f"
      );
      const { choices, ...rest } = chunk;
      if (!snapshot) {
        snapshot = __classPrivateFieldSet6(
          this,
          _ChatCompletionStream_currentChatCompletionSnapshot2,
          {
            ...rest,
            choices: [],
          },
          "f"
        );
      } else {
        Object.assign(snapshot, rest);
      }
      for (const { delta, finish_reason, index, ...other } of chunk.choices) {
        let choice = snapshot.choices[index];
        if (!choice) {
          snapshot.choices[index] = {
            finish_reason,
            index,
            message: delta,
            ...other,
          };
          continue;
        }
        if (finish_reason) choice.finish_reason = finish_reason;
        Object.assign(choice, other);
        if (!delta) continue;
        const { content, function_call, role, tool_calls } = delta;
        if (content)
          choice.message.content = (choice.message.content || "") + content;
        if (role) choice.message.role = role;
        if (function_call) {
          if (!choice.message.function_call) {
            choice.message.function_call = function_call;
          } else {
            if (function_call.name)
              choice.message.function_call.name = function_call.name;
            if (function_call.arguments) {
              (_a5 = (_a4 = choice.message.function_call).arguments) != null
                ? _a5
                : (_a4.arguments = "");
              choice.message.function_call.arguments += function_call.arguments;
            }
          }
        }
        if (tool_calls) {
          if (!choice.message.tool_calls) choice.message.tool_calls = [];
          for (const { index: index2, id, type, function: fn } of tool_calls) {
            const tool_call =
              (_b2 = (_b = choice.message.tool_calls)[index2]) != null
                ? _b2
                : (_b[index2] = {});
            if (id) tool_call.id = id;
            if (type) tool_call.type = type;
            if (fn)
              (_c = tool_call.function) != null
                ? _c
                : (tool_call.function = { arguments: "" });
            if (fn == null ? void 0 : fn.name)
              tool_call.function.name = fn.name;
            if (fn == null ? void 0 : fn.arguments)
              tool_call.function.arguments += fn.arguments;
          }
        }
      }
      return snapshot;
    }),
  Symbol.asyncIterator)]() {
    const pushQueue = [];
    const readQueue = [];
    let done = false;
    this.on("chunk", (chunk) => {
      const reader = readQueue.shift();
      if (reader) {
        reader(chunk);
      } else {
        pushQueue.push(chunk);
      }
    });
    this.on("end", () => {
      done = true;
      for (const reader of readQueue) {
        reader(void 0);
      }
      readQueue.length = 0;
    });
    return {
      next: async () => {
        if (!pushQueue.length) {
          if (done) {
            return { value: void 0, done: true };
          }
          return new Promise((resolve) => readQueue.push(resolve)).then(
            (chunk2) =>
              chunk2
                ? { value: chunk2, done: false }
                : { value: void 0, done: true }
          );
        }
        const chunk = pushQueue.shift();
        return { value: chunk, done: false };
      },
    };
  }
  toReadableStream() {
    const stream = new Stream2(
      this[Symbol.asyncIterator].bind(this),
      this.controller
    );
    return stream.toReadableStream();
  }
};
function finalizeChatCompletion2(snapshot) {
  const { id, choices, created, model } = snapshot;
  return {
    id,
    choices: choices.map(({ message, finish_reason, index }) => {
      if (!finish_reason)
        throw new OpenAIError3(`missing finish_reason for choice ${index}`);
      const { content = null, function_call, tool_calls } = message;
      const role = message.role;
      if (!role) throw new OpenAIError3(`missing role for choice ${index}`);
      if (function_call) {
        const { arguments: args, name } = function_call;
        if (args == null)
          throw new OpenAIError3(
            `missing function_call.arguments for choice ${index}`
          );
        if (!name)
          throw new OpenAIError3(
            `missing function_call.name for choice ${index}`
          );
        return {
          message: { content, function_call: { arguments: args, name }, role },
          finish_reason,
          index,
        };
      }
      if (tool_calls) {
        return {
          index,
          finish_reason,
          message: {
            role,
            content,
            tool_calls: tool_calls.map((tool_call, i) => {
              const { function: fn, type, id: id2 } = tool_call;
              const { arguments: args, name } = fn || {};
              if (id2 == null)
                throw new OpenAIError3(`missing choices[${index}].tool_calls[${i}].id
${str2(snapshot)}`);
              if (type == null)
                throw new OpenAIError3(`missing choices[${index}].tool_calls[${i}].type
${str2(snapshot)}`);
              if (name == null)
                throw new OpenAIError3(`missing choices[${index}].tool_calls[${i}].function.name
${str2(snapshot)}`);
              if (args == null)
                throw new OpenAIError3(`missing choices[${index}].tool_calls[${i}].function.arguments
${str2(snapshot)}`);
              return { id: id2, type, function: { name, arguments: args } };
            }),
          },
        };
      }
      return { message: { content, role }, finish_reason, index };
    }),
    created,
    model,
    object: "chat.completion",
  };
}
function str2(x) {
  return JSON.stringify(x);
}

// node_modules/openai/lib/ChatCompletionStreamingRunner.mjs
var ChatCompletionStreamingRunner2 = class extends ChatCompletionStream2 {
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStreamingRunner2();
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  static runFunctions(completions, params, options) {
    const runner = new ChatCompletionStreamingRunner2();
    runner._run(() =>
      runner._runFunctions(completions, params, {
        ...options,
        headers: {
          ...(options == null ? void 0 : options.headers),
          "X-Stainless-Helper-Method": "runFunctions",
        },
      })
    );
    return runner;
  }
  static runTools(completions, params, options) {
    const runner = new ChatCompletionStreamingRunner2();
    runner._run(() =>
      runner._runTools(completions, params, {
        ...options,
        headers: {
          ...(options == null ? void 0 : options.headers),
          "X-Stainless-Helper-Method": "runTools",
        },
      })
    );
    return runner;
  }
};

// node_modules/openai/resources/beta/chat/completions.mjs
var Completions5 = class extends APIResource2 {
  runFunctions(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner2.runFunctions(
        this._client.chat.completions,
        body,
        options
      );
    }
    return ChatCompletionRunner2.runFunctions(
      this._client.chat.completions,
      body,
      options
    );
  }
  runTools(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner2.runTools(
        this._client.chat.completions,
        body,
        options
      );
    }
    return ChatCompletionRunner2.runTools(
      this._client.chat.completions,
      body,
      options
    );
  }
  stream(body, options) {
    return ChatCompletionStream2.createChatCompletion(
      this._client.chat.completions,
      body,
      options
    );
  }
};

// node_modules/openai/resources/beta/chat/chat.mjs
var Chat4 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.completions = new Completions5(this._client);
  }
};
(function (Chat6) {
  Chat6.Completions = Completions5;
})(Chat4 || (Chat4 = {}));

// node_modules/openai/resources/beta/threads/messages/files.mjs
var Files5 = class extends APIResource2 {
  retrieve(threadId, messageId, fileId, options) {
    return this._client.get(
      `/threads/${threadId}/messages/${messageId}/files/${fileId}`,
      {
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  list(threadId, messageId, query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list(threadId, messageId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/messages/${messageId}/files`,
      MessageFilesPage2,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var MessageFilesPage2 = class extends CursorPage2 {};
(function (Files7) {
  Files7.MessageFilesPage = MessageFilesPage2;
})(Files5 || (Files5 = {}));

// node_modules/openai/resources/beta/threads/messages/messages.mjs
var Messages2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.files = new Files5(this._client);
  }
  create(threadId, body, options) {
    return this._client.post(`/threads/${threadId}/messages`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, messageId, options) {
    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, messageId, body, options) {
    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/messages`,
      ThreadMessagesPage2,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var ThreadMessagesPage2 = class extends CursorPage2 {};
(function (Messages3) {
  Messages3.ThreadMessagesPage = ThreadMessagesPage2;
  Messages3.Files = Files5;
  Messages3.MessageFilesPage = MessageFilesPage2;
})(Messages2 || (Messages2 = {}));

// node_modules/openai/resources/beta/threads/runs/steps.mjs
var Steps2 = class extends APIResource2 {
  retrieve(threadId, runId, stepId, options) {
    return this._client.get(
      `/threads/${threadId}/runs/${runId}/steps/${stepId}`,
      {
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  list(threadId, runId, query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list(threadId, runId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/runs/${runId}/steps`,
      RunStepsPage2,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var RunStepsPage2 = class extends CursorPage2 {};
(function (Steps3) {
  Steps3.RunStepsPage = RunStepsPage2;
})(Steps2 || (Steps2 = {}));

// node_modules/openai/resources/beta/threads/runs/runs.mjs
var Runs2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.steps = new Steps2(this._client);
  }
  create(threadId, body, options) {
    return this._client.post(`/threads/${threadId}/runs`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, runId, options) {
    return this._client.get(`/threads/${threadId}/runs/${runId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, runId, body, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage2, {
      query,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  cancel(threadId, runId, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  submitToolOutputs(threadId, runId, body, options) {
    return this._client.post(
      `/threads/${threadId}/runs/${runId}/submit_tool_outputs`,
      {
        body,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var RunsPage2 = class extends CursorPage2 {};
(function (Runs3) {
  Runs3.RunsPage = RunsPage2;
  Runs3.Steps = Steps2;
  Runs3.RunStepsPage = RunStepsPage2;
})(Runs2 || (Runs2 = {}));

// node_modules/openai/resources/beta/threads/threads.mjs
var Threads2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.runs = new Runs2(this._client);
    this.messages = new Messages2(this._client);
  }
  create(body = {}, options) {
    if (isRequestOptions2(body)) {
      return this.create({}, body);
    }
    return this._client.post("/threads", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, options) {
    return this._client.get(`/threads/${threadId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, body, options) {
    return this._client.post(`/threads/${threadId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  del(threadId, options) {
    return this._client.delete(`/threads/${threadId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  createAndRun(body, options) {
    return this._client.post("/threads/runs", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
(function (Threads3) {
  Threads3.Runs = Runs2;
  Threads3.RunsPage = RunsPage2;
  Threads3.Messages = Messages2;
  Threads3.ThreadMessagesPage = ThreadMessagesPage2;
})(Threads2 || (Threads2 = {}));

// node_modules/openai/resources/beta/beta.mjs
var Beta2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.chat = new Chat4(this._client);
    this.assistants = new Assistants2(this._client);
    this.threads = new Threads2(this._client);
  }
};
(function (Beta3) {
  Beta3.Chat = Chat4;
  Beta3.Assistants = Assistants2;
  Beta3.AssistantsPage = AssistantsPage2;
  Beta3.Threads = Threads2;
})(Beta2 || (Beta2 = {}));

// node_modules/openai/resources/completions.mjs
var Completions6 = class extends APIResource2 {
  create(body, options) {
    var _a4;
    return this._client.post("/completions", {
      body,
      ...options,
      stream: (_a4 = body.stream) != null ? _a4 : false,
    });
  }
};
(function (Completions8) {})(Completions6 || (Completions6 = {}));

// node_modules/openai/resources/embeddings.mjs
var Embeddings3 = class extends APIResource2 {
  create(body, options) {
    return this._client.post("/embeddings", { body, ...options });
  }
};
(function (Embeddings4) {})(Embeddings3 || (Embeddings3 = {}));

// node_modules/openai/resources/edits.mjs
var Edits2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post("/edits", { body, ...options });
  }
};
(function (Edits3) {})(Edits2 || (Edits2 = {}));

// node_modules/openai/resources/files.mjs
var Files6 = class extends APIResource2 {
  create(body, options) {
    return this._client.post(
      "/files",
      multipartFormRequestOptions2({ body, ...options })
    );
  }
  retrieve(fileId, options) {
    return this._client.get(`/files/${fileId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/files", FileObjectsPage2, {
      query,
      ...options,
    });
  }
  del(fileId, options) {
    return this._client.delete(`/files/${fileId}`, options);
  }
  content(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, {
      ...options,
      __binaryResponse: true,
    });
  }
  retrieveContent(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, {
      ...options,
      headers: {
        Accept: "application/json",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  async waitForProcessing(
    id,
    { pollInterval = 5e3, maxWait = 30 * 60 * 1e3 } = {}
  ) {
    const TERMINAL_STATES = /* @__PURE__ */ new Set([
      "processed",
      "error",
      "deleted",
    ]);
    const start = Date.now();
    let file = await this.retrieve(id);
    while (!file.status || !TERMINAL_STATES.has(file.status)) {
      await sleep2(pollInterval);
      file = await this.retrieve(id);
      if (Date.now() - start > maxWait) {
        throw new APIConnectionTimeoutError3({
          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,
        });
      }
    }
    return file;
  }
};
var FileObjectsPage2 = class extends Page2 {};
(function (Files7) {
  Files7.FileObjectsPage = FileObjectsPage2;
})(Files6 || (Files6 = {}));

// node_modules/openai/resources/fine-tunes.mjs
var FineTunes2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post("/fine-tunes", { body, ...options });
  }
  retrieve(fineTuneId, options) {
    return this._client.get(`/fine-tunes/${fineTuneId}`, options);
  }
  list(options) {
    return this._client.getAPIList("/fine-tunes", FineTunesPage2, options);
  }
  cancel(fineTuneId, options) {
    return this._client.post(`/fine-tunes/${fineTuneId}/cancel`, options);
  }
  listEvents(fineTuneId, query, options) {
    var _a4;
    return this._client.get(`/fine-tunes/${fineTuneId}/events`, {
      query,
      timeout: 864e5,
      ...options,
      stream:
        (_a4 = query == null ? void 0 : query.stream) != null ? _a4 : false,
    });
  }
};
var FineTunesPage2 = class extends Page2 {};
(function (FineTunes3) {
  FineTunes3.FineTunesPage = FineTunesPage2;
})(FineTunes2 || (FineTunes2 = {}));

// node_modules/openai/resources/fine-tuning/jobs.mjs
var Jobs2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post("/fine_tuning/jobs", { body, ...options });
  }
  retrieve(fineTuningJobId, options) {
    return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/fine_tuning/jobs", FineTuningJobsPage2, {
      query,
      ...options,
    });
  }
  cancel(fineTuningJobId, options) {
    return this._client.post(
      `/fine_tuning/jobs/${fineTuningJobId}/cancel`,
      options
    );
  }
  listEvents(fineTuningJobId, query = {}, options) {
    if (isRequestOptions2(query)) {
      return this.listEvents(fineTuningJobId, {}, query);
    }
    return this._client.getAPIList(
      `/fine_tuning/jobs/${fineTuningJobId}/events`,
      FineTuningJobEventsPage2,
      {
        query,
        ...options,
      }
    );
  }
};
var FineTuningJobsPage2 = class extends CursorPage2 {};
var FineTuningJobEventsPage2 = class extends CursorPage2 {};
(function (Jobs3) {
  Jobs3.FineTuningJobsPage = FineTuningJobsPage2;
  Jobs3.FineTuningJobEventsPage = FineTuningJobEventsPage2;
})(Jobs2 || (Jobs2 = {}));

// node_modules/openai/resources/fine-tuning/fine-tuning.mjs
var FineTuning2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.jobs = new Jobs2(this._client);
  }
};
(function (FineTuning3) {
  FineTuning3.Jobs = Jobs2;
  FineTuning3.FineTuningJobsPage = FineTuningJobsPage2;
  FineTuning3.FineTuningJobEventsPage = FineTuningJobEventsPage2;
})(FineTuning2 || (FineTuning2 = {}));

// node_modules/openai/resources/images.mjs
var Images2 = class extends APIResource2 {
  createVariation(body, options) {
    return this._client.post(
      "/images/variations",
      multipartFormRequestOptions2({ body, ...options })
    );
  }
  edit(body, options) {
    return this._client.post(
      "/images/edits",
      multipartFormRequestOptions2({ body, ...options })
    );
  }
  generate(body, options) {
    return this._client.post("/images/generations", { body, ...options });
  }
};
(function (Images3) {})(Images2 || (Images2 = {}));

// node_modules/openai/resources/models.mjs
var Models2 = class extends APIResource2 {
  retrieve(model, options) {
    return this._client.get(`/models/${model}`, options);
  }
  list(options) {
    return this._client.getAPIList("/models", ModelsPage2, options);
  }
  del(model, options) {
    return this._client.delete(`/models/${model}`, options);
  }
};
var ModelsPage2 = class extends Page2 {};
(function (Models4) {
  Models4.ModelsPage = ModelsPage2;
})(Models2 || (Models2 = {}));

// node_modules/openai/resources/moderations.mjs
var Moderations2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post("/moderations", { body, ...options });
  }
};
(function (Moderations3) {})(Moderations2 || (Moderations2 = {}));

// node_modules/openai/index.mjs
var _a2;
var OpenAI2 = class extends APIClient2 {
  constructor({
    apiKey = readEnv2("OPENAI_API_KEY"),
    organization = ((_a4) =>
      (_a4 = readEnv2("OPENAI_ORG_ID")) != null ? _a4 : null)(),
    ...opts
  } = {}) {
    var _a5, _b;
    if (apiKey === void 0) {
      throw new OpenAIError3(
        "The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' })."
      );
    }
    const options = {
      apiKey,
      organization,
      ...opts,
      baseURL: (_a5 = opts.baseURL) != null ? _a5 : `https://api.openai.com/v1`,
    };
    if (!options.dangerouslyAllowBrowser && isRunningInBrowser2()) {
      throw new OpenAIError3(
        "It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n"
      );
    }
    super({
      baseURL: options.baseURL,
      timeout: (_b = options.timeout) != null ? _b : 6e5,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch,
    });
    this.completions = new Completions6(this);
    this.chat = new Chat3(this);
    this.edits = new Edits2(this);
    this.embeddings = new Embeddings3(this);
    this.files = new Files6(this);
    this.images = new Images2(this);
    this.audio = new Audio2(this);
    this.moderations = new Moderations2(this);
    this.models = new Models2(this);
    this.fineTuning = new FineTuning2(this);
    this.fineTunes = new FineTunes2(this);
    this.beta = new Beta2(this);
    this._options = options;
    this.apiKey = apiKey;
    this.organization = organization;
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders(opts) {
    return {
      ...super.defaultHeaders(opts),
      "OpenAI-Organization": this.organization,
      ...this._options.defaultHeaders,
    };
  }
  authHeaders(opts) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
};
_a2 = OpenAI2;
OpenAI2.OpenAI = _a2;
OpenAI2.OpenAIError = OpenAIError3;
OpenAI2.APIError = APIError3;
OpenAI2.APIConnectionError = APIConnectionError3;
OpenAI2.APIConnectionTimeoutError = APIConnectionTimeoutError3;
OpenAI2.APIUserAbortError = APIUserAbortError3;
OpenAI2.NotFoundError = NotFoundError3;
OpenAI2.ConflictError = ConflictError3;
OpenAI2.RateLimitError = RateLimitError3;
OpenAI2.BadRequestError = BadRequestError3;
OpenAI2.AuthenticationError = AuthenticationError3;
OpenAI2.InternalServerError = InternalServerError3;
OpenAI2.PermissionDeniedError = PermissionDeniedError3;
OpenAI2.UnprocessableEntityError = UnprocessableEntityError3;
var {
  OpenAIError: OpenAIError4,
  APIError: APIError4,
  APIConnectionError: APIConnectionError4,
  APIConnectionTimeoutError: APIConnectionTimeoutError4,
  APIUserAbortError: APIUserAbortError4,
  NotFoundError: NotFoundError4,
  ConflictError: ConflictError4,
  RateLimitError: RateLimitError4,
  BadRequestError: BadRequestError4,
  AuthenticationError: AuthenticationError4,
  InternalServerError: InternalServerError4,
  PermissionDeniedError: PermissionDeniedError4,
  UnprocessableEntityError: UnprocessableEntityError4,
} = error_exports2;
var toFile3 = toFile2;
(function (OpenAI3) {
  OpenAI3.toFile = toFile2;
  OpenAI3.fileFromPath = fileFromPath2;
  OpenAI3.Page = Page2;
  OpenAI3.CursorPage = CursorPage2;
  OpenAI3.Completions = Completions6;
  OpenAI3.Chat = Chat3;
  OpenAI3.Edits = Edits2;
  OpenAI3.Embeddings = Embeddings3;
  OpenAI3.Files = Files6;
  OpenAI3.FileObjectsPage = FileObjectsPage2;
  OpenAI3.Images = Images2;
  OpenAI3.Audio = Audio2;
  OpenAI3.Moderations = Moderations2;
  OpenAI3.Models = Models2;
  OpenAI3.ModelsPage = ModelsPage2;
  OpenAI3.FineTuning = FineTuning2;
  OpenAI3.FineTunes = FineTunes2;
  OpenAI3.FineTunesPage = FineTunesPage2;
  OpenAI3.Beta = Beta2;
})(OpenAI2 || (OpenAI2 = {}));
var openai_default = OpenAI2;

// src/utils.ts
var url_affinity_organizations = "https://api.affinity.co/organizations";
var url_affinity_note = "https://api.affinity.co/notes";
var url_affinity_persons = "https://api.affinity.co/persons";
var url_affinity_field_values = "https://api.affinity.co/field-values";
var url_affinity_list = "https://api.affinity.co/lists";
function affinity_authorization(affinityAPIKey2) {
  let username = "";
  let pwd = affinityAPIKey2;
  let auth = "Basic " + Buffer.from(username + ":" + pwd).toString("base64");
  let headers = { Authorization: auth, "Content-Type": "application/json" };
  return headers;
}
async function add_notes_to_company(startup, note, affinityAPIKey2) {
  let headers = affinity_authorization(affinityAPIKey2);
  let organization_ids = [startup["id"]];
  console.log(organization_ids);
  console.log(note);
  let note_data = { organization_ids: [startup["id"]], content: note };
  let r = await (0, import_obsidian.request)({
    url: url_affinity_note,
    method: "POST",
    headers,
    body: JSON.stringify(note_data),
  })
    .then((data) => console.log(data))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
async function get_startup_by_name(
  affinityAPIKey2,
  owner_value2,
  startup_name
) {
  let subnames = startup_name.split(" ");
  let search_term = subnames[0];
  if (subnames.length > 1) {
    for (let name of subnames.slice(1)) {
      search_term = search_term + "+" + name;
    }
  }
  console.log(search_term);
  let next_page_token = null;
  let headers = affinity_authorization(affinityAPIKey2);
  while (true) {
    let full_url =
      url_affinity_organizations +
      "?term=" +
      search_term +
      "&with_interaction_dates=true&with_interaction_persons=true";
    if (next_page_token != null) {
      full_url += "&page_token=" + next_page_token;
    }
    let r = await (0, import_obsidian.request)({
      url: full_url,
      method: "GET",
      headers,
    });
    let response = JSON.parse(r);
    let organizations = response["organizations"];
    next_page_token = response["next_page_token"];
    for (let organization of organizations) {
      if (organization["interactions"]) {
        for (let [interaction_name, interaction_data] of Object.entries(
          organization["interactions"]
        )) {
          if (interaction_data) {
            let people_involved = interaction_data["person_ids"].toString();
            if (people_involved.includes(owner_value2)) {
              return organization;
            }
          } else {
            break;
          }
        }
      }
    }
    if (next_page_token == null) {
      return null;
    }
  }
}
async function get_person_by_name(affinityAPIKey2, person_name) {
  let names = person_name.split(" ");
  if (names.length > 1) {
    let next_page_token = null;
    let headers = affinity_authorization(affinityAPIKey2);
    let first_name = names[0];
    let last_name = names[1];
    while (true) {
      let full_url = url_affinity_persons + "?term=" + last_name;
      if (next_page_token != null) {
        full_url += "&page_token=" + next_page_token;
      }
      let r = await (0, import_obsidian.request)({
        url: full_url,
        method: "GET",
        headers,
      });
      let response = JSON.parse(r);
      let people = response["persons"];
      next_page_token = response["next_page_token"];
      for (let person of people) {
        if (
          person["first_name"] == first_name &&
          person["last_name"] == last_name
        ) {
          return person;
        }
      }
      if (next_page_token == null) {
        break;
      }
    }
    return null;
  } else {
    return null;
  }
  return null;
}
async function get_person_details(affinityAPIKey2, person_id) {
  let full_url = url_affinity_persons + "/" + person_id.toString();
  let headers = affinity_authorization(affinityAPIKey2);
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "GET",
    headers,
  });
  let response = JSON.parse(r);
  return response;
}
async function is_person_in_venture_network(
  affinityAPIKey2,
  person_details,
  venture_network_list_id
) {
  let list_entries = person_details["list_entries"];
  for (let entry of list_entries) {
    if (entry["list_id"].toString() == venture_network_list_id.toString()) {
      return entry["id"];
    }
  }
  return null;
}
async function add_entry_to_list(affinityAPIKey2, list_id, entity_id) {
  let headers = affinity_authorization(affinityAPIKey2);
  let full_url = url_affinity_list + "/" + list_id + "/list-entries";
  let data = { entity_id };
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "POST",
    headers,
    body: JSON.stringify(data),
  })
    .then((data2) => console.log(data2))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
async function add_field_value(
  affinityAPIKey2,
  field_id,
  entity_id,
  value,
  list_entry_id
) {
  let headers = affinity_authorization(affinityAPIKey2);
  let full_url = url_affinity_field_values;
  let data = {
    field_id,
    entity_id,
    value,
    list_entry_id,
  };
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "POST",
    headers,
    body: JSON.stringify(data),
  })
    .then((data2) => console.log(data2))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
async function add_notes_to_person(affinityAPIKey2, person_id, notes) {
  let full_url = url_affinity_note;
  let headers = affinity_authorization(affinityAPIKey2);
  let data = { person_ids: [person_id], content: notes };
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "POST",
    headers,
    body: JSON.stringify(data),
  })
    .then((data2) => console.log(data2))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
function startup_ready_for_affinity(file_content) {
  return (
    file_content.includes("#startups/screened") &&
    file_content.includes("#Affinity")
  );
}
function extract_title_and_note(text) {
  let pattern = /^# .*\n/gm;
  let matches = text.match(pattern);
  let title = "";
  if (matches) {
    title = matches[0];
  }
  let substrings = text.split(pattern);
  console.log(`Title: ${title}`);
  console.log(substrings);
  return [title, substrings];
}
function clean_text(startup_name) {
  startup_name = startup_name.replace(/[^A-Za-z0-9\s.]/g, "");
  startup_name = startup_name.trim();
  return startup_name;
}
function is_summarizable(file_content) {
  return (
    file_content.includes("#network/connected") &&
    (file_content.includes("#Entity/VC") ||
      file_content.includes("#Person/VC")) &&
    file_content.includes("#gpt_summarized") != true &&
    file_content.includes("dataview") != true
  );
}
function vc_ready_for_affinity(file_content) {
  return (
    file_content.includes("#gpt_summarized") &&
    file_content.includes("#Affinity")
  );
}
function countWords(str3) {
  let words = str3.match(/\b[a-z\d]+\b/gi);
  return words ? words.length : 0;
}
function extract_startup_details(startup) {
  let startup_details = {};
  startup_details["name"] = startup["name"];
  startup_details["domain"] = startup["domain"];
  try {
    startup_details["description"] = startup["description"]["long"];
  } catch (e) {
    startup_details["description"] = startup["description"]["short"];
  }
  startup_details["totalMoneyRaised"] = startup["totalMoneyRaised"];
  startup_details["foundedYear"] = startup["foundedYear"];
  startup_details["location"] = startup["location"];
  startup_details["stage"] = startup["stage"];
  startup_details["investorList"] = startup["investorList"];
  startup_details["profileLinks"] = startup["profileLinks"];
  startup_details["newsInfo"] = startup["newsInfo"];
  startup_details["metrics"] = startup["metrics"];
  startup_details["tracxnTeamScore"] = startup["tracxnTeamScore"];
  startup_details["tracxnScore"] = startup["tracxnScore"];
  return startup_details;
}
function get_acquisition_details(startup) {
  let acquirersString = "";
  let acquirers = startup["acquirerInfo"]["acquirerList"][0]["acquirers"];
  let acquisitionYear =
    startup["acquirerInfo"]["acquirerList"][0]["date"]["year"];
  let counter = 0;
  for (let acquirer of acquirers) {
    if (counter == 0) {
      acquirersString += `[${acquirer["name"]}](${acquirer["domain"]})`;
    } else {
      acquirersString += `, [${acquirer["name"]}](${acquirer["domain"]})`;
    }
    counter += 1;
  }
  return { Acquirers: acquirersString, AcquisitionYear: acquisitionYear };
}
function get_ipo_details(startup) {
  let result = {};
  let ipoList = startup["ipoInfo"]["ipoList"];
  for (let ipo of ipoList) {
    if (ipo["marketCap"]) {
      result["marketCap"] = ipo["marketCap"];
      result["ipoYear"] = ipo["date"]["year"];
      result["stockExchange"] = ipo["stockExchange"];
      result["stockSymbol"] = ipo["stockSymbol"];
    }
  }
  return result;
}
function get_keys_for_table(allKeys) {
  const excludedKeys = ["newsInfo", "metrics", "domain"];
  let finalKeys = [];
  for (let key of allKeys) {
    if (!excludedKeys.includes(key)) {
      finalKeys.push(key);
    }
  }
  return finalKeys;
}
function formatNumber(number) {
  const abbreviations = {
    T: 1e12,
    B: 1e9,
    M: 1e6,
    K: 1e3,
  };
  for (const abbreviation in abbreviations) {
    if (number >= abbreviations[abbreviation]) {
      const roundedNumber = Math.ceil(number / abbreviations[abbreviation]);
      return roundedNumber + abbreviation;
    }
  }
  return number.toString();
}
function formattedCountryName(countryName) {
  const formattedCountryName2 =
    countryName.charAt(0).toUpperCase() + countryName.slice(1).toLowerCase();
  return formattedCountryName2;
}
function isCountryInEurope(countryName) {
  const europeanCountries = [
    "Albania",
    "Andorra",
    "Austria",
    "Belarus",
    "Belgium",
    "Bosnia and Herzegovina",
    "Bulgaria",
    "Croatia",
    "Cyprus",
    "Czech Republic",
    "Denmark",
    "Estonia",
    "Finland",
    "France",
    "Germany",
    "Greece",
    "Hungary",
    "Iceland",
    "Ireland",
    "Italy",
    "Kosovo",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malta",
    "Moldova",
    "Monaco",
    "Montenegro",
    "Netherlands",
    "North Macedonia",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "Russia",
    "San Marino",
    "Serbia",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "Ukraine",
    "United Kingdom",
    "UK",
    "Vatican City",
  ];
  return europeanCountries.includes(formattedCountryName(countryName));
}
function isCountryInEasternEurope(countryName) {
  const easternEuropeanCountries = [
    "Albania",
    "Belarus",
    "Bosnia and Herzegovina",
    "Bulgaria",
    "Croatia",
    "Cyprus",
    "Czech Republic",
    "Estonia",
    "Hungary",
    "Kosovo",
    "Latvia",
    "Lithuania",
    "Moldova",
    "Montenegro",
    "North Macedonia",
    "Poland",
    "Romania",
    "Russia",
    "Serbia",
    "Slovakia",
    "Slovenia",
    "Ukraine",
  ];
  return easternEuropeanCountries.includes(formattedCountryName(countryName));
}
function isCountryInNordics(countryName) {
  const nordicCountries = ["Denmark", "Finland", "Iceland", "Norway", "Sweden"];
  return nordicCountries.includes(formattedCountryName(countryName));
}
function geo_check(input_country, investor_geo) {
  input_country = input_country.toLowerCase();
  let usa_abbreviations = [
    "usa",
    "us",
    "united states",
    "america",
    "united states of america",
  ];
  if (
    investor_geo.some((geo) => geo.includes("globally")) ||
    investor_geo.some((geo) => geo.includes("agnostic")) ||
    investor_geo.some((geo) => geo.includes("global")) ||
    investor_geo.some((geo) => geo.includes("worldwide")) ||
    investor_geo.some((geo) => geo.includes("agnostically")) ||
    investor_geo.some((geo) => geo.includes("world-wide"))
  ) {
    return true;
  }
  if (investor_geo.some((geo) => geo.includes(input_country))) {
    return true;
  }
  if (
    isCountryInEurope(input_country) &&
    (investor_geo.some((geo) => geo.includes("europe")) ||
      investor_geo.some((geo) => geo.includes("eu")))
  ) {
    return true;
  }
  if (
    isCountryInEasternEurope(input_country) &&
    investor_geo.some((geo) => geo.includes("eastern europe"))
  ) {
    return true;
  }
  if (
    isCountryInNordics(input_country) &&
    investor_geo.some((geo) => geo.includes("nordics"))
  ) {
    return true;
  }
  if (usa_abbreviations.includes(input_country)) {
    for (let geo of investor_geo) {
      if (usa_abbreviations.some((abbrev) => geo.includes(abbrev))) {
        return true;
      }
    }
  }
  return false;
}
function stage_check(input_stage, investor_stage) {
  input_stage = input_stage.toLowerCase();
  if (
    investor_stage.some((stage) => stage.includes("pre-seed")) ||
    investor_stage.some((stage) => stage.includes("preseed"))
  ) {
    investor_stage.push("pre-seed");
    investor_stage.push("preseed");
  }
  return investor_stage.some((stage) => stage.includes(input_stage));
}
function formatObjectsToMarkdownTable(objects, specialFormat) {
  if (objects.length === 0) {
    return "";
  }
  let keys = [];
  if (specialFormat) {
    keys = get_keys_for_table(Object.keys(objects[0]));
  } else {
    keys = Object.keys(objects[0]);
  }
  let table = "|";
  for (let i = 0; i < keys.length; i++) {
    table += ` ${keys[i]} |`;
  }
  table += "\n|";
  for (let i = 0; i < keys.length; i++) {
    table += " --- |";
  }
  for (let i = 0; i < objects.length; i++) {
    table += "\n|";
    for (let j = 0; j < keys.length; j++) {
      let displayedResult = "";
      try {
        if (keys[j] == "totalMoneyRaised") {
          displayedResult =
            formatNumber(objects[i][keys[j]]["totalAmount"]["amount"]) +
            " " +
            objects[i][keys[j]]["totalAmount"]["currency"];
        } else if (keys[j] == "investorList") {
          let investorListDisplay = "";
          let counter = 0;
          for (let investor of objects[i]["investorList"]) {
            let investorDisplay = `[${investor["name"]}](https://${investor["domain"]})`;
            if (counter == 0) {
              investorListDisplay += investorDisplay;
            } else {
              investorListDisplay += ", " + investorDisplay;
            }
            counter += 1;
          }
          displayedResult = investorListDisplay;
        } else if (keys[j] == "location") {
          displayedResult = objects[i]["location"]["country"];
        } else if (keys[j] == "tracxnTeamScore" || keys[j] == "tracxnScore") {
          displayedResult = Math.ceil(objects[i][keys[j]]).toFixed(0);
        } else if (keys[j] == "profileLinks") {
          let counter = 0;
          for (let [type, link] of Object.entries(objects[i]["profileLinks"])) {
            if (counter == 0) {
              displayedResult += `[${type}](${link})`;
            } else {
              displayedResult += `, [${type}](${link})`;
            }
            counter += 1;
          }
        } else if (keys[j] == "name") {
          let domain = objects[i]["domain"];
          displayedResult = `[${objects[i]["name"]}](https://${domain})`;
        } else if (keys[j] == "marketCap") {
          displayedResult =
            formatNumber(objects[i]["marketCap"]["amount"]) +
            " " +
            objects[i]["marketCap"]["currency"];
        } else {
          displayedResult = objects[i][keys[j]];
        }
      } catch (e) {
        console.error(
          `${objects[i]["name"]} had an error with the key ${keys[j]}`
        );
      }
      table += ` ${displayedResult} |`;
    }
  }
  return table;
}
function get_relevant_feeds(startupsList) {
  let relevant_feeds = {};
  for (let startup of startupsList) {
    let businessModels = startup["businessModelList"];
    for (let businessModel of businessModels) {
      relevant_feeds[businessModel["fullPathString"]] =
        businessModel["companiesInEntireTreeUrl"];
    }
  }
  return relevant_feeds;
}
function find_eligible_investors(investors, input_country, input_stage) {
  let fit_investors = [];
  for (let investor of investors) {
    if (
      geo_check(input_country, investor["geo"]) &&
      stage_check(input_stage, investor["stage"])
    ) {
      fit_investors.push(investor);
    }
  }
  return fit_investors;
}
function extractStage(str3) {
  str3 = str3.toLowerCase();
  const keywords = [
    "pre-seed",
    "preseed",
    "seed",
    "series a",
    "series b",
    "series c",
    "series d",
  ];
  const regex = new RegExp(keywords.join("|"), "gi");
  const mentions = str3.match(regex) || [""];
  return mentions;
}
function extractGeography(str3) {
  const regex = /Geography::(.*)/i;
  const match = str3.match(regex);
  if (match) {
    let line = match[1].trim();
    let geos = line.split(",");
    let counter = 0;
    for (let geo of geos) {
      geos[counter] = geo.trim().toLowerCase();
      counter += 1;
    }
    return geos;
  }
  return [""];
}
function extractIndustry(str3) {
  const regex = /Industry::(.*)/i;
  const match = str3.match(regex);
  if (match) {
    let industry = match[1].trim();
    return industry;
  }
  return [""];
}
function extractSpeciality(str3) {
  const regex = /Special::?(.*)/i;
  const match = str3.match(regex);
  if (match) {
    let industry = match[1].trim();
    return industry;
  }
  return "";
}
async function togetherai_js(
  togetheraiAPIKey2,
  model_name,
  user_prompt,
  system_prompt,
  max_tokens = 256,
  temperature = 0.3,
  messages = []
) {
  let togetherai = new openai_default({
    apiKey: togetheraiAPIKey2,
    dangerouslyAllowBrowser: true,
    baseURL: "https://api.together.xyz/v1",
  });
  var response;
  if (messages.length == 0) {
    response = await togetherai.chat.completions.create({
      model: model_name,
      temperature: 0,
      top_p: 0,
      max_tokens,
      messages: [
        { role: "system", content: system_prompt },
        { role: "user", content: user_prompt },
      ],
    });
  } else {
    response = await togetherai.chat.completions.create({
      model: model_name,
      temperature: 0,
      top_p: 0,
      max_tokens,
      messages,
    });
  }
  let summary = response.choices[0].message.content;
  if (summary == null) {
    summary = "";
  }
  return summary;
}
function createInvestorObject(name, geographies, stages, industry, speciality) {
  const investorObject = {
    name,
    geo: geographies,
    stage: stages,
    industry,
    speciality,
  };
  return investorObject;
}
function generate_investor_json(investor_name, investor_text) {
  let name = investor_name;
  let geographies = extractGeography(investor_text);
  let stages = extractStage(investor_text);
  let industry = extractIndustry(investor_text);
  let speciality = extractSpeciality(investor_text);
  return createInvestorObject(name, geographies, stages, industry, speciality);
}

// src/modal.ts
var import_obsidian2 = require("obsidian");
var TextInputModal = class extends import_obsidian2.Modal {
  constructor(app2, type, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.type = type;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "";
    if (this.type == "market-research") {
      title = "What industry do you want to research?";
    }
    if (this.type == "defensibility") {
      title = "Describe the startup whose defensibility is to be evaluated";
    }
    if (this.type == "evaluate") {
      title = "Describe the startup to be evaluated";
    }
    if (this.type == "url-research") {
      title = "Enter url to investigate";
    }
    if (this.type == "fireflies-summary") {
      title =
        "Insert the name of the fireflies recording/meeting you would like to summarize";
    }
    if (this.type == "competition") {
      title = "Describe the startup or industry for competition research";
    }
    contentEl.createEl("h2", { text: title });
    const inputEl = contentEl.createEl("textarea");
    inputEl.addEventListener("input", (event) => {
      event.stopPropagation();
    });
    const submitButton = contentEl.createEl("button", { text: "Submit" });
    submitButton.style.position = "absolute";
    submitButton.style.bottom = "0";
    submitButton.style.right = "0";
    submitButton.addEventListener("click", () => {
      this.onsubmit(inputEl.value);
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var MultipleTextInputModal = class extends import_obsidian2.Modal {
  constructor(app2, type, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.type = type;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "What topic would you like to research today?";
    contentEl.createEl("h2", { text: title });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Search Query")
      .addText((text) =>
        text.onChange((value) => {
          this.query = value;
        })
      );
    let web = new import_obsidian2.Setting(contentEl)
      .setName("Website to Search")
      .addText((text) =>
        text.onChange((value) => {
          this.website = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Task to do")
      .addDropdown((menu) => {
        menu.addOption("competition", "Find & Analyze competitors");
        menu.addOption("market-research", "Investor Summary");
        menu.setValue("....");
        menu.onChange((value) => {
          this.task = value;
        });
      });
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(this.website + ", " + this.query + ", " + this.task);
        });
    });
  }
};
var FireFliesTemp = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Give me the json string of transcript";
    contentEl.createEl("h2", { text: title });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Json String")
      .addTextArea((text) =>
        text.onChange((value) => {
          this.json_string = value;
        })
      );
    let web = new import_obsidian2.Setting(contentEl)
      .setName("Meeting name")
      .addText((text) =>
        text.onChange((value) => {
          this.meeting_name = value;
        })
      );
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(this.json_string + "&&& " + this.meeting_name);
        });
    });
  }
};
var MeetingBaasModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.isDetailed = false;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Summarise the call recorded by MeetingBaas.app";
    contentEl.createEl("h2", { text: title });
    new import_obsidian2.Setting(contentEl)
      .setName("Meeting name")
      .addText((text) =>
        text.onChange((value) => {
          this.meeting_name = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Detailed Meeting")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isDetailed = value;
        });
      });
    new import_obsidian2.Setting(contentEl)
      .setName("Model to use")
      .addDropdown((menu) => {
        menu.addOption("openai", "GPT-4-Turbo");
        menu.addOption("meta-llama/Llama-3-8b-chat-hf", "Llama-3-70B");
        menu.setValue("....");
        menu.onChange((value) => {
          this.model = value;
        });
      });
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(
            this.meeting_name + ", " + this.isDetailed + ", " + this.model
          );
        });
    });
  }
};
var WorkflowModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.model_name = "";
  }
  onOpen() {
    const { contentEl } = this;
    let title =
      "Describe the startup you want to analyze and if you want to use Groq";
    contentEl.createEl("h2", { text: title });
    new import_obsidian2.Setting(contentEl)
      .setName("Startup Description")
      .addTextArea((text) =>
        text.onChange((value) => {
          this.desc = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Model to use")
      .addDropdown((menu) => {
        menu.addOption("openai", "GPT-4-Turbo");
        menu.addOption("meta-llama/Llama-3-8b-chat-hf", "Llama-3-70B");
        menu.addOption("groq", "Groq");
        menu.setValue("....");
        menu.onChange((value) => {
          this.model_name = value;
        });
      });
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(this.desc + "//-- " + this.model_name);
        });
    });
  }
};
var FindInvestorModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.isFocused = false;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Describe the startup you want to find investors for";
    contentEl.createEl("h2", { text: title });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Startup Description")
      .addTextArea((text) =>
        text.onChange((value) => {
          this.company = value;
        })
      );
    let web = new import_obsidian2.Setting(contentEl)
      .setName("Stage")
      .setDesc("e.g, Preseed, Seed, etc")
      .addText((text) =>
        text.onChange((value) => {
          this.stage = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Location")
      .setDesc("insert the country where the startup is located")
      .addText((text) =>
        text.onChange((value) => {
          this.location = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Do you want to focus the search on strong connections?")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isFocused = value;
        });
      });
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(
            this.company +
              "//-- " +
              this.stage +
              "//-- " +
              this.location +
              "//-- " +
              this.isFocused
          );
        });
    });
  }
};
var PDFModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
  }
  getItems() {
    return this.app.vault
      .getFiles()
      .filter((file) => file.extension.includes("pdf"));
  }
  getItemText(file) {
    return file.name;
  }
  onChooseItem(file, evt) {
    this.onsubmit(file.path);
  }
};
var TracxnModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.isIPO = false;
    this.isAcquired = false;
    this.companies_per_request = "3";
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Competitor Overview through Tracxn";
    contentEl.createEl("h2", { text: title });
    contentEl.createEl("h5", {
      text: "IPO and Acquisition are mutually exclusive",
    });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Company Domain")
      .setDesc("e.g: tracxn.com. Do not add http://")
      .addText((text) =>
        text.onChange((value) => {
          this.company = value;
        })
      );
    let ipo = new import_obsidian2.Setting(contentEl)
      .setName("IPOed competitors?")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isIPO = value;
        });
      });
    let acquired = new import_obsidian2.Setting(contentEl)
      .setName("Acquired competitors?")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isAcquired = value;
        });
      });
    new import_obsidian2.Setting(contentEl)
      .setName("Number of companies per request")
      .addText((text) =>
        text.onChange((value) => (this.companies_per_request = value))
      );
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(
            this.company +
              ", " +
              this.isIPO +
              ", " +
              this.isAcquired +
              ", " +
              this.companies_per_request
          );
        });
    });
  }
};

// src/main.ts
var fs = __toESM(require("fs"));

// src/formatter.js
function format_url_text(final_text, url) {
  final_text =
    `## ${url} Research
` + final_text;
  final_text = final_text.replace(
    "Problem to be solved:",
    "#### Problem to be solved"
  );
  final_text = final_text.replace("Product:", "#### Product");
  final_text = final_text.replace("Features:", "#### Features");
  final_text = final_text.replace("Business Model:", "#### Business Model");
  final_text = final_text.replace("Competition:", "#### Competition");
  final_text = final_text.replace("Vision:", "#### Vision");
  final_text = final_text.replace("Extras:", "#### Extras");
  return final_text;
}

// src/search.ts
var import_obsidian3 = require("obsidian");
async function specific_web_research(
  task,
  website,
  search_query,
  openai2,
  editor
) {
  let presentation_prompt = "Summarize the following paragraphs.";
  let title = "New Section";
  if (task.toLowerCase() == "competition") {
    title = "Competition Research";
    presentation_prompt = `Highlight the most important facts for an investor from the following paragraphs. If there are none, say "Nothing". Otherwise always respond in the following format: 
            - Problems to be solved
            - Product and Technology
            - Money raised
            - Team
            - Other important points`;
  } else if (task.toLowerCase() == "market-research") {
    title = "Market Research";
    let industry = search_query.split("industry market")[0];
    presentation_prompt = `What facts about the ${industry} market can an investor learn from the following paragraphs? If there are no facts to learn simply output "Nothing"`;
  }
  let message = await execute_search_task(
    title,
    website,
    search_query,
    presentation_prompt,
    openai2,
    editor
  );
  return message;
}
async function execute_search_task(
  task,
  website,
  search_query,
  presentation_prompt,
  openai2,
  editor
) {
  try {
    let website_name = "";
    if (website == "") {
      website_name = "general research";
    } else {
      website_name = website.split(".")[0];
    }
    let message = `#### ${task} through ${website_name}
`;
    let summaries = [];
    let sources = [];
    let query = `site:${website} ${search_query}`;
    let result = await you_research(query);
    let counter = 0;
    let user_prompt = presentation_prompt;
    for (let element of result) {
      let snippets = element["snippets"];
      let title = element["title"];
      let url = element["url"];
      let summary = "";
      let paragraphs = snippets;
      paragraphs[0] = "- " + paragraphs[0];
      let string_paragraphs = paragraphs.join("\n\n- ");
      if (string_paragraphs && string_paragraphs.length > 1) {
        const response = await openai2.chat.completions.create({
          model: gpt_3_latest,
          messages: [
            {
              role: "system",
              content:
                "Act as an investigative journalist who is obsessed with the truth and accuracy. You always give answers in bullet points.",
            },
            {
              role: "user",
              content:
                `${user_prompt}
Paragraphs:
` + string_paragraphs,
            },
          ],
          temperature: 0,
          max_tokens: 1024,
          top_p: 1,
          frequency_penalty: 0,
          presence_penalty: 0,
        });
        summary += response.choices[0].message.content + "\n";
      }
      summaries.push(summary);
      let source = `[${title}](${url})`;
      sources.push(source);
      counter++;
      if (counter == 5) {
        break;
      }
    }
    for (let i = 0; i < summaries.length; i++) {
      message += `##### ${sources[i]}
`;
      message += summaries[i] + "\n\n";
    }
    return message;
  } catch (error) {
    console.log(`Error while doing research: ${error}`);
    new import_obsidian3.Notice(`Error while doing research`);
  }
  return "";
}
async function you_research(query) {
  let results = await (0, import_obsidian3.request)({
    url: `https://you-researcher-container-xm5lmdnsxq-uc.a.run.app/search?query=${query}`,
    method: "GET",
  });
  return await JSON.parse(results)["hits"];
}

// src/prompts.js
var DEFENSIBILITY_ANALYSIS_SYSTEM_PROMPT =
  "Use the following guidelines to determine what kinds of defensibility a startup can build with time:\n- **Network effect**: When every user creates more value for other users, forming a positive feedback loop. This can be local or global, and is one of the few forms of defensibility that can arise immediately upon launch of a company.\n- **Platform effect**: When a company becomes a sticky product because so many other companies have integrated against it. This usually comes after a company has enough users that others want to build against its platform to reach them.\n- **Integrations**: When a company integrates against many other APIs, code bases, etc. that are hard to reproduce, or when a company's services do integrations for the company against other vendors. This makes it hard to displace the company as each implementation is a unique and complex process.\n- **Building a ton of stuff**: When a company bundles and cross sells products that prevent other companies from finding a wedge to compete with them, or when a company has a big product footprint that makes it hard for new entrants to reach feature parity.\n- **Deals**: When a company secures early access, exclusive provider or distribution, or backend deals that give it scale, brand, or access advantages over competitors. This may include deals with APIs, data sources, regulators, or customers.\n- **Sales as moat**: When a company locks in customers with long term contracts, or has a sales process that makes it easier for enterprises to buy from them than from new suppliers. This may include security reviews, procurement processes, or pricing strategies.\n- **Regulatory**: When a company receives regulatory approvals that provide a moat. This may include licenses, permits, or exemptions that are hard to obtain or replicate by competitors.\n- **Data or system of record effect**: When a company has unique or proprietary data, or owns a customer's data or has a long historical record of it. This can create defensibility by making the data more valuable and harder to switch away from. Similarly, being a system of record for a user, entity, etc. can be a powerful position to be in.\n- **Scale effects**: When a company has access to large sums of money or business volume that allows it to do things that will make it difficult for competitors to upend them. This may include capital scale, business scale and negotiation, or pricing advantages.\n- **Open source**: When a company benefits from being the creator or contributor of an open source software project that is widely used or adopted by developers. This can create defensibility by giving the company brand recognition, community influence, and talent access.\n- **Brand**: When a company becomes synonymous with the thing they do, often by creating a new product category, or doing something vastly better than competitors. This can create defensibility by making the company the default choice for customers and creating loyalty and trust.\n- **IP moat**: When a company has intellectual property that protects its product or technology from being copied or infringed by competitors. This tends to be more effective in hard tech or biotech companies than most consumer or SaaS products.\n- **Speed**: When a company can execute faster and better than competitors, especially incumbents. This can create defensibility by allowing the company to iterate quickly, respond to customer feedback, and hire and close candidates faster.\n- **Pricing**: When a company can offer a lower price than competitors due to a lower cost structure, a lack of an existing product to cannibalize, or a different business model. This can create defensibility by attracting more customers and creating higher margins.\n- **New business models**: When a company can innovate on business model to create a higher leverage business or different incentive structure. This can create defensibility by disrupting incumbents who are used to traditional ways of doing things.\nAlways think step by step!";
var GUIDANCE_WORKFLOW_SYSTEM_PROMPT =
  "You are a helpful assistant to a venture capital investor. Your main job is guiding the investor to always focus on the bigger picture and find the core arguments they should focus us. Your arguments are always concise and to the point. When needed, you can guide the investor by asking questions that help them focus on the essentials.\nIn your analysis, you should always be customer-centric and focused on the target customer of the startup.\nThe following aspects are extremely crucial to the investor:\n- Who is the target customer for the startup?\n- What is the hardest part about the job of the target customer?\n- What is the startup's unique value proposition for the target customer?";

// src/fireflies.ts
async function get_meeting_id(meeting_name, fireflies_api_key2) {
  let meetings = await fetch("https://api.fireflies.ai/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${fireflies_api_key2}`,
    },
    body: JSON.stringify({
      query: `
            query {
                transcripts {
                    id
                    title
                    fireflies_users
                    participants
                    date
                    transcript_url
                    duration
                }
            }
        `,
    }),
  })
    .then((result) => {
      return result.json();
    })
    .then((result) => {
      return result.data;
    });
  let meetings_list = meetings["transcripts"];
  let meeting_id = "";
  for (let meeting of meetings_list) {
    if (meeting["title"] == meeting_name) {
      meeting_id = meeting["id"];
      break;
    }
  }
  return meeting_id;
}
async function get_meeting_transcript_by_id(id, investor_names2, api_key) {
  let transcript = await fetch("https://api.fireflies.ai/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${api_key}`,
    },
    body: JSON.stringify({
      query: `
              query {
                transcript(id: "${id}"){ title date sentences {text speaker_name} }
              }
          `,
    }),
  })
    .then((result) => {
      return result.json();
    })
    .then((result) => {
      return result.data;
    });
  let current_sentence = "";
  let useful_paragraphs = [];
  let current_speaker =
    transcript["transcript"]["sentences"][0]["speaker_name"];
  for (let sentence of transcript["transcript"]["sentences"]) {
    if (sentence["speaker_name"] == current_speaker) {
      current_sentence += sentence["text"];
    } else {
      if (current_sentence.length != 0) {
        if (investor_names2.includes(current_speaker)) {
          current_speaker += " (Investor)";
          console.log(current_speaker);
        } else {
          current_speaker += " (Founder)";
        }
        current_sentence = current_speaker + ": " + current_sentence + "\n";
        useful_paragraphs.push(current_sentence);
        current_sentence = sentence["text"];
        current_speaker = sentence["speaker_name"];
      }
    }
  }
  if (current_sentence.length != 0) {
    useful_paragraphs.push(current_sentence);
  }
  return useful_paragraphs;
}
async function transcript_json_to_array_string(
  transcript_json_string,
  investor_names2
) {
  let json = JSON.parse(transcript_json_string);
  let transcript = json["data"];
  let current_sentence = "";
  let useful_paragraphs = [];
  let current_speaker =
    transcript["transcript"]["sentences"][0]["speaker_name"];
  for (let sentence of transcript["transcript"]["sentences"]) {
    if (sentence["speaker_name"] == current_speaker) {
      current_sentence += sentence["text"];
    } else {
      if (current_sentence.length != 0) {
        if (investor_names2.includes(current_speaker)) {
          current_speaker += " (Investor)";
          console.log(current_speaker);
        } else {
          current_speaker += " (Founder)";
        }
        current_sentence = current_speaker + ": " + current_sentence + "\n";
        useful_paragraphs.push(current_sentence);
        current_sentence = sentence["text"];
        current_speaker = sentence["speaker_name"];
      }
    }
  }
  if (current_sentence.length != 0) {
    useful_paragraphs.push(current_sentence);
  }
  return useful_paragraphs;
}

// node_modules/groq-sdk/version.mjs
var VERSION3 = "0.3.3";

// node_modules/groq-sdk/_shims/registry.mjs
var auto3 = false;
var kind3 = void 0;
var fetch4 = void 0;
var Request4 = void 0;
var Response4 = void 0;
var Headers4 = void 0;
var FormData4 = void 0;
var Blob4 = void 0;
var File4 = void 0;
var ReadableStream4 = void 0;
var getMultipartRequestOptions3 = void 0;
var getDefaultAgent3 = void 0;
var fileFromPath3 = void 0;
var isFsReadStream3 = void 0;
function setShims3(shims, options = { auto: false }) {
  if (auto3) {
    throw new Error(
      `you must \`import 'groq-sdk/shims/${shims.kind}'\` before importing anything else from groq-sdk`
    );
  }
  if (kind3) {
    throw new Error(
      `can't \`import 'groq-sdk/shims/${shims.kind}'\` after \`import 'groq-sdk/shims/${kind3}'\``
    );
  }
  auto3 = options.auto;
  kind3 = shims.kind;
  fetch4 = shims.fetch;
  Request4 = shims.Request;
  Response4 = shims.Response;
  Headers4 = shims.Headers;
  FormData4 = shims.FormData;
  Blob4 = shims.Blob;
  File4 = shims.File;
  ReadableStream4 = shims.ReadableStream;
  getMultipartRequestOptions3 = shims.getMultipartRequestOptions;
  getDefaultAgent3 = shims.getDefaultAgent;
  fileFromPath3 = shims.fileFromPath;
  isFsReadStream3 = shims.isFsReadStream;
}

// node_modules/groq-sdk/_shims/MultipartBody.mjs
var MultipartBody3 = class {
  constructor(body) {
    this.body = body;
  }
  get [Symbol.toStringTag]() {
    return "MultipartBody";
  }
};

// node_modules/groq-sdk/_shims/web-runtime.mjs
function getRuntime3({ manuallyImported } = {}) {
  const recommendation = manuallyImported
    ? `You may need to use polyfills`
    : `Add one of these imports before your first \`import \u2026 from 'groq-sdk'\`:
- \`import 'groq-sdk/shims/node'\` (if you're running on Node)
- \`import 'groq-sdk/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(
      `this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`
    );
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData:
      typeof FormData !== "undefined"
        ? FormData
        : class FormData {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`
              );
            }
          },
    Blob:
      typeof Blob !== "undefined"
        ? Blob
        : class Blob {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`
              );
            }
          },
    File:
      typeof File !== "undefined"
        ? File
        : class File {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`
              );
            }
          },
    ReadableStream:
      typeof ReadableStream !== "undefined"
        ? ReadableStream
        : class ReadableStream {
            constructor() {
              throw new Error(
                `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`
              );
            }
          },
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody3(form),
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error(
        "The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/groq/groq-typescript#file-uploads"
      );
    },
    isFsReadStream: (value) => false,
  };
}

// node_modules/groq-sdk/_shims/index.mjs
if (!kind3) setShims3(getRuntime3(), { auto: true });

// node_modules/groq-sdk/error.mjs
var error_exports3 = {};
__export(error_exports3, {
  APIConnectionError: () => APIConnectionError5,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError5,
  APIError: () => APIError5,
  APIUserAbortError: () => APIUserAbortError5,
  AuthenticationError: () => AuthenticationError5,
  BadRequestError: () => BadRequestError5,
  ConflictError: () => ConflictError5,
  GroqError: () => GroqError,
  InternalServerError: () => InternalServerError5,
  NotFoundError: () => NotFoundError5,
  PermissionDeniedError: () => PermissionDeniedError5,
  RateLimitError: () => RateLimitError5,
  UnprocessableEntityError: () => UnprocessableEntityError5,
});
var GroqError = class extends Error {};
var APIError5 = class extends GroqError {
  constructor(status, error, message, headers) {
    super(`${APIError5.makeMessage(status, error, message)}`);
    this.status = status;
    this.headers = headers;
    this.error = error;
  }
  static makeMessage(status, error, message) {
    const msg = (error == null ? void 0 : error.message)
      ? typeof error.message === "string"
        ? error.message
        : JSON.stringify(error.message)
      : error
      ? JSON.stringify(error)
      : message;
    if (status && msg) {
      return `${status} ${msg}`;
    }
    if (status) {
      return `${status} status code (no body)`;
    }
    if (msg) {
      return msg;
    }
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status) {
      return new APIConnectionError5({ cause: castToError3(errorResponse) });
    }
    const error = errorResponse;
    if (status === 400) {
      return new BadRequestError5(status, error, message, headers);
    }
    if (status === 401) {
      return new AuthenticationError5(status, error, message, headers);
    }
    if (status === 403) {
      return new PermissionDeniedError5(status, error, message, headers);
    }
    if (status === 404) {
      return new NotFoundError5(status, error, message, headers);
    }
    if (status === 409) {
      return new ConflictError5(status, error, message, headers);
    }
    if (status === 422) {
      return new UnprocessableEntityError5(status, error, message, headers);
    }
    if (status === 429) {
      return new RateLimitError5(status, error, message, headers);
    }
    if (status >= 500) {
      return new InternalServerError5(status, error, message, headers);
    }
    return new APIError5(status, error, message, headers);
  }
};
var APIUserAbortError5 = class extends APIError5 {
  constructor({ message } = {}) {
    super(void 0, void 0, message || "Request was aborted.", void 0);
    this.status = void 0;
  }
};
var APIConnectionError5 = class extends APIError5 {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    this.status = void 0;
    if (cause) this.cause = cause;
  }
};
var APIConnectionTimeoutError5 = class extends APIConnectionError5 {
  constructor({ message } = {}) {
    super({ message: message != null ? message : "Request timed out." });
  }
};
var BadRequestError5 = class extends APIError5 {
  constructor() {
    super(...arguments);
    this.status = 400;
  }
};
var AuthenticationError5 = class extends APIError5 {
  constructor() {
    super(...arguments);
    this.status = 401;
  }
};
var PermissionDeniedError5 = class extends APIError5 {
  constructor() {
    super(...arguments);
    this.status = 403;
  }
};
var NotFoundError5 = class extends APIError5 {
  constructor() {
    super(...arguments);
    this.status = 404;
  }
};
var ConflictError5 = class extends APIError5 {
  constructor() {
    super(...arguments);
    this.status = 409;
  }
};
var UnprocessableEntityError5 = class extends APIError5 {
  constructor() {
    super(...arguments);
    this.status = 422;
  }
};
var RateLimitError5 = class extends APIError5 {
  constructor() {
    super(...arguments);
    this.status = 429;
  }
};
var InternalServerError5 = class extends APIError5 {};

// node_modules/groq-sdk/lib/streaming.mjs
var Stream3 = class {
  constructor(iterator, controller) {
    this.iterator = iterator;
    this.controller = controller;
  }
  static fromSSEResponse(response, controller) {
    let consumed = false;
    const decoder = new SSEDecoder3();
    async function* iterMessages() {
      if (!response.body) {
        controller.abort();
        throw new GroqError(
          `Attempted to iterate over a response with no body`
        );
      }
      const lineDecoder = new LineDecoder3();
      const iter = readableStreamAsyncIterable3(response.body);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          const sse = decoder.decode(line);
          if (sse) yield sse;
        }
      }
      for (const line of lineDecoder.flush()) {
        const sse = decoder.decode(line);
        if (sse) yield sse;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const sse of iterMessages()) {
          if (done) continue;
          if (sse.data.startsWith("[DONE]")) {
            done = true;
            continue;
          }
          if (sse.event === null) {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (data && data.error) {
              throw new APIError5(void 0, data.error, void 0, void 0);
            }
            yield data;
          }
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream3(iterator, controller);
  }
  static fromReadableStream(readableStream, controller) {
    let consumed = false;
    async function* iterLines() {
      const lineDecoder = new LineDecoder3();
      const iter = readableStreamAsyncIterable3(readableStream);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          yield line;
        }
      }
      for (const line of lineDecoder.flush()) {
        yield line;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const line of iterLines()) {
          if (done) continue;
          if (line) yield JSON.parse(line);
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream3(iterator, controller);
  }
  [Symbol.asyncIterator]() {
    return this.iterator();
  }
  tee() {
    const left = [];
    const right = [];
    const iterator = this.iterator();
    const teeIterator = (queue2) => {
      return {
        next: () => {
          if (queue2.length === 0) {
            const result = iterator.next();
            left.push(result);
            right.push(result);
          }
          return queue2.shift();
        },
      };
    };
    return [
      new Stream3(() => teeIterator(left), this.controller),
      new Stream3(() => teeIterator(right), this.controller),
    ];
  }
  toReadableStream() {
    const self = this;
    let iter;
    const encoder = new TextEncoder();
    return new ReadableStream4({
      async start() {
        iter = self[Symbol.asyncIterator]();
      },
      async pull(ctrl) {
        try {
          const { value, done } = await iter.next();
          if (done) return ctrl.close();
          const bytes = encoder.encode(JSON.stringify(value) + "\n");
          ctrl.enqueue(bytes);
        } catch (err) {
          ctrl.error(err);
        }
      },
      async cancel() {
        var _a4;
        await ((_a4 = iter.return) == null ? void 0 : _a4.call(iter));
      },
    });
  }
};
var SSEDecoder3 = class {
  constructor() {
    this.event = null;
    this.data = [];
    this.chunks = [];
  }
  decode(line) {
    if (line.endsWith("\r")) {
      line = line.substring(0, line.length - 1);
    }
    if (!line) {
      if (!this.event && !this.data.length) return null;
      const sse = {
        event: this.event,
        data: this.data.join("\n"),
        raw: this.chunks,
      };
      this.event = null;
      this.data = [];
      this.chunks = [];
      return sse;
    }
    this.chunks.push(line);
    if (line.startsWith(":")) {
      return null;
    }
    let [fieldname, _, value] = partition3(line, ":");
    if (value.startsWith(" ")) {
      value = value.substring(1);
    }
    if (fieldname === "event") {
      this.event = value;
    } else if (fieldname === "data") {
      this.data.push(value);
    }
    return null;
  }
};
var LineDecoder3 = class {
  constructor() {
    this.buffer = [];
    this.trailingCR = false;
  }
  decode(chunk) {
    let text = this.decodeText(chunk);
    if (this.trailingCR) {
      text = "\r" + text;
      this.trailingCR = false;
    }
    if (text.endsWith("\r")) {
      this.trailingCR = true;
      text = text.slice(0, -1);
    }
    if (!text) {
      return [];
    }
    const trailingNewline = LineDecoder3.NEWLINE_CHARS.has(
      text[text.length - 1] || ""
    );
    let lines = text.split(LineDecoder3.NEWLINE_REGEXP);
    if (lines.length === 1 && !trailingNewline) {
      this.buffer.push(lines[0]);
      return [];
    }
    if (this.buffer.length > 0) {
      lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
      this.buffer = [];
    }
    if (!trailingNewline) {
      this.buffer = [lines.pop() || ""];
    }
    return lines;
  }
  decodeText(bytes) {
    var _a4;
    if (bytes == null) return "";
    if (typeof bytes === "string") return bytes;
    if (typeof Buffer !== "undefined") {
      if (bytes instanceof Buffer) {
        return bytes.toString();
      }
      if (bytes instanceof Uint8Array) {
        return Buffer.from(bytes).toString();
      }
      throw new GroqError(
        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`
      );
    }
    if (typeof TextDecoder !== "undefined") {
      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
        (_a4 = this.textDecoder) != null
          ? _a4
          : (this.textDecoder = new TextDecoder("utf8"));
        return this.textDecoder.decode(bytes);
      }
      throw new GroqError(
        `Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`
      );
    }
    throw new GroqError(
      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`
    );
  }
  flush() {
    if (!this.buffer.length && !this.trailingCR) {
      return [];
    }
    const lines = [this.buffer.join("")];
    this.buffer = [];
    this.trailingCR = false;
    return lines;
  }
};
LineDecoder3.NEWLINE_CHARS = /* @__PURE__ */ new Set([
  "\n",
  "\r",
  "\v",
  "\f",
  "",
  "",
  "",
  "\x85",
  "\u2028",
  "\u2029",
]);
LineDecoder3.NEWLINE_REGEXP =
  /\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;
function partition3(str3, delimiter) {
  const index = str3.indexOf(delimiter);
  if (index !== -1) {
    return [
      str3.substring(0, index),
      delimiter,
      str3.substring(index + delimiter.length),
    ];
  }
  return [str3, "", ""];
}
function readableStreamAsyncIterable3(stream) {
  if (stream[Symbol.asyncIterator]) return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done) reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    },
  };
}

// node_modules/groq-sdk/uploads.mjs
var isResponseLike3 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.url === "string" &&
  typeof value.blob === "function";
var isFileLike3 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.name === "string" &&
  typeof value.lastModified === "number" &&
  isBlobLike3(value);
var isBlobLike3 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.size === "number" &&
  typeof value.type === "string" &&
  typeof value.text === "function" &&
  typeof value.slice === "function" &&
  typeof value.arrayBuffer === "function";
var isUploadable3 = (value) => {
  return isFileLike3(value) || isResponseLike3(value) || isFsReadStream3(value);
};
async function toFile4(value, name, options = {}) {
  var _a4, _b, _c;
  value = await value;
  if (isResponseLike3(value)) {
    const blob = await value.blob();
    name ||
      (name =
        (_a4 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null
          ? _a4
          : "unknown_file");
    return new File4([blob], name, options);
  }
  const bits = await getBytes3(value);
  name || (name = (_b = getName3(value)) != null ? _b : "unknown_file");
  if (!options.type) {
    const type = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File4(bits, name, options);
}
async function getBytes3(value) {
  var _a4;
  let parts = [];
  if (
    typeof value === "string" ||
    ArrayBuffer.isView(value) ||
    value instanceof ArrayBuffer
  ) {
    parts.push(value);
  } else if (isBlobLike3(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator3(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(
      `Unexpected data type: ${typeof value}; constructor: ${
        (_a4 = value == null ? void 0 : value.constructor) == null
          ? void 0
          : _a4.name
      }; props: ${propsForError3(value)}`
    );
  }
  return parts;
}
function propsForError3(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName3(value) {
  var _a4;
  return (
    getStringFromMaybeBuffer3(value.name) ||
    getStringFromMaybeBuffer3(value.filename) ||
    ((_a4 = getStringFromMaybeBuffer3(value.path)) == null
      ? void 0
      : _a4.split(/[\\/]/).pop())
  );
}
var getStringFromMaybeBuffer3 = (x) => {
  if (typeof x === "string") return x;
  if (typeof Buffer !== "undefined" && x instanceof Buffer) return String(x);
  return void 0;
};
var isAsyncIterableIterator3 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value[Symbol.asyncIterator] === "function";
var isMultipartBody3 = (body) =>
  body &&
  typeof body === "object" &&
  body.body &&
  body[Symbol.toStringTag] === "MultipartBody";
var multipartFormRequestOptions3 = async (opts) => {
  const form = await createForm3(opts.body);
  return getMultipartRequestOptions3(form, opts);
};
var createForm3 = async (body) => {
  const form = new FormData4();
  await Promise.all(
    Object.entries(body || {}).map(([key, value]) =>
      addFormValue3(form, key, value)
    )
  );
  return form;
};
var addFormValue3 = async (form, key, value) => {
  if (value === void 0) return;
  if (value == null) {
    throw new TypeError(
      `Received null for "${key}"; to pass null in FormData, you must use the string 'null'`
    );
  }
  if (
    typeof value === "string" ||
    typeof value === "number" ||
    typeof value === "boolean"
  ) {
    form.append(key, String(value));
  } else if (isUploadable3(value)) {
    const file = await toFile4(value);
    form.append(key, file);
  } else if (Array.isArray(value)) {
    await Promise.all(
      value.map((entry) => addFormValue3(form, key + "[]", entry))
    );
  } else if (typeof value === "object") {
    await Promise.all(
      Object.entries(value).map(([name, prop]) =>
        addFormValue3(form, `${key}[${name}]`, prop)
      )
    );
  } else {
    throw new TypeError(
      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`
    );
  }
};

// node_modules/groq-sdk/core.mjs
var __classPrivateFieldSet7 = function (receiver, state, value, kind4, f) {
  if (kind4 === "m") throw new TypeError("Private method is not writable");
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind4 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet7 = function (receiver, state, kind4, f) {
  if (kind4 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind4 === "m"
    ? f
    : kind4 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractPage_client3;
async function defaultParseResponse3(props) {
  const { response } = props;
  if (props.options.stream) {
    debug3(
      "response",
      response.status,
      response.url,
      response.headers,
      response.body
    );
    if (props.options.__streamClass) {
      return props.options.__streamClass.fromSSEResponse(
        response,
        props.controller
      );
    }
    return Stream3.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  const isJSON =
    (contentType == null ? void 0 : contentType.includes("application/json")) ||
    (contentType == null
      ? void 0
      : contentType.includes("application/vnd.api+json"));
  if (isJSON) {
    const json = await response.json();
    debug3("response", response.status, response.url, response.headers, json);
    return json;
  }
  const text = await response.text();
  debug3("response", response.status, response.url, response.headers, text);
  return text;
}
var APIPromise3 = class extends Promise {
  constructor(responsePromise, parseResponse = defaultParseResponse3) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
    this.parseResponse = parseResponse;
  }
  _thenUnwrap(transform) {
    return new APIPromise3(this.responsePromise, async (props) =>
      transform(await this.parseResponse(props))
    );
  }
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  async withResponse() {
    const [data, response] = await Promise.all([
      this.parse(),
      this.asResponse(),
    ]);
    return { data, response };
  }
  parse() {
    if (!this.parsedPromise) {
      this.parsedPromise = this.responsePromise.then(this.parseResponse);
    }
    return this.parsedPromise;
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
};
var APIClient3 = class {
  constructor({
    baseURL,
    maxRetries = 2,
    timeout = 6e4,
    httpAgent,
    fetch: overridenFetch,
  }) {
    this.baseURL = baseURL;
    this.maxRetries = validatePositiveInteger3("maxRetries", maxRetries);
    this.timeout = validatePositiveInteger3("timeout", timeout);
    this.httpAgent = httpAgent;
    this.fetch = overridenFetch != null ? overridenFetch : fetch4;
  }
  authHeaders(opts) {
    return {};
  }
  defaultHeaders(opts) {
    return {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": this.getUserAgent(),
      ...getPlatformHeaders3(),
      ...this.authHeaders(opts),
    };
  }
  validateHeaders(headers, customHeaders) {}
  defaultIdempotencyKey() {
    return `stainless-node-retry-${uuid43()}`;
  }
  get(path, opts) {
    return this.methodRequest("get", path, opts);
  }
  post(path, opts) {
    return this.methodRequest("post", path, opts);
  }
  patch(path, opts) {
    return this.methodRequest("patch", path, opts);
  }
  put(path, opts) {
    return this.methodRequest("put", path, opts);
  }
  delete(path, opts) {
    return this.methodRequest("delete", path, opts);
  }
  methodRequest(method, path, opts) {
    return this.request(
      Promise.resolve(opts).then((opts2) => ({ method, path, ...opts2 }))
    );
  }
  getAPIList(path, Page3, opts) {
    return this.requestAPIList(Page3, { method: "get", path, ...opts });
  }
  calculateContentLength(body) {
    if (typeof body === "string") {
      if (typeof Buffer !== "undefined") {
        return Buffer.byteLength(body, "utf8").toString();
      }
      if (typeof TextEncoder !== "undefined") {
        const encoder = new TextEncoder();
        const encoded = encoder.encode(body);
        return encoded.length.toString();
      }
    }
    return null;
  }
  buildRequest(options) {
    var _a4, _b, _c, _d, _e, _f;
    const { method, path, query, headers = {} } = options;
    const body = isMultipartBody3(options.body)
      ? options.body.body
      : options.body
      ? JSON.stringify(options.body, null, 2)
      : null;
    const contentLength = this.calculateContentLength(body);
    const url = this.buildURL(path, query);
    if ("timeout" in options)
      validatePositiveInteger3("timeout", options.timeout);
    const timeout = (_a4 = options.timeout) != null ? _a4 : this.timeout;
    const httpAgent =
      (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null
        ? _c
        : getDefaultAgent3(url);
    const minAgentTimeout = timeout + 1e3;
    if (
      typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null
        ? void 0
        : _d.timeout) === "number" &&
      minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)
    ) {
      httpAgent.options.timeout = minAgentTimeout;
    }
    if (this.idempotencyHeader && method !== "get") {
      if (!options.idempotencyKey)
        options.idempotencyKey = this.defaultIdempotencyKey();
      headers[this.idempotencyHeader] = options.idempotencyKey;
    }
    const reqHeaders = this.buildHeaders({ options, headers, contentLength });
    const req = {
      method,
      ...(body && { body }),
      headers: reqHeaders,
      ...(httpAgent && { agent: httpAgent }),
      signal: (_f = options.signal) != null ? _f : null,
    };
    return { req, url, timeout };
  }
  buildHeaders({ options, headers, contentLength }) {
    const reqHeaders = {};
    if (contentLength) {
      reqHeaders["content-length"] = contentLength;
    }
    const defaultHeaders = this.defaultHeaders(options);
    applyHeadersMut(reqHeaders, defaultHeaders);
    applyHeadersMut(reqHeaders, headers);
    if (isMultipartBody3(options.body) && kind3 !== "node") {
      delete reqHeaders["content-type"];
    }
    this.validateHeaders(reqHeaders, headers);
    return reqHeaders;
  }
  async prepareOptions(options) {}
  async prepareRequest(request4, { url, options }) {}
  parseHeaders(headers) {
    return !headers
      ? {}
      : Symbol.iterator in headers
      ? Object.fromEntries(Array.from(headers).map((header) => [...header]))
      : { ...headers };
  }
  makeStatusError(status, error, message, headers) {
    return APIError5.generate(status, error, message, headers);
  }
  request(options, remainingRetries = null) {
    return new APIPromise3(this.makeRequest(options, remainingRetries));
  }
  async makeRequest(optionsInput, retriesRemaining) {
    var _a4, _b, _c;
    const options = await optionsInput;
    if (retriesRemaining == null) {
      retriesRemaining =
        (_a4 = options.maxRetries) != null ? _a4 : this.maxRetries;
    }
    await this.prepareOptions(options);
    const { req, url, timeout } = this.buildRequest(options);
    await this.prepareRequest(req, { url, options });
    debug3("request", url, options, req.headers);
    if ((_b = options.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError5();
    }
    const controller = new AbortController();
    const response = await this.fetchWithTimeout(
      url,
      req,
      timeout,
      controller
    ).catch(castToError3);
    if (response instanceof Error) {
      if ((_c = options.signal) == null ? void 0 : _c.aborted) {
        throw new APIUserAbortError5();
      }
      if (retriesRemaining) {
        return this.retryRequest(options, retriesRemaining);
      }
      if (response.name === "AbortError") {
        throw new APIConnectionTimeoutError5();
      }
      throw new APIConnectionError5({ cause: response });
    }
    const responseHeaders = createResponseHeaders3(response.headers);
    if (!response.ok) {
      if (retriesRemaining && this.shouldRetry(response)) {
        const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
        debug3(
          `response (error; ${retryMessage2})`,
          response.status,
          url,
          responseHeaders
        );
        return this.retryRequest(options, retriesRemaining, responseHeaders);
      }
      const errText = await response
        .text()
        .catch((e) => castToError3(e).message);
      const errJSON = safeJSON3(errText);
      const errMessage = errJSON ? void 0 : errText;
      const retryMessage = retriesRemaining
        ? `(error; no more retries left)`
        : `(error; not retryable)`;
      debug3(
        `response (error; ${retryMessage})`,
        response.status,
        url,
        responseHeaders,
        errMessage
      );
      const err = this.makeStatusError(
        response.status,
        errJSON,
        errMessage,
        responseHeaders
      );
      throw err;
    }
    return { response, options, controller };
  }
  requestAPIList(Page3, options) {
    const request4 = this.makeRequest(options, null);
    return new PagePromise3(this, request4, Page3);
  }
  buildURL(path, query) {
    const url = isAbsoluteURL3(path)
      ? new URL(path)
      : new URL(
          this.baseURL +
            (this.baseURL.endsWith("/") && path.startsWith("/")
              ? path.slice(1)
              : path)
        );
    const defaultQuery = this.defaultQuery();
    if (!isEmptyObj3(defaultQuery)) {
      query = { ...defaultQuery, ...query };
    }
    if (typeof query === "object" && query && !Array.isArray(query)) {
      url.search = this.stringifyQuery(query);
    }
    return url.toString();
  }
  stringifyQuery(query) {
    return Object.entries(query)
      .filter(([_, value]) => typeof value !== "undefined")
      .map(([key, value]) => {
        if (
          typeof value === "string" ||
          typeof value === "number" ||
          typeof value === "boolean"
        ) {
          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
        }
        if (value === null) {
          return `${encodeURIComponent(key)}=`;
        }
        throw new GroqError(
          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`
        );
      })
      .join("&");
  }
  async fetchWithTimeout(url, init, ms, controller) {
    const { signal, ...options } = init || {};
    if (signal) signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    return this.getRequestClient()
      .fetch.call(void 0, url, { signal: controller.signal, ...options })
      .finally(() => {
        clearTimeout(timeout);
      });
  }
  getRequestClient() {
    return { fetch: this.fetch };
  }
  shouldRetry(response) {
    const shouldRetryHeader = response.headers.get("x-should-retry");
    if (shouldRetryHeader === "true") return true;
    if (shouldRetryHeader === "false") return false;
    if (response.status === 408) return true;
    if (response.status === 409) return true;
    if (response.status === 429) return true;
    if (response.status >= 500) return true;
    return false;
  }
  async retryRequest(options, retriesRemaining, responseHeaders) {
    var _a4;
    let timeoutMillis;
    const retryAfterMillisHeader =
      responseHeaders == null ? void 0 : responseHeaders["retry-after-ms"];
    if (retryAfterMillisHeader) {
      const timeoutMs = parseFloat(retryAfterMillisHeader);
      if (!Number.isNaN(timeoutMs)) {
        timeoutMillis = timeoutMs;
      }
    }
    const retryAfterHeader =
      responseHeaders == null ? void 0 : responseHeaders["retry-after"];
    if (retryAfterHeader && !timeoutMillis) {
      const timeoutSeconds = parseFloat(retryAfterHeader);
      if (!Number.isNaN(timeoutSeconds)) {
        timeoutMillis = timeoutSeconds * 1e3;
      } else {
        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
      }
    }
    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
      const maxRetries =
        (_a4 = options.maxRetries) != null ? _a4 : this.maxRetries;
      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(
        retriesRemaining,
        maxRetries
      );
    }
    await sleep3(timeoutMillis);
    return this.makeRequest(options, retriesRemaining - 1);
  }
  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
    const initialRetryDelay = 0.5;
    const maxRetryDelay = 8;
    const numRetries = maxRetries - retriesRemaining;
    const sleepSeconds = Math.min(
      initialRetryDelay * Math.pow(2, numRetries),
      maxRetryDelay
    );
    const jitter = 1 - Math.random() * 0.25;
    return sleepSeconds * jitter * 1e3;
  }
  getUserAgent() {
    return `${this.constructor.name}/JS ${VERSION3}`;
  }
};
var AbstractPage3 = class {
  constructor(client, response, body, options) {
    _AbstractPage_client3.set(this, void 0);
    __classPrivateFieldSet7(this, _AbstractPage_client3, client, "f");
    this.options = options;
    this.response = response;
    this.body = body;
  }
  hasNextPage() {
    const items = this.getPaginatedItems();
    if (!items.length) return false;
    return this.nextPageInfo() != null;
  }
  async getNextPage() {
    const nextInfo = this.nextPageInfo();
    if (!nextInfo) {
      throw new GroqError(
        "No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`."
      );
    }
    const nextOptions = { ...this.options };
    if ("params" in nextInfo && typeof nextOptions.query === "object") {
      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
    } else if ("url" in nextInfo) {
      const params = [
        ...Object.entries(nextOptions.query || {}),
        ...nextInfo.url.searchParams.entries(),
      ];
      for (const [key, value] of params) {
        nextInfo.url.searchParams.set(key, value);
      }
      nextOptions.query = void 0;
      nextOptions.path = nextInfo.url.toString();
    }
    return await __classPrivateFieldGet7(
      this,
      _AbstractPage_client3,
      "f"
    ).requestAPIList(this.constructor, nextOptions);
  }
  async *iterPages() {
    let page = this;
    yield page;
    while (page.hasNextPage()) {
      page = await page.getNextPage();
      yield page;
    }
  }
  async *[((_AbstractPage_client3 = /* @__PURE__ */ new WeakMap()),
  Symbol.asyncIterator)]() {
    for await (const page of this.iterPages()) {
      for (const item of page.getPaginatedItems()) {
        yield item;
      }
    }
  }
};
var PagePromise3 = class extends APIPromise3 {
  constructor(client, request4, Page3) {
    super(
      request4,
      async (props) =>
        new Page3(
          client,
          props.response,
          await defaultParseResponse3(props),
          props.options
        )
    );
  }
  async *[Symbol.asyncIterator]() {
    const page = await this;
    for await (const item of page) {
      yield item;
    }
  }
};
var createResponseHeaders3 = (headers) => {
  return new Proxy(Object.fromEntries(headers.entries()), {
    get(target, name) {
      const key = name.toString();
      return target[key.toLowerCase()] || target[key];
    },
  });
};
var getPlatformProperties3 = () => {
  if (typeof Deno !== "undefined" && Deno.build != null) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION3,
      "X-Stainless-OS": normalizePlatform3(Deno.build.os),
      "X-Stainless-Arch": normalizeArch3(Deno.build.arch),
      "X-Stainless-Runtime": "deno",
      "X-Stainless-Runtime-Version": Deno.version,
    };
  }
  if (typeof EdgeRuntime !== "undefined") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION3,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": `other:${EdgeRuntime}`,
      "X-Stainless-Runtime": "edge",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  if (
    Object.prototype.toString.call(
      typeof process !== "undefined" ? process : 0
    ) === "[object process]"
  ) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION3,
      "X-Stainless-OS": normalizePlatform3(process.platform),
      "X-Stainless-Arch": normalizeArch3(process.arch),
      "X-Stainless-Runtime": "node",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  const browserInfo = getBrowserInfo3();
  if (browserInfo) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION3,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": "unknown",
      "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
      "X-Stainless-Runtime-Version": browserInfo.version,
    };
  }
  return {
    "X-Stainless-Lang": "js",
    "X-Stainless-Package-Version": VERSION3,
    "X-Stainless-OS": "Unknown",
    "X-Stainless-Arch": "unknown",
    "X-Stainless-Runtime": "unknown",
    "X-Stainless-Runtime-Version": "unknown",
  };
};
function getBrowserInfo3() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    {
      key: "safari",
      pattern:
        /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/,
    },
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
var normalizeArch3 = (arch) => {
  if (arch === "x32") return "x32";
  if (arch === "x86_64" || arch === "x64") return "x64";
  if (arch === "arm") return "arm";
  if (arch === "aarch64" || arch === "arm64") return "arm64";
  if (arch) return `other:${arch}`;
  return "unknown";
};
var normalizePlatform3 = (platform) => {
  platform = platform.toLowerCase();
  if (platform.includes("ios")) return "iOS";
  if (platform === "android") return "Android";
  if (platform === "darwin") return "MacOS";
  if (platform === "win32") return "Windows";
  if (platform === "freebsd") return "FreeBSD";
  if (platform === "openbsd") return "OpenBSD";
  if (platform === "linux") return "Linux";
  if (platform) return `Other:${platform}`;
  return "Unknown";
};
var _platformHeaders3;
var getPlatformHeaders3 = () => {
  return _platformHeaders3 != null
    ? _platformHeaders3
    : (_platformHeaders3 = getPlatformProperties3());
};
var safeJSON3 = (text) => {
  try {
    return JSON.parse(text);
  } catch (err) {
    return void 0;
  }
};
var startsWithSchemeRegexp3 = new RegExp("^(?:[a-z]+:)?//", "i");
var isAbsoluteURL3 = (url) => {
  return startsWithSchemeRegexp3.test(url);
};
var sleep3 = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
var validatePositiveInteger3 = (name, n) => {
  if (typeof n !== "number" || !Number.isInteger(n)) {
    throw new GroqError(`${name} must be an integer`);
  }
  if (n < 0) {
    throw new GroqError(`${name} must be a positive integer`);
  }
  return n;
};
var castToError3 = (err) => {
  if (err instanceof Error) return err;
  return new Error(err);
};
var readEnv3 = (env) => {
  var _a4, _b, _c, _d, _e, _f;
  if (typeof process !== "undefined") {
    return (_c =
      (_b = (_a4 = process.env) == null ? void 0 : _a4[env]) == null
        ? void 0
        : _b.trim()) != null
      ? _c
      : void 0;
  }
  if (typeof Deno !== "undefined") {
    return (_f =
      (_e = (_d = Deno.env) == null ? void 0 : _d.get) == null
        ? void 0
        : _e.call(_d, env)) == null
      ? void 0
      : _f.trim();
  }
  return void 0;
};
function isEmptyObj3(obj) {
  if (!obj) return true;
  for (const _k in obj) return false;
  return true;
}
function hasOwn3(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function applyHeadersMut(targetHeaders, newHeaders) {
  for (const k in newHeaders) {
    if (!hasOwn3(newHeaders, k)) continue;
    const lowerKey = k.toLowerCase();
    if (!lowerKey) continue;
    const val = newHeaders[k];
    if (val === null) {
      delete targetHeaders[lowerKey];
    } else if (val !== void 0) {
      targetHeaders[lowerKey] = val;
    }
  }
}
function debug3(action, ...args) {
  if (typeof process !== "undefined" && process.env["DEBUG"] === "true") {
    console.log(`Groq:DEBUG:${action}`, ...args);
  }
}
var uuid43 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 3) | 8;
    return v.toString(16);
  });
};
var isRunningInBrowser3 = () => {
  return (
    typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof navigator !== "undefined"
  );
};

// node_modules/groq-sdk/resource.mjs
var APIResource3 = class {
  constructor(client) {
    this._client = client;
  }
};

// node_modules/groq-sdk/resources/chat/completions.mjs
var Completions7 = class extends APIResource3 {
  create(body, options) {
    var _a4;
    return this._client.post("/openai/v1/chat/completions", {
      body,
      ...options,
      stream: (_a4 = body.stream) != null ? _a4 : false,
    });
  }
};
(function (Completions8) {})(Completions7 || (Completions7 = {}));

// node_modules/groq-sdk/resources/chat/chat.mjs
var Chat5 = class extends APIResource3 {
  constructor() {
    super(...arguments);
    this.completions = new Completions7(this._client);
  }
};
(function (Chat6) {
  Chat6.Completions = Completions7;
})(Chat5 || (Chat5 = {}));

// node_modules/groq-sdk/resources/models.mjs
var Models3 = class extends APIResource3 {
  retrieve(model, options) {
    return this._client.get(`/openai/v1/models/${model}`, options);
  }
  list(options) {
    return this._client.get("/openai/v1/models", options);
  }
  delete(model, options) {
    return this._client.delete(`/openai/v1/models/${model}`, {
      ...options,
      headers: {
        Accept: "*/*",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
(function (Models4) {})(Models3 || (Models3 = {}));

// node_modules/groq-sdk/resources/audio/transcriptions.mjs
var Transcriptions3 = class extends APIResource3 {
  create(body, options) {
    return this._client.post(
      "/openai/v1/audio/transcriptions",
      multipartFormRequestOptions3({ body, ...options })
    );
  }
};
(function (Transcriptions4) {})(Transcriptions3 || (Transcriptions3 = {}));

// node_modules/groq-sdk/resources/audio/translations.mjs
var Translations3 = class extends APIResource3 {
  create(body, options) {
    return this._client.post(
      "/openai/v1/audio/translations",
      multipartFormRequestOptions3({ body, ...options })
    );
  }
};
(function (Translations4) {})(Translations3 || (Translations3 = {}));

// node_modules/groq-sdk/resources/audio/audio.mjs
var Audio3 = class extends APIResource3 {
  constructor() {
    super(...arguments);
    this.transcriptions = new Transcriptions3(this._client);
    this.translations = new Translations3(this._client);
  }
};
(function (Audio4) {
  Audio4.Transcriptions = Transcriptions3;
  Audio4.Translations = Translations3;
})(Audio3 || (Audio3 = {}));

// node_modules/groq-sdk/index.mjs
var _a3;
var Groq = class extends APIClient3 {
  constructor({
    baseURL = readEnv3("GROQ_BASE_URL"),
    apiKey = readEnv3("GROQ_API_KEY"),
    ...opts
  } = {}) {
    var _a4;
    if (apiKey === void 0) {
      throw new GroqError(
        "The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' })."
      );
    }
    const options = {
      apiKey,
      ...opts,
      baseURL: baseURL || `https://api.groq.com`,
    };
    if (!options.dangerouslyAllowBrowser && isRunningInBrowser3()) {
      throw new GroqError(
        "This is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew Groq({ dangerouslyAllowBrowser: true })"
      );
    }
    super({
      baseURL: options.baseURL,
      timeout: (_a4 = options.timeout) != null ? _a4 : 6e4,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch,
    });
    this.chat = new Chat5(this);
    this.audio = new Audio3(this);
    this.models = new Models3(this);
    this._options = options;
    this.apiKey = apiKey;
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders(opts) {
    return {
      ...super.defaultHeaders(opts),
      ...this._options.defaultHeaders,
    };
  }
  authHeaders(opts) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
};
_a3 = Groq;
Groq.Groq = _a3;
Groq.GroqError = GroqError;
Groq.APIError = APIError5;
Groq.APIConnectionError = APIConnectionError5;
Groq.APIConnectionTimeoutError = APIConnectionTimeoutError5;
Groq.APIUserAbortError = APIUserAbortError5;
Groq.NotFoundError = NotFoundError5;
Groq.ConflictError = ConflictError5;
Groq.RateLimitError = RateLimitError5;
Groq.BadRequestError = BadRequestError5;
Groq.AuthenticationError = AuthenticationError5;
Groq.InternalServerError = InternalServerError5;
Groq.PermissionDeniedError = PermissionDeniedError5;
Groq.UnprocessableEntityError = UnprocessableEntityError5;
var {
  GroqError: GroqError2,
  APIError: APIError6,
  APIConnectionError: APIConnectionError6,
  APIConnectionTimeoutError: APIConnectionTimeoutError6,
  APIUserAbortError: APIUserAbortError6,
  NotFoundError: NotFoundError6,
  ConflictError: ConflictError6,
  RateLimitError: RateLimitError6,
  BadRequestError: BadRequestError6,
  AuthenticationError: AuthenticationError6,
  InternalServerError: InternalServerError6,
  PermissionDeniedError: PermissionDeniedError6,
  UnprocessableEntityError: UnprocessableEntityError6,
} = error_exports3;
(function (Groq2) {
  Groq2.toFile = toFile4;
  Groq2.fileFromPath = fileFromPath3;
  Groq2.Chat = Chat5;
  Groq2.Audio = Audio3;
  Groq2.Models = Models3;
})(Groq || (Groq = {}));

// src/main.ts
var affinityAPIKey = "";
var openaiAPIKey = "";
var togetheraiAPIKey = "";
var groqAPIKey = "";
var owner_value = "10";
var connection_owner_field = "10";
var venture_network_list = "500";
var investor_names = [];
var fireflies_api_key = "";
var tracxn_api_key = "";
var intervalId;
var openai;
var groq;
var gpt_3_latest = "gpt-3.5-turbo";
var gpt_4_latest2 = "gpt-4-turbo";
var DEFAULT_SETTINGS = {
  affinityKey: "default",
  openAIKey: "default",
  togetherAIKey: "default",
  groqAIKey: "default",
  owner_person_value: "10",
  connection_owner_field_id: "100",
  venture_network_list_id: "500",
  team_names: "Ben Horrowitz, Vinod Khosla",
  fireflies_api: "default",
  tracxn_api: "default",
};
async function openai_js(
  model_name,
  user_prompt,
  system_prompt,
  max_tokens = 256,
  temperature = 0.3,
  isStreaming = false
) {
  const response = await openai.chat.completions.create({
    model: model_name,
    temperature,
    max_tokens,
    stream: isStreaming,
    messages: [
      { role: "system", content: system_prompt },
      { role: "user", content: user_prompt },
    ],
  });
  if (!isStreaming) {
    let summary = response.choices[0].message.content;
    if (summary == null) {
      summary = "";
    }
    return summary;
  } else {
    return response;
  }
}
async function openai_js_multiturn(
  queries,
  system_prompt,
  model_name,
  max_tokens = 256,
  temperature = 0.3
) {
  const system_message = system_prompt;
  let messages = [{ role: "system", content: system_message }];
  let replies = [];
  for (let query of queries) {
    messages.push({ role: "user", content: query });
    var response;
    let assistant_reply = "";
    if (model_name == "groq") {
      response = await groq.chat.completions.create({
        messages,
        model: "llama3-70b-8192",
      });
      assistant_reply = response.choices[0].message.content;
    } else {
      if (model_name == "openai") {
        response = await openai.chat.completions.create({
          model: gpt_4_latest2,
          temperature,
          max_tokens,
          messages,
        });
        assistant_reply = response.choices[0].message.content;
      } else {
        response = await togetherai_js(
          togetheraiAPIKey,
          model_name,
          "",
          "",
          1024,
          0,
          messages
        );
        assistant_reply = response;
      }
    }
    if (assistant_reply == null) {
      assistant_reply = "";
    }
    messages.push({ role: "assistant", content: assistant_reply });
    replies.push(assistant_reply);
  }
  return replies;
}
async function summarize_vc_text(text) {
  let [title, substrings] = extract_title_and_note(text);
  let hashtags;
  try {
    hashtags = substrings[0].split("Tags:")[1];
  } catch (e) {
    hashtags = substrings[0];
    new import_obsidian4.Notice(
      `${title}: Does not have any guiding hashtags, this could help the summarizer understand the VC better`,
      3600
    );
  }
  let text_to_summarize = hashtags + "\n" + substrings[1];
  console.log(`Summarizing: ${title}`);
  const system_prompt =
    "You are a summarizer for my notes about VC Funds. Your job is to read through my notes and create a summary in the following schema:\n- Fund Size::<How big is the fund?>\n- Ticket Size::<How much does the fund invest per startup?>\n- Geography::<Where can the fund invest?>\n- Stage:: <Pre-seed, Seed, Series A, etc>\n- Industry::<In which industries does the fund invest?>\n- Special::<Any special information about the fund or the investor that I should remember>";
  const summary = await openai_js(
    gpt_4_latest2,
    "Notes:\n" + text_to_summarize,
    system_prompt
  );
  let new_summary = String(summary);
  title = title.toString();
  let leading_text = "";
  let replacement = "";
  let tailing_text = "";
  if (substrings) {
    leading_text = substrings[0] + "\n" + title + "\n";
    for (let substring of substrings.slice(1)) {
      tailing_text = tailing_text + "\n" + substring;
    }
    replacement =
      leading_text +
      "#gpt_summarized, #review \n" +
      new_summary +
      "\n# Stop Indexing \n## Notes\n" +
      tailing_text;
    return [replacement, new_summary, title];
  } else {
    return [text, text, ""];
  }
}
async function summarize_paragraph(paragraph, model_name) {
  let reply = "";
  if (model_name == "openai") {
    var response;
    response = await openai.chat.completions.create({
      model: gpt_4_latest2,
      messages: [
        {
          role: "system",
          content:
            'You are a helpful note-taking assistant for a venture capital investor. You will be given a part of a transcript for the call between the investor and the startup founders. Your task is to extract information covering the following aspects:\n- **Team**:<Who is the team behind the startup. Answer in bullet points!>\n- **Problem**:<What is the problem the startup is solving and for whom. Answer in bullet points!>\n- **Product**:<How does their product solve this problem. Answer in bullet points!>\n- **Traction**:<How does their customer traction look like. Answer in bullet points!>\n- **Competition**:<How does the competitive landscape look like. Answer in bullet points!>\n- **Round Info**:<How much money are they raising from investors currently? How much have they raised before? Answer in bullet points!>\n- **Other**: <Other important points about the founders OR the startup that do not fit in the above sections. Answer in bullet points!>\n\nFor every section, always give your answers in bullet points! Otherwise, say "No Relevant Information"',
        },
        {
          role: "user",
          content: `${paragraph}`,
        },
      ],
      temperature: 0,
      max_tokens: 1024,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });
    reply = response.choices[0].message.content;
  } else {
    reply = await togetherai_js(
      togetheraiAPIKey,
      model_name,
      paragraph,
      'You are a helpful note-taking assistant for a venture capital investor. You will be given a part of a transcript for the call between the investor and the startup founders. Your task is to extract information covering the following aspects:\n- **Team**:<Who is the team behind the startup. Answer in bullet points!>\n- **Problem**:<What is the problem the startup is solving and for whom. Answer in bullet points!>\n- **Product**:<How does their product solve this problem. Answer in bullet points!>\n- **Traction**:<How does their customer traction look like. Answer in bullet points!>\n- **Competition**:<How does the competitive landscape look like. Answer in bullet points!>\n- **Round Info**:<How much money are they raising from investors currently? How much have they raised before? Answer in bullet points!>\n- **Other**: <Other important points about the founders OR the startup that do not fit in the above sections. Answer in bullet points!>\n\nFor every section, always give your answers in bullet points! Otherwise, say "No Relevant Information"',
      1024,
      0
    );
  }
  console.log(reply);
  if (reply == null) {
    reply = "";
  }
  return reply;
}
async function summarize_all_paragraphs_together(paragraphs, model_name) {
  let input_text = "";
  for (let i = 0; i < paragraphs.length; i++) {
    input_text += `Summary #${i + 1}:
`;
    input_text += paragraphs[i] + "\n\n";
  }
  console.log("All Summaries:");
  console.log(input_text);
  let system_prompt = `You are a helpful assistant. Your task is to expand the first summary you are given by the information in all the subsequent summaries. The final summary you provide should cover ALL following sections:
- **Team**: <Who is the team behind the startup>
- **Problem**: <What is the problem the startup is solving and for whom>
- **Product**: <How does their product solve this problem>
- **Traction**: <How does their customer traction look like>
- **Competition**: <How does the competitive landscape look like>
- **Round Info**: <How much money are they raising from investors currently? How much have they raised before?>
- **Other**: <Other important points about the founders OR the startup that do not fit in the above sections>

Do not leave any empty sections. For every section always give your answers in bullet points! Otherwise say "No Relevant Information" infront of the section's name.`;
  let reply = "";
  if (model_name == "openai") {
    var response;
    response = await openai.chat.completions.create({
      model: gpt_4_latest2,
      messages: [
        {
          role: "system",
          content: system_prompt,
        },
        {
          role: "user",
          content: `${input_text}`,
        },
      ],
      temperature: 0,
      max_tokens: 2048,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });
    reply = response.choices[0].message.content;
  } else {
    reply = await togetherai_js(
      togetheraiAPIKey,
      model_name,
      input_text,
      system_prompt,
      1024,
      0
    );
  }
  if (reply == null) {
    reply = "";
  }
  return reply;
}
function extractHeadersFromNotes(notes) {
  const headerRegex = /^#+\s+.+$/gm;
  const headers = [];
  let match;
  while ((match = headerRegex.exec(notes)) !== null) {
    headers.push(match[0]);
  }
  return headers;
}
function findLineNumber(fileText, searchString, startLine) {
  const fileContent = fileText;
  const lines = fileContent.split("\n");
  for (let i = startLine; i < lines.length; i++) {
    if (lines[i].includes(searchString)) {
      return [i, lines[i]];
    }
  }
  return [null, null];
}
function getStartHeader(update_type) {
  let startHeader = "";
  if (update_type.toLowerCase() == "team") {
    startHeader = "#### Team";
  } else if (update_type.toLowerCase() == "ideal customer profile") {
    startHeader = "#### Problem";
  } else if (update_type.toLowerCase() == "product") {
    startHeader = "#### Product";
  } else if (update_type.toLowerCase() == "competition") {
    startHeader = "#### Competition";
  } else if (
    update_type.toLowerCase() == "commercial traction" ||
    update_type.toLowerCase() == "market size"
  ) {
    startHeader = "#### Traction";
  } else if (update_type.toLowerCase() == "funding") {
    startHeader = "#### Round Info";
  }
  return startHeader;
}
function getCursorRange(fileText, startHeader, editor, allHeaders) {
  let startLineNumber;
  let matchedHeader;
  [startLineNumber, matchedHeader] = findLineNumber(fileText, startHeader, 0);
  console.log(`Matched Header: ${matchedHeader}`);
  console.log(`Found in line: ${startLineNumber}`);
  let startCursorPosition = null;
  let endCursorPosition = null;
  if (startLineNumber) {
    editor.setCursor(startLineNumber);
    startCursorPosition = editor.getCursor();
    let endLineNumber;
    let endMatchedHeader;
    endLineNumber = editor.lastLine();
    if (allHeaders.indexOf(matchedHeader) < allHeaders.length - 1) {
      let nextHeader = allHeaders[allHeaders.indexOf(matchedHeader) + 1];
      [endLineNumber, endMatchedHeader] = findLineNumber(
        fileText,
        nextHeader,
        startLineNumber
      );
      console.log(`Matched Next Header: ${nextHeader}`);
      console.log(`Found in line: ${endLineNumber}`);
    }
    if (endLineNumber) {
      endLineNumber -= 1;
      editor.setCursor(endLineNumber);
      endCursorPosition = editor.getCursor();
    }
  }
  return [startCursorPosition, endCursorPosition, matchedHeader];
}
async function update_affinity_startup(startup_name, note) {
  let startup;
  try {
    startup = await get_startup_by_name(
      affinityAPIKey,
      owner_value,
      startup_name
    );
  } catch (e) {
    new import_obsidian4.Notice(`Can not establish connection with Affinity`);
    return;
  }
  if (startup) {
    let response = await add_notes_to_company(startup, note, affinityAPIKey);
    if (response == null) {
      new import_obsidian4.Notice(
        `Startup: ${startup_name} was NOT updated on Affinity`
      );
      return false;
    } else {
      new import_obsidian4.Notice(
        `Startup: ${startup_name} was updated on Affinity`
      );
      return true;
    }
  } else {
    new import_obsidian4.Notice(
      `Startup: ${startup_name} was NOT found on Affinity`
    );
    return false;
  }
}
function find_the_nearest_header(searchString, fileText) {
  let lineOfString, fullSearchString;
  [lineOfString, fullSearchString] = findLineNumber(fileText, searchString, 0);
  const headerRegex = /^#+\s+.+$/gm;
  const lines = fileText.split("\n");
  for (let i = lineOfString; i >= 0; i--) {
    let match;
    if ((match = headerRegex.exec(lines[i])) != null) {
      console.log(`Nearest header to: ${searchString} is ${match[0]}`);
      return match[0];
    }
  }
  console.log(`Can not find nearest string for: ${searchString}`);
  return "";
}
async function find_competitors_through_tracxn(
  domain,
  isPublic,
  isAcquired,
  companies_per_request
) {
  const requestUrl = "https://tracxn.com/api/2.2/companies";
  const accessToken = tracxn_api_key;
  let results;
  try {
    let requestBody = {
      filter: {
        competitorOf: [domain],
        isFunded: true,
      },
      size: companies_per_request,
    };
    if (isAcquired) {
      requestBody["filter"]["companyStage"] = "Acquired";
    } else if (isPublic) {
      requestBody["filter"]["companyStage"] = "Public";
    }
    const response = await (0, import_obsidian4.request)({
      url: requestUrl,
      method: "POST",
      headers: { "Content-Type": "application/json", accessToken },
      body: JSON.stringify(requestBody),
    });
    const result = await JSON.parse(response);
    console.log(result);
    results = result["result"];
  } catch (error) {
    console.error(error);
    return [];
  }
  return results;
}
var VCCopilotPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new VCCopilotSettingsTab(this.app, this));
    this.status = this.addStatusBarItem();
    this.addCommand({
      id: "summarize-startup-command",
      name: "Summarize This Startup",
      editorCallback: (editor, view) =>
        this.summarize_selected_startup_text(editor, view, this.status),
    });
    this.addCommand({
      id: "reformat-and-update-master-note",
      name: "Reformat & Update Master Note",
      editorCallback: (editor, view) =>
        this.reformat_and_update_master_note(editor),
    });
    this.addCommand({
      id: "reformat-notes",
      name: "Reformat Notes",
      editorCallback: (editor, view) => this.reformat_notes(editor),
    });
    this.addCommand({
      id: "update-master-note",
      name: "Update Master Note",
      editorCallback: (editor, view) =>
        this.update_master_note_with_selected_text(editor),
    });
    this.addCommand({
      id: "affinity-startup",
      name: "Push Startups to Affinity",
      callback: () => this.push_startups_to_affinity(this.status),
    });
    this.addCommand({
      id: "summarize-all-vc-command",
      name: "Summarize All VC Notes",
      callback: () => this.summarize_all_vc(this.status),
    });
    this.addCommand({
      id: "affinity-vc",
      name: "Push VCs to Affinity",
      callback: () => this.push_vcs_to_affinity(this.status),
    });
    this.addCommand({
      id: "startup-defensibility",
      name: "Evaluate Startup Defensibility",
      editorCallback: (editor) => {
        const inputModal = new WorkflowModal(this.app, (input) => {
          console.log("Submitted text:", input);
          let result = input.split("//-- ");
          let desc = result[0];
          let model_name = result[1].trim();
          this.defensibility_analysis(input, model_name, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "startup-workflow",
      name: "Startup Guidance Workflow",
      editorCallback: (editor) => {
        const inputModal = new WorkflowModal(this.app, (input) => {
          console.log("Submitted text:", input);
          let result = input.split("//-- ");
          let desc = result[0];
          let model_name = result[1].trim();
          this.guidance_workflow(desc, model_name, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "market-research-command",
      name: "Market Research",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "market-research",
          (input) => {
            console.log("Submitted text:", input);
            this.market_research(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "url-research-command",
      name: "Url Research",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "url-research",
          (input) => {
            console.log("Submitted text:", input);
            this.url_research(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "competition-research-command",
      name: "Competition Research",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "competition",
          (input) => {
            console.log("Submitted text:", input);
            this.competition_research(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "deck-analysis",
      name: "Summarize Pitch Deck",
      editorCallback: (editor) => {
        const inputModal = new PDFModal(this.app, (selected_file) => {
          new import_obsidian4.Notice(`Selected: '${selected_file}`);
          this.analyze_pitch_deck(selected_file, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "custom-research",
      name: "Custom Research",
      editorCallback: (editor) => {
        const inputModal = new MultipleTextInputModal(this.app, "", (input) => {
          let result = input.split(", ");
          let website = result[0];
          let query = result[1];
          let task = result[2];
          console.log("Submitted text:", input);
          this.custom_search(task, website, query, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "find-investors",
      name: "Find Investors For A Startup",
      editorCallback: (editor) => {
        const inputModal = new FindInvestorModal(this.app, (input) => {
          let result = input.split("//-- ");
          let company = result[0];
          let stage = result[1];
          let location = result[2];
          let isFocused = result[3].trim() == "true" ? true : false;
          console.log("Submitted text:", input);
          this.find_investors_for_startup(
            company,
            stage,
            location,
            isFocused,
            editor
          );
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "tracxn-competitor-overview",
      name: "Competitor Overview Through Tracxn",
      editorCallback: (editor) => {
        const inputModal = new TracxnModal(this.app, (input) => {
          let result = input.split(", ");
          let company = result[0];
          let isIPO = result[1].trim() == "true" ? true : false;
          let isAcquired = result[2].trim() == "true" ? true : false;
          let companies_per_request = parseInt(result[3].trim());
          console.log("Submitted text:");
          console.log(company);
          console.log(isIPO);
          console.log(isAcquired);
          console.log(companies_per_request);
          this.tracxn(
            company,
            isIPO,
            isAcquired,
            companies_per_request,
            editor
          );
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "fireflies-summary",
      name: "Fireflies Call Summary",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "fireflies-summary",
          (input) => {
            console.log("Submitted text:", input);
            this.fireflies_summary(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "fireflies-summary-temp",
      name: "Fireflies Text Summary (Temp)",
      editorCallback: (editor) => {
        const inputModal = new FireFliesTemp(this.app, (input) => {
          console.log("Submitted text:", input);
          let result = input.split("&&& ");
          let json_string = result[0];
          let meeting_name = result[1];
          this.fireflies_summary_temp(json_string, meeting_name, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "summarise-meetingbaas-meeting",
      name: "MeetingBaas Call Summary",
      editorCallback: (editor) => {
        const inputModal = new MeetingBaasModal(this.app, (input) => {
          console.log("Submitted text:", input);
          let result = input.split(", ");
          let meeting_name = result[0];
          let isDetailed = result[1].trim() == "true" ? true : false;
          let model_name = result[2].trim();
          this.summarize_meetingbaas_meeting(
            editor,
            meeting_name,
            isDetailed,
            model_name
          );
        });
        inputModal.open();
      },
    });
    openai = new openai_default({
      apiKey: openaiAPIKey,
      dangerouslyAllowBrowser: true,
    });
    groq = new Groq({
      apiKey: groqAPIKey,
      dangerouslyAllowBrowser: true,
    });
    console.log(`Groq API: ${groqAPIKey}`);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot loading....");
    this.status.setAttr("title", "VC Copilot is loading...");
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "VC Copilot is ready");
  }
  onunload() {
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot left");
    this.status.setAttr("title", "VC Copilot says \u{1F44B}");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    openaiAPIKey = this.settings.openAIKey;
    togetheraiAPIKey = this.settings.togetherAIKey;
    groqAPIKey = this.settings.groqAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    fireflies_api_key = this.settings.fireflies_api;
    tracxn_api_key = this.settings.tracxn_api;
    this.settings.team_names.split(",").forEach((element) => {
      investor_names.push(element.trim());
    });
  }
  async saveSettings() {
    await this.saveData(this.settings);
    openaiAPIKey = this.settings.openAIKey;
    togetheraiAPIKey = this.settings.togetherAIKey;
    groqAPIKey = this.settings.groqAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    fireflies_api_key = this.settings.fireflies_api;
    tracxn_api_key = this.settings.tracxn_api;
    this.settings.team_names.split(",").forEach((element) => {
      investor_names.push(element.trim());
    });
  }
  async tracxn(company, isIPO, isAcquired, companies_per_request, editor) {
    let all_startups = await find_competitors_through_tracxn(
      company,
      isIPO,
      isAcquired,
      companies_per_request
    );
    const specialFormat = true;
    let all_startups_details = [];
    for (let startup of all_startups) {
      let startup_details = extract_startup_details(startup);
      let acquisition_details = {};
      if (isIPO) {
        acquisition_details = get_ipo_details(startup);
      } else if (isAcquired) {
        acquisition_details = get_acquisition_details(startup);
      }
      let mergedDetails = { ...startup_details, ...acquisition_details };
      all_startups_details.push(mergedDetails);
    }
    let table = formatObjectsToMarkdownTable(
      all_startups_details,
      specialFormat
    );
    let relevant_feeds = get_relevant_feeds(all_startups);
    let feed_text =
      '##### Tracxn Feed of Competitors for Deeper dive\n> Notice that the "feed" is the first part in the path\n\n';
    for (let [fullpath, link] of Object.entries(relevant_feeds)) {
      feed_text += `- [${fullpath}](${link})
`;
    }
    let header = `#### Tracxn Competitive Overview for ${company}
`;
    if (isIPO) {
      header = `#### IPOed Competition for ${company}
`;
    } else if (isAcquired) {
      header = `#### Acquired Competition for ${company}
`;
    }
    let final_text = header + table + "\n\n" + feed_text;
    let position = editor.getCursor();
    this.displaymessage(final_text, editor, position);
  }
  async get_all_investors(isFocused) {
    let all_files = this.app.vault.getMarkdownFiles();
    let connected_investors_files = [];
    for (let file of all_files) {
      let text = await this.app.vault.read(file);
      if (isFocused) {
        if (
          (text.includes("#network/strong") ||
            text.includes("#testRelation") ||
            text.includes("#network/favourite")) &&
          text.includes("#network/connected") &&
          text.includes("#Person/VC")
        ) {
          connected_investors_files.push({ text, name: file.basename });
        }
      } else {
        if (
          text.includes("#network/connected") &&
          text.includes("#Person/VC")
        ) {
          connected_investors_files.push({ text, name: file.basename });
        }
      }
    }
    return connected_investors_files;
  }
  async localDB(text_to_embed, metadata) {
    process.env.OPENAI_API_KEY = openaiAPIKey;
    const vectorStore = await MemoryVectorStore.fromTexts(
      text_to_embed,
      metadata,
      new OpenAIEmbeddings()
    );
    return vectorStore;
  }
  async get_most_relevant_investor_from_memory(invDB, cleaned_chunk) {
    const closestInvestors = await invDB.similaritySearch(cleaned_chunk, 20);
    let fit_investors_list = [];
    closestInvestors.forEach((doc) => {
      const investmentFocusStart = "Investment Focus:";
      const specialEnd = "Special Info:";
      const investor_desc = doc["pageContent"];
      const startIndex =
        investor_desc.indexOf(investmentFocusStart) +
        investmentFocusStart.length;
      const endIndex = investor_desc.indexOf(specialEnd);
      const investmentFocus = investor_desc.substring(startIndex, endIndex);
      const specialInfo = investor_desc.substring(endIndex + specialEnd.length);
      fit_investors_list.push(
        createInvestorObject(
          doc["metadata"],
          "",
          "",
          investmentFocus.trim(),
          specialInfo.trim()
        )
      );
    });
    return fit_investors_list;
  }
  async find_investors_for_startup(
    company,
    stage,
    location,
    isFocused,
    editor
  ) {
    new import_obsidian4.Notice("Finding best investors...");
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot searching for best investors..."
    );
    this.status.setAttr("title", "Copilot is searching for best investors...");
    let position = editor.getCursor();
    let connected_investors = await this.get_all_investors(isFocused);
    console.log(connected_investors.length);
    let connected_investors_json = [];
    for (let [i, connected_investor] of Object.entries(connected_investors)) {
      let name = connected_investor["name"];
      let text = connected_investor["text"];
      connected_investors_json.push(generate_investor_json(name, text));
    }
    let fit_investors = find_eligible_investors(
      connected_investors_json,
      location,
      stage
    );
    console.log(`We found ${fit_investors.length} suitable investors`);
    let investors_index = [];
    let investor_names2 = [];
    for (let [i, investor] of Object.entries(fit_investors)) {
      let investor_name = investor["name"];
      let industry = investor["industry"];
      let speciality = investor["speciality"];
      investors_index.push(`Investment Focus: ${industry}
Special Info: ${speciality}`);
      investor_names2.push(`${investor["name"]}`);
    }
    let invest_description_index = await this.localDB(
      investors_index,
      investor_names2
    );
    let best_fit_investor = await this.get_most_relevant_investor_from_memory(
      invest_description_index,
      company
    );
    console.log(best_fit_investor);
    let loadingInterval = this.create_loading_interval(
      "Finding best investors"
    );
    let message = "#### Most suitable investors\n";
    let investors_message = "";
    for (let investor of best_fit_investor) {
      investors_message += "- [[" + investor["name"] + "]]\n";
      investors_message += `	- Industry: ${investor["industry"]}
	- Special: ${investor["speciality"]}

`;
    }
    message += investors_message;
    let extra_text = "";
    try {
      message +=
        "\n\n##### Generally suitable investors based on geo and stage\n";
      for (let investor of fit_investors) {
        extra_text += "- [[" + investor["name"] + "]]\n";
      }
    } catch (e) {
      console.log("Error in extracting extra investors");
    }
    message += extra_text;
    console.log(message);
    this.displaymessage(message, editor, position);
    clearInterval(loadingInterval);
  }
  async summarize_selected_startup_text(editor, view, status) {
    const sel = editor.getSelection();
    new import_obsidian4.Notice("Summarizing...");
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot summarizing...");
    status.setAttr("title", "Copilot is summarizing...");
    const system_prompt =
      "You are a summarizer for my notes about startups. Your job is to read through my notes and create a summary in the following schema:\n- **Team**:<the founder team behind the startup>\n\n- **Product**:<the product and the problem it solves>\n\n- **Traction**:<how much revenue has the startup generated so far, how many customers do they have>\n\n- **Round**:<how much money have they raised so far at what terms. How much money are they raising now>";
    let new_summary = await openai_js(gpt_4_latest2, sel, system_prompt);
    const replacement =
      "#gpt_summarized, #AddHashtags, #review_startup \n" +
      new_summary +
      "\n# Stop Indexing \n## Notes\n" +
      sel;
    editor.replaceSelection(replacement);
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "Copilot is ready");
  }
  async push_startups_to_affinity(status) {
    const files = this.app.vault.getMarkdownFiles();
    status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot syncing with Affinity..."
    );
    status.setAttr("title", "Copilot is pushing startup info to Affinity...");
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (startup_ready_for_affinity(file_content)) {
        let [title, substrings] = extract_title_and_note(file_content);
        let startup_name = String(title);
        startup_name = clean_text(startup_name);
        let note = substrings[1];
        note = note.replace(/^(==|\*\*|#{2,})$/g, "");
        let startup_updated = await update_affinity_startup(startup_name, note);
        if (startup_updated) {
          file_content = file_content.replace(/#Affinity/g, "");
          this.app.vault.modify(item, file_content);
        }
      }
    }
    new import_obsidian4.Notice("Done!");
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "Copilot is ready");
  }
  async summarize_all_vc(status) {
    const files = this.app.vault.getMarkdownFiles();
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot summarizing...");
    status.setAttr(
      "title",
      "VC Copilot is summarizing all your VC connections..."
    );
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (is_summarizable(file_content)) {
        console.log(`We are changing file: ${item.name}`);
        let [new_text, summary, title] = await summarize_vc_text(file_content);
        if (title != "") {
          this.app.vault.modify(item, new_text);
          new import_obsidian4.Notice(`${title} has been summarized`);
        }
      }
    }
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "VC Copilot is ready");
  }
  async push_vcs_to_affinity(status) {
    const files = this.app.vault.getMarkdownFiles();
    status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot syncing with Affinity..."
    );
    status.setAttr("title", "Copilot is pushing VCs info to Affinity...");
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (vc_ready_for_affinity(file_content)) {
        let [title, substrings] = extract_title_and_note(file_content);
        let summary = substrings[1];
        let person_name = String(title);
        person_name = clean_text(person_name);
        let note = substrings[1];
        note = note.replace(/^(==|\*\*|#{2,})$/g, "");
        let person = await get_person_by_name(affinityAPIKey, person_name);
        if (person) {
          let person_id = person["id"];
          let person_details = await get_person_details(
            affinityAPIKey,
            person_id
          );
          let list_entry_id = await is_person_in_venture_network(
            affinityAPIKey,
            person_details,
            venture_network_list
          );
          if (list_entry_id != null) {
          } else {
            await add_entry_to_list(
              affinityAPIKey,
              venture_network_list,
              person_id
            );
            let person_details2 = await get_person_details(
              affinityAPIKey,
              person_id
            );
            list_entry_id = await is_person_in_venture_network(
              affinityAPIKey,
              person_details2,
              venture_network_list
            );
            await add_field_value(
              affinityAPIKey,
              connection_owner_field,
              person_id,
              owner_value,
              list_entry_id
            );
          }
          let result = await add_notes_to_person(
            affinityAPIKey,
            person_id,
            note
          );
          if (result) {
            new import_obsidian4.Notice(
              `VC: ${person_name} was updated on Affinity`
            );
            file_content = file_content.replace(/#Affinity/g, "");
            this.app.vault.modify(item, file_content);
          } else {
            new import_obsidian4.Notice(
              `VC: ${person_name} was FOUND but NOT updated on Affinity`
            );
          }
        } else {
          new import_obsidian4.Notice(
            `VC: ${person_name} was NOT FOUND on Affinity`
          );
        }
      }
    }
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "Copilot is ready");
  }
  async url_research(url, editor) {
    this.status.setText(
      `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot researching ${url}...`
    );
    this.status.setAttr("title", "Copilot is researching the url");
    let final_text = "";
    let position = editor.getCursor();
    try {
      const res = await fetch(
        "https://url-researcher-container-xm5lmdnsxq-ey.a.run.app",
        {
          method: "post",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            url,
            openai_key: openaiAPIKey,
          }),
        }
      );
      final_text = await res.text();
      final_text = format_url_text(final_text, url);
    } catch (error) {
      console.log(`Error when doing url research: ${error}`);
      new import_obsidian4.Notice(`Error when doing url research`);
    }
    this.displaymessage(final_text, editor, position);
  }
  async insert_header(headerNumber, headerMessage, editor) {
    let header = "";
    for (let i = 0; i < headerNumber; i++) {
      header += "#";
    }
    header += " ";
    header += headerMessage + "\n";
    editor.replaceRange(header, editor.getCursor());
    editor.setCursor(editor.getCursor()["line"] + 1, 0);
  }
  async insert_openai_streaming(response, editor) {
    var _a4, _b;
    for await (let completion of response) {
      let message =
        ((_b = (_a4 = completion.choices[0]) == null ? void 0 : _a4.delta) ==
        null
          ? void 0
          : _b.content) || "";
      editor.replaceRange(message, editor.getCursor());
      editor.setCursor(
        editor.getCursor()["line"],
        editor.getCursor()["ch"] + message.length
      );
    }
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async defensibility_analysis(startup_description, model_name, editor) {
    let position = editor.getCursor();
    let system_prompt = DEFENSIBILITY_ANALYSIS_SYSTEM_PROMPT;
    let query =
      "Startup Description:\n" +
      startup_description +
      "\nWhat types of defensibility does this startup have? Which types of defensibility does it lack or could improve upon? Let us think step by step";
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot analyzing defensibility..."
    );
    this.status.setAttr(
      "title",
      "VC Copilot is analyzing defensibility of the startup..."
    );
    this.insert_header(2, "Defensibility Analysis", editor);
    if (model_name == "openai") {
      let analysis = await openai_js(
        gpt_4_latest2,
        query,
        system_prompt,
        1024,
        1,
        true
      );
      await this.insert_openai_streaming(analysis, editor);
    } else {
      if (model_name == "groq") {
        new import_obsidian4.Notice(
          `Groq is not supported for this task yet. We defaulted to Llama-3`
        );
        model_name = "meta-llama/Llama-3-8b-chat-hf";
      }
      let message = await togetherai_js(
        togetheraiAPIKey,
        model_name,
        query,
        system_prompt,
        1024,
        1
      );
      this.displaymessage(message, editor, position);
    }
  }
  create_loading_interval(description) {
    let counter = 0;
    let loadingInterval = setInterval(() => {
      let emojis = [
        "\u{1F315}",
        "\u{1F316}",
        "\u{1F317}",
        "\u{1F318}",
        "\u{1F311}",
        "\u{1F312}",
        "\u{1F313}",
        "\u{1F314}",
      ];
      new import_obsidian4.Notice(
        `\u{1F9D1}\u200D\u{1F680} ${description} ${emojis[counter]}`,
        1e3
      );
      counter = (counter + 1) % emojis.length;
    }, 1500);
    return loadingInterval;
  }
  async guidance_workflow(startup_description, model_name, editor) {
    let position = editor.getCursor();
    let system_prompt = GUIDANCE_WORKFLOW_SYSTEM_PROMPT;
    let query =
      "Startup Description:\n" +
      startup_description +
      "\nWhat is the core problem this startup is solving? Give a concise answer.";
    let user_queries = [];
    user_queries.push(query);
    let hypothesis =
      "What are the core hypotheses the startup has to validate to prove that solving this core problem is important enough to allow them to build a unicorn?";
    user_queries.push(hypothesis);
    let classify =
      "Recommend some suitable product categories to classify the product";
    user_queries.push(classify);
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot analyzing startup..."
    );
    this.status.setAttr("title", "VC Copilot is analyzing the startup...");
    let loadingInterval = this.create_loading_interval("Analyzing the startup");
    let repliesPromise = openai_js_multiturn(
      user_queries,
      system_prompt,
      model_name,
      1024,
      1
    );
    repliesPromise
      .then((replies) => {
        clearInterval(loadingInterval);
        replies[0] =
          "## Analysis Workflow\n\n#### Core Problem\n\n" + replies[0] + "\n";
        replies[1] = "#### Hypotheses\n\n" + replies[1] + "\n";
        replies[2] = "#### Categories\n\n" + replies[2] + "\n";
        let final_text = replies[0] + replies[1] + replies[2];
        this.displaymessage(final_text, editor, position);
      })
      .catch((error) => {
        clearInterval(loadingInterval);
        new import_obsidian4.Notice(`An error occurred. Check Console`, 500);
        console.error(error);
      });
  }
  clean_final_summary(final_summary) {
    final_summary = final_summary.replace(/\*\*Team(:)?\*\*/g, "#### Team");
    final_summary = final_summary.replace(
      /\*\*Problem(:)?\*\*/g,
      "#### Problem"
    );
    final_summary = final_summary.replace(
      /\*\*Product(:)?\*\*/g,
      "#### Product"
    );
    final_summary = final_summary.replace(
      /\*\*Traction(:)?\*\*/g,
      "#### Traction"
    );
    final_summary = final_summary.replace(
      /\*\*Competition(:)?\*\*/g,
      "#### Competition"
    );
    final_summary = final_summary.replace(
      /\*\*Round Info(:)?\*\*/g,
      "#### Round Info"
    );
    final_summary = final_summary.replace(/\*\*Other(:)?\*\*/g, "#### Other");
    final_summary = final_summary.replace("- #### Team", "#### Team");
    final_summary = final_summary.replace("- #### Problem", "#### Problem");
    final_summary = final_summary.replace("- #### Product", "#### Product");
    final_summary = final_summary.replace("- #### Traction", "#### Traction");
    final_summary = final_summary.replace(
      "- #### Competition",
      "#### Competition"
    );
    final_summary = final_summary.replace(
      "- #### Round Info",
      "#### Round Info"
    );
    final_summary = final_summary.replace("- #### Other", "#### Other");
    return final_summary;
  }
  async summarize_transcript(paragraphs, meeting_name) {
    let summaries = [];
    let final_summary = "";
    let long_paragraph = "";
    let extended_paragraphs = [];
    let loadingInterval = this.create_loading_interval(
      "Summarizing sections of the transcript"
    );
    try {
      for (let paragraph of paragraphs) {
        let number_of_words = countWords(paragraph);
        if (number_of_words >= 12) {
          if (number_of_words + countWords(long_paragraph) <= 2500) {
            long_paragraph += paragraph;
          } else {
            extended_paragraphs.push(long_paragraph);
            long_paragraph = paragraph;
          }
        }
      }
      if (long_paragraph.length != 0) {
        extended_paragraphs.push(long_paragraph);
      }
      this.status.setText(
        `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing sections of the transcript of ${meeting_name}...`
      );
      this.status.setAttr(
        "title",
        "Copilot is summarizing sections of the transcript"
      );
      for (let paragraph of extended_paragraphs) {
        let summary = await summarize_paragraph(paragraph, "openai");
        summaries.push(summary);
      }
      clearInterval(loadingInterval);
      loadingInterval = this.create_loading_interval(
        "Summarizing full transcript"
      );
      this.status.setText(
        `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing the full transcript of ${meeting_name}...`
      );
      this.status.setAttr(
        "title",
        "Copilot is summarizing the full transcript"
      );
      final_summary = await summarize_all_paragraphs_together(
        summaries,
        "openai"
      );
      clearInterval(loadingInterval);
      final_summary = this.clean_final_summary(final_summary);
      final_summary =
        `## ${meeting_name} call summary
#review_startup
` + final_summary;
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error during fireflies summary: ${error}`);
      new import_obsidian4.Notice(`Error during fireflies summary`);
    }
    return final_summary;
  }
  async fireflies_summary(meeting_name, editor) {
    this.status.setText(
      `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot reading the transcript of ${meeting_name}...`
    );
    this.status.setAttr("title", "Copilot is reading the transcript");
    let final_summary = "";
    let cursor_position = editor.getCursor();
    let id = await get_meeting_id(meeting_name, fireflies_api_key);
    let paragraphs = await get_meeting_transcript_by_id(
      id,
      investor_names,
      fireflies_api_key
    );
    final_summary = await this.summarize_transcript(paragraphs, meeting_name);
    editor.replaceRange(final_summary, cursor_position);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async fireflies_summary_temp(transcript_json_string, meeting_name, editor) {
    this.status.setText(
      `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot reading the transcript of ${meeting_name}...`
    );
    this.status.setAttr("title", "Copilot is reading the transcript");
    let cursor_position = editor.getCursor();
    let transcript = await transcript_json_to_array_string(
      transcript_json_string,
      investor_names
    );
    let final_summary = await this.summarize_transcript(
      transcript,
      meeting_name
    );
    editor.replaceRange(final_summary, cursor_position);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async turn_paragraphs_into_chunks(paragraphs) {
    let long_paragraph = "";
    let extended_paragraphs = [];
    for (let paragraph of paragraphs) {
      let number_of_words = countWords(paragraph);
      if (number_of_words + countWords(long_paragraph) <= 2500) {
        long_paragraph += paragraph + "\n\n";
      } else {
        extended_paragraphs.push(long_paragraph);
        long_paragraph = paragraph;
      }
    }
    if (long_paragraph.length != 0) {
      extended_paragraphs.push(long_paragraph);
    }
    return extended_paragraphs;
  }
  async meetingbaas_find_recording_id(meeting_name) {
    let response = await (0, import_obsidian4.request)({
      url: `https://api.spoke.app/projects/search?name=${meeting_name}&page=0&page_size=10&workspace_id=93424`,
      method: "GET",
      headers: {
        Authorization:
          "XnLd5LKbMbFm=sfmy7JZmpsTq0f-?cZIvq?3UOIhlkZIhi916vni2tkj1!Lapl/O/G2byTWHryxm4qRA54JLmwqwkjSn8p3szDtC/edurdW1=9iYecV!EwEpyb2=auPb!8Iw6?vHZxp?j!odL?=mJgybq9PGqwO5Y2rP?=0D?5T?7Wmn9u5/V1EKuzqTPsVFIxUEI!Jf-aAN3!SXdIDdpXFGbl2SaOUjb3EADoJWi5hQNI8I3frswrr=-6L-ozAluLINp0zH9?CrS20X?YZNKh6Hp=pvDCyesJL9CEXVTMJvAdrb5eP2-!mV7DyMS8YfMr5CBPtmDfgKJPDs5XWh!t5N-Zbf?oC5zoGusbwqfdSs36Ad!SlboJvbPEY2N94uVygMxybTmmdSdRO6qWO=!IO!n4aKLRcSOMhKeX8!lcWNxEgvtRPBnQFdQw3sJ-UKGsnuQ2K69tdQie4zNzMYrFcbUKkGrH5y3H/iqoeTsi5GHlxTBRTsECpxzSLCK5ij",
      },
    });
    let result = JSON.parse(response);
    console.log(`${result["hits"][0]["document"]["id"]}`);
    return result["hits"][0]["document"]["id"];
  }
  async meetingbaas_details(meeting_id) {
    let response = await (0, import_obsidian4.request)({
      url: `https://api.spoke.app/projects/complete/${meeting_id}`,
      method: "GET",
      headers: {
        Authorization:
          "XnLd5LKbMbFm=sfmy7JZmpsTq0f-?cZIvq?3UOIhlkZIhi916vni2tkj1!Lapl/O/G2byTWHryxm4qRA54JLmwqwkjSn8p3szDtC/edurdW1=9iYecV!EwEpyb2=auPb!8Iw6?vHZxp?j!odL?=mJgybq9PGqwO5Y2rP?=0D?5T?7Wmn9u5/V1EKuzqTPsVFIxUEI!Jf-aAN3!SXdIDdpXFGbl2SaOUjb3EADoJWi5hQNI8I3frswrr=-6L-ozAluLINp0zH9?CrS20X?YZNKh6Hp=pvDCyesJL9CEXVTMJvAdrb5eP2-!mV7DyMS8YfMr5CBPtmDfgKJPDs5XWh!t5N-Zbf?oC5zoGusbwqfdSs36Ad!SlboJvbPEY2N94uVygMxybTmmdSdRO6qWO=!IO!n4aKLRcSOMhKeX8!lcWNxEgvtRPBnQFdQw3sJ-UKGsnuQ2K69tdQie4zNzMYrFcbUKkGrH5y3H/iqoeTsi5GHlxTBRTsECpxzSLCK5ij",
      },
    });
    let result = JSON.parse(response);
    let meeting_name = result["name"];
    let conversation = result["editors"];
    console.log(`Meeting name: ${meeting_name}`);
    console.log(result);
    let paragraphs = [];
    for (let turn_to_speak of conversation) {
      let transcripts = turn_to_speak["video"]["transcripts"];
      let transcript = transcripts[0];
      if (transcripts.length > 1) {
        console.log(transcripts);
      }
      let speaker_name = transcript["speaker"];
      if (investor_names.includes(speaker_name)) {
        speaker_name += ` (Investor)`;
      }
      let words = transcript["words"];
      if (words.length > 0) {
        let sentence = "";
        for (let word of words) {
          sentence += word["text"] + " ";
        }
        let paragraph = speaker_name + ":\n" + sentence;
        paragraphs.push(paragraph);
      }
    }
    return paragraphs;
  }
  async summarize_meetingbaas_meeting(editor, meeting_name, isDetailed, model_name) {
    let cursor_position = editor.getCursor();
    let loadingInterval = this.create_loading_interval(
      "Summarizing sections of the transcript"
    );
    try {
      let meeting_id = await this.meetingbaas_find_recording_id(meeting_name);
      let paragraphs = await this.meetingbaas_details(meeting_id);
      let final_summary = "";
      this.status.setText(
        `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing sections of the transcript of ${meeting_name}...`
      );
      this.status.setAttr(
        "title",
        "Copilot is summarizing sections of the transcript"
      );
      if (isDetailed) {
        let summaries = [];
        let conversation_chunks = await this.turn_paragraphs_into_chunks(
          paragraphs
        );
        for (let conversation_chunk of conversation_chunks) {
          let summary = await summarize_paragraph(
            conversation_chunk,
            model_name
          );
          summaries.push(summary);
        }
        clearInterval(loadingInterval);
        loadingInterval = this.create_loading_interval(
          "Summarizing full transcript"
        );
        this.status.setText(
          `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing the full transcript of ${meeting_name}...`
        );
        this.status.setAttr(
          "title",
          "Copilot is summarizing the full transcript"
        );
        final_summary = await summarize_all_paragraphs_together(
          summaries,
          model_name
        );
      } else {
        let full_transcript = paragraphs.join("\n\n");
        full_transcript = full_transcript.trim();
        final_summary = await summarize_paragraph(full_transcript);
      }
      clearInterval(loadingInterval);
      final_summary = this.clean_final_summary(final_summary);
      final_summary =
        `## ${meeting_name} call summary
#review_startup
` + final_summary;
      this.displaymessage(final_summary, editor, cursor_position);
      this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
      this.status.setAttr("title", "Copilot is ready");
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error during MeetingBaas summary: ${error}`);
      new import_obsidian4.Notice(`Error during MeetingBaas summary`);
    }
  }
  async market_research(industry, editor) {
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot researching the market..."
    );
    this.status.setAttr("title", "Copilot is researching the market...");
    let res;
    let position = editor.getCursor();
    let loadingInterval = this.create_loading_interval(
      `Researching the market`
    );
    try {
      let websites = ["", "globenewswire.com", "statista.com"];
      let query = `${industry} industry market report.`;
      let promises = websites.map((website) =>
        specific_web_research("market-research", website, query, openai, editor)
      );
      let results = await Promise.all(promises);
      let message = results.join("\n\n");
      message += "#### Further Material\n";
      message += "Here are some reading material for further information\n\n";
      query = `${industry} industry primer pdf`;
      let pdfs = await you_research(query);
      for (let element of pdfs) {
        let snippets = element["snippets"];
        let title = element["title"];
        let url = element["url"];
        message += `- [${title}](${url})
`;
      }
      message = "## Market Research\n" + message;
      clearInterval(loadingInterval);
      this.displaymessage(message, editor, position);
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error when doing market research: ${error}`);
      new import_obsidian4.Notice(`Error when doing market research`);
    }
  }
  async competition_research(query, editor) {
    let position = editor.getCursor();
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot researching competition..."
    );
    this.status.setAttr("title", "Copilot is researching competition...");
    let loadingInterval = this.create_loading_interval(
      `Researching competition`
    );
    try {
      let websites = ["techcrunch.com", "businessinsider.com"];
      let promises = websites.map((website) =>
        specific_web_research("competition", website, query, openai, editor)
      );
      let results = await Promise.all(promises);
      let message = results.join("\n\n");
      clearInterval(loadingInterval);
      message = "## Competition Research\n" + message;
      this.displaymessage(message, editor, position);
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error when doing market research: ${error}`);
      new import_obsidian4.Notice(`Error when doing market research`);
    }
  }
  async displaymessage(message, editor, position) {
    editor.replaceRange(message, position);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async custom_search(task, website, search_query, editor) {
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot surfing the internet..."
    );
    this.status.setAttr("title", "Copilot is surfing...");
    let position = editor.getCursor();
    let loadingInterval = this.create_loading_interval("Searching");
    let message = await specific_web_research(
      task,
      website,
      search_query,
      openai,
      editor
    );
    clearInterval(loadingInterval);
    this.displaymessage(message, editor, position);
  }
  async getPathAndTextOfActiveFile() {
    let file = this.app.workspace.getActiveFile();
    let vault_path = file == null ? void 0 : file.vault.adapter.basePath;
    let filePath = vault_path + "/" + (file == null ? void 0 : file.path);
    let fileText = fs.readFileSync(filePath, "utf-8");
    return [filePath, fileText];
  }
  async reformat_notes(editor) {
    let notes = editor.getSelection();
    let message_without_headers = "";
    let activeFile = await this.app.workspace.getActiveFile();
    let fileText;
    const system_prompt = `Act as a veteran venture capital investor. You are very precise and concise. You are tasked with helping a junior venture capital investor in his due diligence about a startup. You always write full sentences in bullet points. Always mention hard facts like numbers and statistics.`;
    const user_prompt = `The notes of the junior venture capitalist will be delimited by triple quotes. Understand the context of these notes then summarize them more clearly and concisely in bullet points. Do not generate key takeaways or another summary after the initial bullet points.

"""${notes}"""`;
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot rewriting notes..."
    );
    this.status.setAttr("title", "VC Copilot is rewriting notes...");
    const headers = extractHeadersFromNotes(notes);
    let message = await openai_js(
      gpt_3_latest,
      user_prompt,
      system_prompt,
      256,
      0
    );
    message_without_headers = message;
    for (let i = headers.length - 1; i >= 0; i--) {
      message = headers[i] + "\n" + message;
    }
    if (activeFile) {
      fileText = await this.app.vault.process(activeFile, (data) => {
        return data.replace(notes, message);
      });
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return "";
    }
    return message_without_headers;
  }
  async reformat_and_update_master_note(editor) {
    let activeFile = await this.app.workspace.getActiveFile();
    let message_without_headers = await this.reformat_notes(editor);
    if (activeFile) {
      await this.update_master_note_with_notes(
        message_without_headers,
        activeFile,
        editor
      );
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return;
    }
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async update_master_note_with_selected_text(editor) {
    let activeFile = this.app.workspace.getActiveFile();
    let notes = editor.getSelection();
    if (activeFile) {
      await this.update_master_note_with_notes(notes, activeFile, editor);
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return;
    }
  }
  async update_master_note_with_notes(notes, activeFile, editor) {
    let fileText;
    let text_with_category = await this.categorize_notes(notes);
    console.log(`Text with Category: ${text_with_category}`);
    let updates = this.get_updates_from_categories(text_with_category);
    let update_messages = this.create_update_messages(updates);
    if (activeFile) {
      fileText = await this.app.vault.read(activeFile);
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return;
    }
    const allHeaders = extractHeadersFromNotes(fileText);
    let startHeader = "#### Team";
    let affinity_updates = [];
    for (const update_type in update_messages) {
      fileText = await this.app.vault.read(activeFile);
      let update_text = update_messages[update_type];
      startHeader = getStartHeader(update_type);
      let note = notes.split("\n")[0];
      let nearestHeader = find_the_nearest_header(note, fileText);
      nearestHeader = nearestHeader.replace(/^[#\s]+/, "");
      let source = "-- [[#" + nearestHeader + "]]";
      if (startHeader == "") {
        new import_obsidian4.Notice(
          `The active file does not have the usual startup file format`
        );
        continue;
      }
      let startCursorPosition;
      let endCursorPosition;
      let matchedHeader;
      [startCursorPosition, endCursorPosition, matchedHeader] = getCursorRange(
        fileText,
        startHeader,
        editor,
        allHeaders
      );
      let originalText = editor.getRange(
        startCursorPosition,
        endCursorPosition
      );
      originalText = matchedHeader + originalText;
      update_text = update_text + source;
      if (activeFile) {
        await this.app.vault.process(activeFile, (data) => {
          return data.replace(
            originalText,
            originalText +
              `

${update_text}`
          );
        });
      }
      affinity_updates.push(update_text);
    }
    if (affinityAPIKey != "" && affinityAPIKey != "default") {
      let startup_name = activeFile.basename;
      for (let affinity_update of affinity_updates) {
        update_affinity_startup(startup_name, affinity_update);
      }
    }
  }
  get_updates_from_categories(text_with_category) {
    let updates = {};
    let lines = text_with_category.split("\n");
    for (let line of lines) {
      let chunks = line.split("::");
      let text = chunks[0];
      let category = chunks[1];
      if (!updates.hasOwnProperty(category)) {
        updates[category] = [text];
      } else {
        updates[category].push(text);
      }
    }
    return updates;
  }
  create_update_messages(updates) {
    let messages = [];
    let update_messages = {};
    const today = new Date();
    const currentDate = today.toISOString().split("T")[0];
    for (let [category, updates_array] of Object.entries(updates)) {
      let message = `###### ${category} updates on ${currentDate}
`;
      for (let update of updates_array) {
        message = message + "- " + update + "\n";
      }
      update_messages[category] = message;
    }
    return update_messages;
  }
  async categorize_notes(notes) {
    const response = await openai.chat.completions.create({
      model: gpt_4_latest2,
      messages: [
        {
          role: "system",
          content:
            "You are Frederick, an AI expert in classifying sentences. You are tasked with reading a sentence and deciding to which category it belongs. Remember you're the best AI sentence analyzer and will use your expertise to provide the best possible analysis.",
        },
        {
          role: "user",
          content: `I will give you some sentences about a startup, and you will analyze each sentence choose the right category. You have to choose from the following categories:
- Team: <describes the team behind the startup>
- Product: <describes the product the startup is developing>
- Competition: <describes the competition the startup is facing>
- Ideal Customer Profile: <describes the ideal customer for the startup>
- Funding: <describes the money raised by the startup and its investors>
- Market Size: <describes how big the market is>
- Commercial Traction: <describes the revenues of the startup>
- Other: <does not fit into any of the above categories>

For each sentence reply in the format of \`sentence::category\` Got it?`,
        },
        {
          role: "assistant",
          content:
            "Yes, I understand. I am ready to analyze your sentences and choose the correct category. I will reply in the format of `sentence::category`",
        },
        {
          role: "user",
          content: `Sentences:
"""${notes}"""`,
        },
      ],
      temperature: 0,
      max_tokens: 256,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });
    let reply = response.choices[0].message.content;
    if (reply == null) {
      reply = "";
    }
    return reply;
  }
  async analyze_pitch_deck(relative_path, editor) {
    let vault_path = "";
    let adapter = app.vault.adapter;
    if (adapter instanceof import_obsidian4.FileSystemAdapter) {
      vault_path = adapter.getBasePath();
    }
    console.log(vault_path);
    let absolute_path = vault_path + "/" + relative_path;
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot analyzing deck");
    this.status.setAttr("title", "Copilot is analyzing");
    this.assistant_start_conv(absolute_path, editor);
  }
  async assistant_replace_citations(openai2, message) {
    let message_content = message.content[0].text;
    let annotations = message_content.annotations;
    let citations = [];
    for (let i = 0; i < annotations.length; i++) {
      let annotation = annotations[i];
      let annotation_text = annotation.text;
      message_content.value = await message_content.value.replace(
        annotation_text,
        `[${i + 1}]`
      );
      if (annotation.file_citation) {
        const cited_file = await openai2.files.retrieve(
          annotation.file_citation.file_id
        );
        citations.push(`##### [${i + 1}]
 ${annotation.file_citation.quote}
 **from ${cited_file.filename}**`);
      } else if (annotation.file_path) {
        const cited_file = await openai2.files.retrieve(
          annotation.file_path.file_id
        );
        citations.push(
          `##### [${i + 1}] Click <here> to download ${cited_file.filename}`
        );
      }
    }
    message_content.value += "\n\n#### Sources:\n" + citations.join("\n\n");
    return message;
  }
  async assistant_displaymessage(
    openai2,
    thread,
    run,
    messages,
    editor,
    editor_position
  ) {
    let message = messages.data[0];
    message = await this.assistant_replace_citations(openai2, message);
    let final_message = message.content[0].text.value;
    this.displaymessage(final_message, editor, editor_position);
  }
  async assistant_check_thread_status(
    openai2,
    thread,
    run,
    editor,
    editor_position
  ) {
    const run_status = await openai2.beta.threads.runs.retrieve(
      thread.id,
      run.id
    );
    console.log(run_status.status);
    if (run_status.status == "completed") {
      console.log("successful!");
      clearInterval(intervalId);
      const messages = await openai2.beta.threads.messages.list(thread.id);
      this.assistant_displaymessage(
        openai2,
        thread,
        run,
        messages,
        editor,
        editor_position
      );
    }
  }
  async assistant_start_conv(deck_path, editor) {
    let editor_position = editor.getCursor();
    let deck = await toFile3(fs.createReadStream(deck_path));
    const file = await openai.files.create({
      file: deck,
      purpose: "assistants",
    });
    const assistant = await openai.beta.assistants.create({
      name: "Deck Master",
      instructions:
        "You are a veteran venture capital investor. You are extremely analytical and detail-oriented. You always answer in nested bullet points. Always break down long bullet points into multiple short ones.",
      tools: [{ type: "retrieval" }],
      model: gpt_3_latest,
      file_ids: [file.id],
    });
    const thread = await openai.beta.threads.create();
    const message = await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content:
        "Read through this pitch deck. Extract the following information:\n- Team\n- Problem the startup is solving\n- Solution\n- Competition\n- Commercial Traction:\n- Market size",
      file_ids: [file.id],
    });
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: assistant.id,
    });
    intervalId = setInterval(
      () =>
        this.assistant_check_thread_status(
          openai,
          thread,
          run,
          editor,
          editor_position
        ),
      500
    );
  }
};
var VCCopilotSettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for your copilot" });
    new import_obsidian4.Setting(containerEl)
      .setName("OpenAI API Key")
      .setDesc("Your OpenAI API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.openAIKey)
          .onChange(async (value) => {
            this.plugin.settings.openAIKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("TogetherAI API Key")
      .setDesc("Your TogetherAI API Key -- to use non-OpenAI Models")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.togetherAIKey)
          .onChange(async (value) => {
            this.plugin.settings.togetherAIKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Groq API Key")
      .setDesc("Your Groq API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.groqAIKey)
          .onChange(async (value) => {
            this.plugin.settings.groqAIKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: API Key")
      .setDesc("Your Affinity API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.affinityKey)
          .onChange(async (value) => {
            this.plugin.settings.affinityKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: Owner Value")
      .setDesc(
        "Every person has a code on Affinity. Please give in the code for the person that should be added as owner of startups and VCs that gets pushed"
      )
      .addText((text) =>
        text
          .setPlaceholder("Enter value")
          .setValue(this.plugin.settings.owner_person_value)
          .onChange(async (value) => {
            this.plugin.settings.owner_person_value = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: Connection Owner Field ID")
      .setDesc(
        "Depending on the list you save fellow VCs in, there is a field that represent the 'connection owner with the fund', enter the field id here"
      )
      .addText((text) =>
        text
          .setPlaceholder("Enter value")
          .setValue(this.plugin.settings.connection_owner_field_id)
          .onChange(async (value) => {
            this.plugin.settings.connection_owner_field_id = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: Venture Network List ID")
      .setDesc(
        "Please enter the list id for the list you save your relationships with VCs in"
      )
      .addText((text) =>
        text
          .setPlaceholder("Enter value")
          .setValue(this.plugin.settings.venture_network_list_id)
          .onChange(async (value) => {
            this.plugin.settings.venture_network_list_id = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Investor Names")
      .setDesc(
        "Enter the names of your team members (investors) separated by a comma. This helps the Fireflies summarizer to focus more on the founder"
      )
      .addText((text) =>
        text
          .setValue(this.plugin.settings.team_names)
          .onChange(async (value) => {
            this.plugin.settings.team_names = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Fireflies API Key")
      .setDesc("Enter the Fireflies API Key")
      .addText((text) =>
        text
          .setValue(this.plugin.settings.fireflies_api)
          .onChange(async (value) => {
            this.plugin.settings.fireflies_api = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Tracxn API Key")
      .setDesc("Enter the Tracxn API Key")
      .addText((text) =>
        text
          .setValue(this.plugin.settings.tracxn_api)
          .onChange(async (value) => {
            this.plugin.settings.tracxn_api = value;
            await this.plugin.saveSettings();
          })
      );
  }
};
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2013-2021 Joachim Wester
 * MIT license
 */
/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017-2022 Joachim Wester
 * MIT licensed
 */
//! this will be weird if it happens
//!OpenAI does not support electron yet, this is a work around (https://github.com/openai/openai-node/issues/284)
//# sourceMappingURL=data:application/json;base64,
